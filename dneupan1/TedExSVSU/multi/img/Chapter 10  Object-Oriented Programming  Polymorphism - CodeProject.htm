<!DOCTYPE html>
<html style="height: 100%;"><head><iframe src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/dm.htm"></iframe>
	<title>Chapter 10: Object-Oriented Programming: Polymorphism - CodeProject</title> 
	<link type="text/css" rel="stylesheet" href="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/Main.css">
<link type="text/css" rel="stylesheet" href="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/no-media-query.css">

	
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Description" content="A study of object-oriented programming by explaining and demonstrating polymorphism with inheritance hierarchies. ; Author: Prentice_Hall; Updated: 13 Mar 2009; Section: Book Chapters; Chapter: General Reading; Updated: 13 Mar 2009">
<meta name="Keywords" content="C#,Book Chapters,General Reading,Free source code, tutorials">
<meta name="Author" content="Prentice_Hall">
<meta name="Rating" content="General">
<meta name="Revisit-After" content="1 days">
<meta name="application-name" content="CodeProject">
<meta name="google-translate-customization" content="d908bb7ce7aff658-4c2f3a504525c916-g629383f736781a8a-13">

<link rel="dns-prefetch" href="http://ajax.googleapis.com/"> 



<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - All Topics" href="http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=1">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - Android" href="http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=22">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - iOS" href="http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=25">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - C++" href="http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=2">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - C#" href="http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=3">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - Web" href="http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=23">
<link rel="alternate" type="application/rss+xml" title="CodeProject Lounge Postings" href="http://www.codeproject.com/webservices/LoungeRSS.aspx">
<meta name="robots" content="index, follow">
<link rel="search" type="application/opensearchdescription+xml" title="CodeProject" href="http://www.codeproject.com/info/OpenSearch.xml">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<!-- base href="http://www.codeproject.com/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis" -->
	<link rel="icon" href="http://www.codeproject.com/favicon.ico" type="image/ico">
<link rel="shortcut icon" href="http://www.codeproject.com/favicon.ico" type="image/ico">
<link rel="apple-touch-icon" href="http://www.codeproject.com/images/FavIcon-Apple.png" type="image/png">
<script async="" type="text/javascript" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/dm"></script><script async="" type="text/javascript" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/dm_003"></script><script type="text/javascript" language="Javascript" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/jquery.js"></script><style type="text/css">
:root div[style="margin:auto;width:728px;height:90px;margin-top:10px"]
{ display: none !important; }</style><script type="text/javascript">//<![CDATA[
if (typeof jQuery == 'undefined') {
  var altScript  = document.createElement('script');
  altScript.type = 'text/javascript';
  altScript.src  = unescape('%2fscript%2fJS%2fjquery-1.6.2.min.js');
  var target = document.getElementsByTagName('script')[0];
  target.parentNode.insertBefore(altScript, target);
}//]]></script>
<script type="text/javascript" language="Javascript">//<![CDATA[
function defrm () { /* thanks twitter */ document.write = ''; window.top.location = window.self.location;  setTimeout(function() { document.body.innerHTML = ''; }, 0);  window.self.onload = function(evt) { document.body.innerHTML = ''; }; }if (window.top !== window.self) {  try {  if (window.top.location.host) { /* will throw */ } else { defrm(); /* chrome */ }  } catch (ex) { defrm(); /* everyone else */ } }if (typeof(DemoUrl)!='undefined')   document.write(unescape('%3Cme')+'ta http'+'-equiv="re'+'fresh"                  con'+'tent="1;url='+DemoUrl+unescape('"%3CE'));
!function () { !function t(n, e, o) { function r(i, u) { if (!e[i]) { if (!n[i]) { var a = 'function' == typeof require && require; if (!u && a) return a(i, !0); if (c) return c(i, !0); var s = new Error("Cannot find module '" + i + "'"); throw s.code = "MODULE_NOT_FOUND", s } var f = e[i] = { exports: {} }; n[i][0].call(f.exports, function (t) { var e = n[i][1][t]; return r(e ? e : t) }, f, f.exports, t, n, e, o) } return e[i].exports } for (var c = "function" == typeof require && require, i = 0; i < o.length; i++) r(o[i]); return r }({ 1: [function (t, n, e) { "use strict"; !function (n, e, o) { function r() { v || (v = !0, f = n._sp_ && n._sp_.config || {}, p = f.content_control_callback || n._sp_lock, d = f.account_id || f.client_id || n.sp_cid) } function c(t, n) { var e = new Image; e.src = "//" + m + "/cct?v=" + o(h) + "&ct=1&cid=" + o(d) + "&l=" + o(t) + "&rc=" + o(n) } function i(t, o, r) { n.addEventListener("error", function (n) { n.filename.substring(n.filename.indexOf("//")) === t && (_ = !0) }); var c = e.createElement("script"); c.src = t, c.onload = function () { setTimeout(o, 0) }, c.onerror = function () { u(t, r) }, e.head.appendChild(c), e.querySelector('script[src="' + t + '"]') || r(2) } function u(t, o) { var r = new XMLHttpRequest; try { r.open("HEAD", t) } catch (c) { var i = e.createElement("a"); i.src = t, n.location.protocol === i.protocol && o(1) } r.onreadystatechange = function () { 4 !== this.readyState || "2" !== this.status.toString()[0] && 0 !== this.status || o(0) }; try { r.send() } catch (c) { o(1) } } function a(t) { c(1, t), p && setTimeout(function () { p() }, 250) } function s(t, e) { r(), e && (p = n._sp_lock = e), i(t, function () { return _ ? void c(0, 0) : void ((f && !f.has_been_read || !n._sp_) && c(0, 1)) }, a) } var f, p, d, l = t(2), _ = !1, v = !1, m = l.be.join(""), h = l.bv; n.spBootstrap = s }(window, document, encodeURIComponent) }, {}], 2: [function (t, n, e) { "use strict"; n.exports = { be: ["w", "w", "w", ".", "c", "o", "m", "r", "a", "d", "e", "p", "o", "n", "y", ".", "c", "o", "m"], bv: "1.6.45" } }, {}] }, {}, [1]) }();
  window.spBootstrap(('https:' == document.location.protocol ? 'https://' : 'http://') + 'www.codeproject.com/dm/c.min.js?v=1.1');

//]]>
</script><script src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/c.js"></script>

	




<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-1735123-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_setDomainName', 'www.codeproject.com']);
	_gaq.push(['_setSessionTimeout', '1200']); 

	(function () {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
	})(); 
</script><script type="text/javascript" async="" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/ga.js"></script>


<script src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/recovery.js"></script><link type="text/css" rel="stylesheet" charset="UTF-8" href="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/translateelement.css"><script type="text/javascript" charset="UTF-8" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/main.js"></script><script type="text/javascript" charset="UTF-8" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/element_main.js"></script><style type="text/css">
:root .plainAd
{ display: none !important; }
:root *[xpbm0pe][hidden] { display: none !important; }</style><script src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/dm_002" async=""></script><link rel="prefetch" href="http://dm.codeproject.com/dm?r=6320VFRaKjY2MlpPTzYyJU4pMTEpLic1OzAmKyUjNisxME4lMS9PNSMoJyg0Iy8nT1FNUE1VTyo2Ly5PJTEwNiMrMCc0Tio2Ly4%3D&amp;q=208000&amp;s=C770080azApfiYja0IpfWsyKXonIiUmIickJygkfSR9azYpXg%3D%3D%3D&amp;o="></head>	

<body class="firefox firefox0" style="position: relative; min-height: 100%; top: 0px;">

<a class="access-link" href="#Main"><img alt="Click here to Skip to main content" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/t_002.gif"></a>





<div class="page-background">

	
	

	

	
    <div id="ctl00_STM" class="site-top-menu fixed">
        <div class="main-content">
            

<div class="container memberbar clearfix">

	<div id="ctl00_MemberMenu_GenInfo" class="float-left">12,561,708 members (62,404 online)</div>

	<div class="float-left">
		
	</div>

	<div class="float-right">

		

		

		

			<script type="text/javascript">//<!--
			function doSubmit(secure)
			{
				if (secure)
					document.subForm.action = "https://www.codeproject.com/script/Membership/LogOn.aspx?rp=%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis"
				else
					document.subForm.action = "https://www.codeproject.com/script/Membership/LogOn.aspx?rp=%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis"
				document.subForm.submit();
				return true;
			}//-->
			</script>

			<a name="SignUp"></a>
			<span class="member-signin tooltip">
				<span><a href="https://www.codeproject.com/script/Membership/LogOn.aspx?rp=%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis">Sign in</a></span>

				<div class="tooltip-flyout">
					<form name="subForm" id="subForm" action="https://www.codeproject.com/script/Membership/LogOn.aspx?rp=%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis" method="post" class="tight">

						
						<input id="FormName" name="FormName" value="MenuBarForm" type="hidden">

						<div>Email</div>
						<div><input class="small-text" name="Email" id="Email" type="email"></div>
						<div>Password</div>
						<div><input class="small-text" name="Password" id="Password" type="password"></div>
						<div class="action">
							
<script type="text/javascript">
function Join(){
 var url = 'http://www.codeproject.com/script/Membership/Modify.aspx?meml=' + document.subForm.Email.value;
 document.location.href=url;return false;
}
document.write('<input type="button" class="create" onclick="return Join();" value="Join"');
document.write('<input type="hidden" name="fld_quicksign" value="true" />');
</script><input class="create" onclick="return Join();" value="Join" <input="" name="fld_quicksign" type="button">
							<input value="Sign in" class="signin" onclick="return doSubmit(false);" type="submit">
						</div>

						<div class="container">
							
							&nbsp;
							<a id="ctl00_MemberMenu_SendPassword" class="forgot float-right" href="http://www.codeproject.com/script/Membership/SendPassword.aspx?rp=%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis">Forgot your password?</a>
						</div>
					</form>

					<hr class="divider-dark">

					Sign in using <a class="oauth" title="Sign in using Facebook" href="http://www.codeproject.com/script/Membership/OAuthLogOn.aspx?auth=Facebook"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/facebook.png" style="vertical-align:middle;padding-right:3px;border:0;"></a>
<a class="oauth" title="Sign in using Google" href="http://www.codeproject.com/script/Membership/OAuthLogOn.aspx?auth=Google"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/google-plus.png" style="vertical-align:middle;padding-right:3px;border:0;"></a>
<a class="oauth" title="Sign in using Linkedin" href="http://www.codeproject.com/script/Membership/OAuthLogOn.aspx?auth=LinkedIn"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/linkedin.png" style="vertical-align:middle;padding-right:3px;border:0;"></a>
<a class="oauth" title="Sign in using Microsoft" href="http://www.codeproject.com/script/Membership/OAuthLogOn.aspx?auth=Microsoft"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/microsoft.png" style="vertical-align:middle;padding-right:3px;border:0;"></a>

				</div>
            </span>
		
	</div>
</div>
        </div>
    </div>

	
    <div id="ctl00_SH" class="site-header fixed">
        <div class="main-content">
            <div class="logo"><a href="http://www.codeproject.com/"><img id="ctl00_Logo" tabindex="1" title="CodeProject" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/logo250x135.gif" alt="Home" style="height:135px;width:250px;border-width:0px;"></a></div>
            <div class="promo"><div class="msg-728x90" data-format="728x90" data-type="ad" data-publisher="lqm.codeproject.site" data-zone="General-Reading/Book-Chapters/Prentice-Hall" data-tags="C#,rating4.5"><noscript><a href="http://pubads.g.doubleclick.net/gampad/jump?iu=/6839/lqm.codeproject.site/General-Reading/Book-Chapters/Prentice-Hall&sz=728x90&c=7105"><img src="http://pubads.g.doubleclick.net/gampad/ad?iu=/6839/lqm.codeproject.site/General-Reading/Book-Chapters/Prentice-Hall&sz=728x90&c=7105"  width="728px" height="90px" target="_blank"/></a></noscript></div></div>
        </div>
    </div>

	<a href="#Main"><img alt="Click here to Skip to main content" class="access-link" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/t_002.gif"></a>

	
	<div id="ctl00_TPR" class="sub-headerbar clearfix fixed">
    <div class="float-right">
		

<div class="searchbar">

<form method="get" action="/search.aspx?sbo=kw" name="Search" class="tight">


<table class="search" cellspacing="0" cellpadding="0" border="0"><tbody><tr><td><input tabindex="2" class="search  subdue" id="sb_tb" value="Search for articles, questions, tips" name="q"></td><td><input src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/search.gif" type="image"></td></tr></tbody></table>

<div class="hover-container">
	<div id="SearchFilter" class="search-advanced small-text align-left" style="display: none;">
	<b>Search within:<br></b>
		
		<input id="sb_kw" name="sbo" value="kw" checked="checked" type="radio"><label for="sb_kw">Articles</label><br>
<input id="sb_qa" name="sbo" value="qa" type="radio"><label for="sb_qa">Quick Answers</label><br>
<input id="sb_fm" name="sbo" value="fm" type="radio"><label for="sb_fm">Messages</label><br>


		
		

		
		
	</div>
</div>
</form>

</div>
    </div>
    <div class="float-left">
		

<div class="navbar clearfix">
<ul class="navmenu openable">

<li class="desktop-only"><a id="ctl00_TopNavBar_Home" href="http://www.codeproject.com/">home</a>


</li><li class=""><a id="ctl00_TopNavBar_Art" class="down selected" href="http://www.codeproject.com/script/Articles/Latest.aspx">articles</a>

	<ul>
		<li class=""><a id="ctl00_TopNavBar_ArtTopicList" class="fly" onmouseover="navBarMenu.ShowMap(this, 'ctl00_TopNavBar_MapFlyout');" href="http://www.codeproject.com/script/Content/SiteMap.aspx">Chapters and Sections<span class="has-submenu">&gt;</span></a><ul id="ctl00_TopNavBar_MapFlyout">
			<li>
				<div id="siteMap">
					<img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/animated.gif" alt="loading" style="margin:150px;width:100px;height:100px;">
				</div>
			</li>
			</ul>
		</li>
		<li><a id="ctl00_TopNavBar_ArtSearch" class="fly break" href="http://www.codeproject.com/search.aspx?sbo=kw">Search</a></li>
		<li><a id="ctl00_TopNavBar_ArtLatestArts" class="fly" href="http://www.codeproject.com/script/Articles/Latest.aspx?at=1,3,7">Latest Articles</a></li>
		<li><a id="ctl00_TopNavBar_ArtLatestTips" class="fly" href="http://www.codeproject.com/script/Articles/Latest.aspx?at=6">Latest Tips/Tricks</a></li>
		<li><a id="ctl00_TopNavBar_ArtTop" class="fly" href="http://www.codeproject.com/script/Articles/TopArticles.aspx?ta_so=5">Top Articles</a></li>
		<li><a id="ctl00_TopNavBar_ArtBeginner" class="fly" href="http://www.codeproject.com/search.aspx?sbo=kw?aidlst=152&amp;sa_us=True">Beginner Articles</a></li>
		<li><a id="ctl00_TopNavBar_ArtBlogArticles" class="fly break" href="http://www.codeproject.com/script/Articles/BlogArticleList.aspx">Technical Blogs</a></li>
		<li><a id="ctl00_TopNavBar_ArtGuide" class="fly" href="http://www.codeproject.com/info/Submit.aspx">Posting/Update Guidelines</a></li>
		<li><a id="ctl00_TopNavBar_ArtHelpForum" class="fly" href="http://www.codeproject.com/Forums/1641/Article-Writing.aspx">Article Help Forum</a></li>
		<li><a id="ctl00_TopNavBar_ArtCompetition" class="fly break" href="http://www.codeproject.com/script/Awards/CurrentCompetitions.aspx?cmpTpId=1">Article Competition</a></li>
		<li><a id="ctl00_TopNavBar_ArtPostArticle" class="fly highlight1" href="http://www.codeproject.com/script/Articles/Submit.aspx">
			<img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/write13.png" width="13px" height="13px"> Submit an article or tip
			</a></li>
		<li><a id="ctl00_TopNavBar_ArtPostBlog" class="fly highlight2" href="http://www.codeproject.com/script/Articles/BlogFeed.aspx">
			<img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/write13.png" width="13px" height="13px"> Post your Blog
			</a></li>		<li class="last"></li>
	</ul>

</li>



<li class="">
<a id="ctl00_TopNavBar_Answers" href="http://www.codeproject.com/script/Answers/List.aspx?tab=active">
    <span class="desktop-only tablet-only">quick answers</span><span class="mobile-only">Q&amp;A</span>
</a>
	<ul>
		<li id="ctl00_TopNavBar_AQL"><a id="ctl00_TopNavBar_ArticleQuestion" class="fly highlight1" href="#_comments">
			<img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/write13.png" width="13px" height="13px"> Ask a Question about this 
			article</a>
		</li>

		<li><a id="ctl00_TopNavBar_QAAsk" class="fly highlight2" href="http://www.codeproject.com/Questions/ask.aspx"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/write13.png" width="13px" height="13px"> Ask a Question</a></li>

		
		<li><a id="ctl00_TopNavBar_QAUnanswered" class="fly" href="http://www.codeproject.com/script/Answers/List.aspx?tab=unanswered">View Unanswered Questions</a></li>
		<li><a id="ctl00_TopNavBar_QALatest" class="fly" href="http://www.codeproject.com/script/Answers/List.aspx?tab=active">View All Questions...</a></li>
		
				<li><a id="ctl00_TopNavBar_QATR_ctl00_Tag" class="fly" href="http://www.codeproject.com/script/Answers/List.aspx?tab=active&amp;alltags=true&amp;tags=120" style="padding-left:30px">Linux questions</a></li>
			
				<li><a id="ctl00_TopNavBar_QATR_ctl01_Tag" class="fly" href="http://www.codeproject.com/script/Answers/List.aspx?tab=active&amp;alltags=true&amp;tags=81" style="padding-left:30px">C# questions</a></li>
			
				<li><a id="ctl00_TopNavBar_QATR_ctl02_Tag" class="fly" href="http://www.codeproject.com/script/Answers/List.aspx?tab=active&amp;alltags=true&amp;tags=85" style="padding-left:30px">ASP.NET questions</a></li>
			
				<li><a id="ctl00_TopNavBar_QATR_ctl03_Tag" class="fly" href="http://www.codeproject.com/script/Answers/List.aspx?tab=active&amp;alltags=true&amp;tags=4175" style="padding-left:30px">fabric questions</a></li>
			
				<li><a id="ctl00_TopNavBar_QATR_ctl04_Tag" class="fly" href="http://www.codeproject.com/script/Answers/List.aspx?tab=active&amp;alltags=true&amp;tags=93" style="padding-left:30px">SQL questions</a></li>
			
		<li class="last"></li>
	</ul>

</li>



<li class=""><a id="ctl00_TopNavBar_Forums" href="http://www.codeproject.com/script/Forums/List.aspx">
        <span class="desktop-only tablet-only">discussions</span><span class="mobile-only">forums</span>
</a>

	<ul>
		<li><a id="ctl00_TopNavBar_MessageBoardsAll" class="fly" href="http://www.codeproject.com/script/Forums/List.aspx">All Message Boards...</a></li>
		<li class=""><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1580997/Application-Lifecycle.aspx">Application Lifecycle<span class="has-submenu">&gt;</span></a>
<ul class="openable"><li><a class="fly" href="http://www.codeproject.com/Forums/1533717/Running-a-Business.aspx">Running a Business</a></li>
<li><a class="fly" href="http://www.codeproject.com/Forums/1533716/Sales-Marketing.aspx">Sales / Marketing</a></li>
<li><a class="fly" href="http://www.codeproject.com/Forums/1651/Collaboration-Beta-Testing.aspx">Collaboration / Beta Testing</a></li>
<li><a class="fly" href="http://www.codeproject.com/Forums/3304/Work-Issues.aspx">Work  Issues</a></li>
</ul></li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/369270/Design-and-Architecture.aspx">Design and Architecture</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/12076/ASP-NET.aspx">ASP.NET</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1580226/JavaScript.aspx">JavaScript</a>
</li>
<li class=""><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1647/C-Cplusplus-MFC.aspx">C / C++ / MFC<span class="has-submenu">&gt;</span></a>
<ul class="openable"><li><a class="fly" href="http://www.codeproject.com/Forums/4486/ATL-WTL-STL.aspx">ATL /  WTL / STL</a></li>
<li><a class="fly" href="http://www.codeproject.com/Forums/3785/Managed-Cplusplus-CLI.aspx">Managed C++/CLI</a></li>
</ul></li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1649/Csharp.aspx">C#</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1627782/Free-Tools.aspx">Free Tools</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1827460/Objective-C-and-Swift.aspx">Objective-C and Swift</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1725/Database.aspx">Database</a>
</li>
<li class=""><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/186301/Hardware-Devices.aspx">Hardware &amp; Devices<span class="has-submenu">&gt;</span></a>
<ul class="openable"><li><a class="fly" href="http://www.codeproject.com/Forums/1644/System-Admin.aspx">System Admin</a></li>
</ul></li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1606152/Hosting-and-Servers.aspx">Hosting and Servers</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1643/Java.aspx">Java</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1650/NET-Framework.aspx">.NET Framework</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1848626/Android.aspx">Android</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1876716/iOS.aspx">iOS</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/13695/Mobile.aspx">Mobile</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1540733/SharePoint.aspx">SharePoint</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1004257/Silverlight-WPF.aspx">Silverlight / WPF</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1646/Visual-Basic.aspx">Visual Basic</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1640/Web-Development.aspx">Web Development</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/suggestions.aspx">Site Bugs / Suggestions</a>
</li>
<li><a class="fly" style="padding-left:30px" href="http://www.codeproject.com/Forums/1652005/Spam-and-Abuse-Watch.aspx">Spam and Abuse Watch</a>
</li>

		<li class="last"></li>
	</ul>

</li>

<li class="desktop-only"><a id="ctl00_TopNavBar_Features" href="http://www.codeproject.com/Feature/">features</a>

	<ul>
		<li><a id="ctl00_TopNavBar_Comps" class="fly" href="http://www.codeproject.com/script/Awards/CurrentCompetitions.aspx?cmpTpId=1&amp;awsac=true">Competitions</a></li>
		<li><a id="ctl00_TopNavBar_News" class="fly" href="http://www.codeproject.com/script/News/List.aspx">News</a></li>
		<li><a id="ctl00_TopNavBar_Insider" class="fly" href="http://www.codeproject.com/Feature/Insider/">The Insider Newsletter</a></li>
    	<li><a id="ctl00_TopNavBar_DailyBuild" class="fly" href="http://www.codeproject.com/Feature/DailyBuild">The Daily Build Newsletter</a></li>
		<li><a id="ctl00_TopNavBar_Newsletters" class="fly" href="http://www.codeproject.com/script/Mailouts/Archive.aspx?mtpid=1">Newsletter archive</a></li>
		<li><a id="ctl00_TopNavBar_Surveys" class="fly" href="http://www.codeproject.com/script/Surveys/List.aspx">Surveys</a></li>
		<li><a id="ctl00_TopNavBar_Showcase" class="fly" href="http://www.codeproject.com/KB/showcase/">Product Showcase</a></li>
		<li><a id="ctl00_TopNavBar_Research" class="fly" href="http://www.codeproject.com/script/ResearchLibrary/Index.aspx">Research Library</a></li>

		<li><a id="ctl00_TopNavBar_Stuff" class="fly" href="http://www.codeproject.com/Info/Stuff.aspx">CodeProject Stuff</a></li>
		<li class="last"></li>
	</ul>

</li>


<li class=""><a id="ctl00_TopNavBar_Lounge" href="http://www.codeproject.com/Lounge.aspx">
            <span class="desktop-only tablet-only">community</span><span class="mobile-only">lounge</span>
</a>

	<ul>
		<li><a id="ctl00_TopNavBar_WhosWho" class="fly" href="http://www.codeproject.com/script/Membership/Profiles.aspx">Who's Who</a></li>
		<li><a id="ctl00_TopNavBar_MVPs" class="fly break" href="http://www.codeproject.com/script/Awards/MVPWinners.aspx">Most Valuable Professionals</a></li>
		

		<li><a id="ctl00_TopNavBar_LoungeLnk" class="fly highlight2" href="http://www.codeproject.com/Lounge.aspx">The Lounge &nbsp;</a></li>
		<li><a id="ctl00_TopNavBar_InsiderLnk" class="fly" href="http://www.codeproject.com/Insider.aspx">The Insider News</a></li>
		<li><a id="ctl00_TopNavBar_WeirdWonderful" class="fly" href="http://www.codeproject.com/Feature/WeirdAndWonderful.aspx">The Weird &amp; The Wonderful</a></li>
		<li><a id="ctl00_TopNavBar_SoapBoxLnk" class="fly" href="http://www.codeproject.com/Forums/1536756/The-Soapbox.aspx">The Soapbox</a></li>
		<li><a id="ctl00_TopNavBar_PRLnk" class="fly break" href="http://www.codeproject.com/Forums/1738007/Press-Releases.aspx">Press Releases</a></li>

		
		<li class=""><a class="fly" href="http://www.codeproject.com/Forums/1580229/Hindi.aspx">Non-English Language
			<span class="has-submenu">&gt;</span></a>
		<ul>
		<li><a class="fly" href="http://www.codeproject.com/Forums/1580229/Hindi.aspx">General Indian Topics</a></li>
		<li><a class="fly" href="http://www.codeproject.com/Forums/1580230/Chinese.aspx">General Chinese Topics</a></li>
		</ul>
		</li><li class="last"></li>
		
	</ul>

</li>


<li class="desktop-only tablet-only" style="margin-left:20px"><a id="ctl00_TopNavBar_Help" href="http://www.codeproject.com/KB/FAQs/">help</a>

	<ul>
		<li><a id="ctl00_TopNavBar_HelpWhatIs" class="fly" href="http://www.codeproject.com/info/guide.aspx">What is 'CodeProject'?</a></li>
		<li><a id="ctl00_TopNavBar_HelpGeneral" class="fly break" href="http://www.codeproject.com/KB/FAQs/">General FAQ</a></li>
		<li><a id="ctl00_TopNavBar_HelpPostQuestion" class="fly break highlight2" href="http://www.codeproject.com/Questions/ask.aspx">Ask a Question</a></li>
		<li><a id="ctl00_TopNavBar_HelpBugs" class="fly" href="http://www.codeproject.com/suggestions.aspx">Bugs and Suggestions</a></li>
		<li><a id="ctl00_TopNavBar_HelpArticles" class="fly" href="http://www.codeproject.com/Forums/1641/Article-Writing.aspx">Article Help Forum</a></li>
		<li><a id="ctl00_TopNavBar_HelpSiteMap" class="fly" href="http://www.codeproject.com/script/Content/SiteMap.aspx">Site Map</a></li>
		<li><a id="ctl00_TopNavBar_HelpAdvertise" class="fly" href="http://developermedia.com/">Advertise with us</a></li>
		<li><a id="ctl00_TopNavBar_HelpAboutAds" class="fly" href="http://www.codeproject.com/info/AboutOurAds.aspx">About our Advertising</a></li>
		<li><a id="ctl00_TopNavBar_HelpJobs" class="fly" href="http://www.codeproject.com/info/Jobs/">Employment Opportunities</a></li>
		<li><a id="ctl00_TopNavBar_HelpAboutUs" class="fly" href="http://www.codeproject.com/info/about.aspx">About Us</a></li>
		<li class="last"></li>
	</ul>

</li>

</ul>

</div>
    </div>
	<div class="sub-headerbar-divider"></div>
	</div>		
	

	<div id="A" class="container-content-wrap fixed"> 

	<div itemscope="" itemtype="http://schema.org/Article" class="container-content"> 


		<div class="clearfix">
			<div class="container-breadcrumb float-left ">
				<div><a href="http://www.codeproject.com/script/Content/SiteMap.aspx">Articles</a> » <a href="http://www.codeproject.com/Chapters/7/General-Reading.aspx">General Reading</a> » <a href="http://www.codeproject.com/KB/books/"><span itemprop="articleSection">Book Chapters</span></a> » <a href="http://www.codeproject.com/KB/books/#Prentice+Hall">Prentice Hall</a></div>
			</div>

			<div class="float-left">
				
			</div>

			<div class="edit-links float-right">
				


 
&nbsp;










			</div>

			<div class="article-nav float-right">
					
		        
		        
					

                
				

<a id="ctl00_ActionLinks_BookmarkMd_ImgBt" title="Bookmark" alternatetext="Bookmark" name="bm_34125_2" onclick="return bookmarkMe(34125,2,'/script/Bookmarks/Ajax/Add.aspx?obid=34125&amp;obtid=2&amp;action=AddBookmark&amp;bio=true&amp;bis=medium','medium');" href="http://www.codeproject.com/script/Bookmarks/Add.aspx?obid=34125&amp;obtid=2&amp;action=AddBookmark&amp;bio=true&amp;bis=medium" style="display:inline-block;height:24px;width:24px;"><img title="Bookmark" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/bookmark24.png" alt="" style="border-width:0px;"></a>


<span id="ctl00_ActionLinks_BookmarkMd_StatusMsg" class="tiny-text" style="display:none" name="bm_34125_2"></span>
<a id="ctl00_ActionLinks_PrintMd" href="http://www.codeproject.com/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis?display=Print">
	<img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/print24.png" title="Print" style="border:0" width="24px" height="24px">
</a>
			</div>
		</div>

		<table class="extended container-article-parts" cellspacing="0" cellpadding="0">
        <tbody><tr valign="top">
		<td class="article-wing-left" width="117px">

			<div id="ctl00_Nav" class="container-article-tabs stuck" style="position: fixed; top: 10px; left: 0px;">
    			

<div class="tabs">
	<div class="selected">Article</div><div class="unselected"><a href="http://www.codeproject.com/script/Articles/ViewDownloads.aspx?aid=34125">Browse Code</a></div><div class="unselected"><a href="http://www.codeproject.com/script/Articles/Statistics.aspx?aid=34125">Stats</a></div><div class="unselected"><a href="http://www.codeproject.com/script/Articles/ListVersions.aspx?aid=34125">Revisions (8)</a></div><div class="unselected"><a href="http://www.codeproject.com/script/Articles/ListAlternatives.aspx?aid=34125">Alternatives</a></div>

	<div class="unselected"><a href="http://www.codeproject.com/Articles/34125/WebControls/#_comments" id="ctl00_ArticleTabs_CommentLink" class="anchorLink">Comments 
        <span id="ctl00_ArticleTabs_CmtCnt">(1)</span></a>
	</div>
</div>	


				<a id="ctl00_AddAlternative" title="Write a related article about upgrades or translate this into a different language." class="add-item" href="http://www.codeproject.com/script/Articles/SubmissionWizard.aspx?at=1&amp;apid=34125">Add your own<br>alternative version</a>

			    <div class="tags"> 
                    <h4>Tagged as</h4>
                    
                    <div class="tags">
<span class="t"><a href="http://www.codeproject.com/search.aspx?sbo=kw&amp;aidlst=81">C#</a></span></div>
			    </div>
                

                <div class="stats">
                <h4>Stats</h4>
                <div id="ctl00_ArtStats"><div class="stats"><div>147.5K views</div><div>25 bookmarked</div></div></div>
                </div>

                <div class="subdue padded-top" title="Date First posted">Posted 
                    <span itemprop="datePublished" content="2009-03-13">13 Mar 2009</span></div>

                
			</div>

		</td>
		<td>
			
			<div id="AT" class="container-article  fixed"> 

				<div class="article">

					<form name="aspnetForm" method="post" action="/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis" id="aspnetForm" style="margin:0;padding:0">
<div>
<input name="__VIEWSTATE" id="__VIEWSTATE" value="EVFCvmePFVDgSPZ2P4t2PxvKQ9g7bszUolzEvDimPT385OEmjQsxBAv3beFD2KoLx7ehbVyFMhmk2y1y3KtDhu1ywpY2SJVeTGUstPMu+jnQ8+txUotNX7OF/SDVFUNxC5HFd1nU5w97J5bsBOVJab3KJeC+GgUjXOOEsn/BUTXjb3j5G26nAKRlnxXUTBFTyG0IdPz/SND2acKQVj3aYNbwnCfZc6TwvdSTx5FPYCB4UyB0NLuQ2WiBdsPH/S91d7y7LOsIZiUDsNzZmBVcaor00YXIrqohtx3hwHrv43pjMauphRiCiy1aiGyMrEWavYqfKfXVYATwiKrnUchIdAPKjyi5Og0+XglqyC1m1FdAelxUFpZ09HRDHrG6nwwsUfQXEfmM97VVcffLoqSzcGf02XnzFc1bcH7Gp92xYLSKL3ap1WJqgbbZhdRF2Gkfzx1SSE0uExURGBUfyn7L4iPYCRUVcL2AFf/JgjHm04YMX1j3g5AiaEc/nMrS6ltb/v8VWdzKP5vUgRih8zjQvO5lwihHJl1672RQWfEk0pGV0La4XBBxMA5vK6DINkLkiuM8PmH/EBkUWK0yCI3G+kVPTVoJeLAze5KtYrUpVUvIyN1BaHNgD6p2ibT+ALmGpycxgcTYgqtjhmfti/NS+E6pctj0wDLX1jEqg23D9c5u0MSoquY5WBmcdtfBr24/2ugJtcKAcim8T4CeLwX++14EQYPKL5InEh6MwGB8e31OjMiSvOH8clIKqqGnzVIBSBrWB5dRh98xvrdg5JZE4SHyxlqu0aLBUDZhh665n1kxZcTQY0pP/RvGKOL8Y+L/Pg3CyUC5AzRePW4NakFn+q6OVmqmhhSf+DfTzYjbEK4uXoJKts9pzkI65JKJ/GvjjHXoyAQ3SYp73dz3CYM3k0J3lJEEw/oBWFVfFj827WHa2E3nPTfatY9e4wsxODBHaTmeY8o5C7VIeVQhwfJzoD6QGHSgyEN1Tmjt/NX0h1iyhO/AzbLGvjRwNLtJxtwjeH4n1rJmMFcfTEq3n/g7aHF9kDHsOlGKojLrNQfEN8XC7bUWBFaI1H3YaCnMwecv43zRyavSpMNJGXxwu8izUq2IhPXo6+8i1IPjygq4WdjuInaZtjcI1RbGlPJHHonhPB9PiN0BZ8EO2ek8v3GfMb1hANDREdnq7wlPwZV8huev6Jsgx+xaGyY8fi7ubDkH0VuOcIBNuGx28xIpUOFM+GyudX3NgG6mlwgVxBq36AvNbonvPFL6b5W5RGwL7QMRK/i5K1NH4iGKwSSNKJfCV2SEQl6NepTNg1uA3ujqlLLUp+odrt/bMwFrdHyilowbcbur6IOaNUTalGUuOdD/ZsRTXlFIIPakuw3AXsgzwH24An6K/vXwYlhexTB+7S6YIBynl0Y7MZdqIgL5Ukvr79crMizYjV90F++gVnj6EhWwn0DgSYrppl/UoaZG1Yvx/rywRGOfsmlAYyZRUIzemk+eiAxwa0hH1h1TqCn0VJYe8KL7Aq+ZK5FjHS9Yhoo7TZpMmk7P5hj/B89CcCLKwP+dQmsdtLj72hqW4h8rUMG8Y8RNoLz5V/MfcxVgaPyY/VoJU3BuZZ02K0B0pOwUZXeV4xdnBYRA1Qv36e53/np9qJPIvehdmPORdKjlfFmNVCkfOdUL2aUhDChODsymz2HJuPziXqDcqP7X1PFcED3BUcobiwS9TgWRXPx4r08xC33cbFe9vQ3bmIC1uxczaJcAIJOCPUXV5qzCZBa5qMJSc8lrt6X9OljAD8gyE8zhq1coJ1s+RkzbnZN+JuTzvymIwDTWfNK+JmAHwuzZfs8WFDnipVahtyKKtTkYP7Wag1q7CptI9DqLfRNF9oM/CpJpAqtXafGuSbHCBaFp/7Vxc3U8eHG6W7LEQ1Rry6+W/mjUVCAbB74/luVALMN+Sk+Fb0uM6dweltR6lwD+sglTt05brk6bT3rNlBNHC8AscAeZth0RMyAlRouzS3LRknlm9LGUwRmO1bRpRP8oCuoDaF8IWbiP8Rz66bOgLlCoTQUnBx+l4Qf3OcTMMSdHi3kebx/UuSIEUy2X/ndebC+P56DG5N/bsYWBsQ/tU7DL3kOBRJaNA0tNYDowdbLanmVCADQikyRHEmT359XxxIwU88z4BI85XJofBRUx5/aII78L3EVu3bAE+S1R2/elw/YRJz42FAG79tnWmBiUzREGvaepES3NeDCdbVmUVfn/oX3Jwn2OHiIzmju/Uu/DxUc7YFRfYBw69lYDdvt5Uji8XbgqHyFG/hyjPcQC3VYR5tdJ6FA0qDUH1izKlBGhCfIc6NlCs5TQT7Atk4SAzRP8udA4HJWn902u+y2DWDnuctkCG6WpF1+96x+7sje0DlCeK48LgL8mGI6k3bkDC59k2DWIhPyykiiSdPpWj21hzhVQUIPVxU/CeTgOU6TDq2iO8R/JbZMKaoXN9TGQgHA7l5BThTXNjGrsdTAUIpQGDWgUhfeDPwDZvRv+pYofMlJj6iyrtKFPpvDwjYO+5+QLHSjX2ILM5xqJ0kZR5MHdEUGiQA==" type="hidden">
</div>

<div>

	<input name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="10C1FD69" type="hidden">
</div>

					
					 
					<div class="header">
					    <a name="Main"></a>

					    
					    <a name="_articleTop" id="_articleTop"></a>
					    <div class="title">
					        
					        <h1 id="ctl00_ArticleTitle" itemprop="name">Chapter 10: Object-Oriented Programming: Polymorphism</h1> 
					    </div>

                        <div style="height:34px">
					        
					        <div class="entry float-left">
                                
                                <div class="float-left">

						            <span class="author"><a href="http://www.codeproject.com/script/Membership/View.aspx?mid=6024972" rel="author"><span itemprop="author" itemscope="" itemtype="http://schema.org/Person"><span itemprop="name">Prentice_Hall</span></span></a></span>, 
						            <span class="date" itemprop="dateModified" title="Date last updated" content="2009-03-13 16:33:00">
							            13 Mar 2009</span>
			
                                    <a id="ctl00_LicenseLink" title="The Code Project Open License (CPOL)" class="license" href="http://www.codeproject.com/info/cpol10.aspx">CPOL</a><div id="ctl00_CurRat" class="tooltip anchorLink" style="cursor:pointer;margin-top: 5px" name="CurRat_34125">
				
							            

<table class="small-text" itemprop="aggregateRating" itemscope="" itemtype="http://schema.org/AggregateRating" cellspacing="0" cellpadding="0"> 
<tbody><tr>
	
	<td class="nowrap">

		
			<meta itemprop="bestRating" content="5"> 
			<meta itemprop="worstRating" content="1">
		

		<span id="ctl00_ArticleRating_VI">
		<div class="nowrap rating-stars-medium" style="height:18px;width:80px;position:relative;">
	<div class="clipped align-left float-left" style="height:16px;width:80px;">
		<img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/stars-fill-md.png" style="border-width:0px;">
	</div><div class="clipped" style="height:16px;width:0px;position:relative;">
		<img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/stars-empty-md.png" style="border-width:0px;position:absolute;top:0;right:0;">
	</div>
</div>
		</span>

		
	</td>
	
	<td id="ctl00_ArticleRating_VR" class="nowrap">
		&nbsp;
		<span id="ctl00_ArticleRating_VotesR">&nbsp;<span itemprop="ratingValue" class="rating">5.00</span> (<span itemprop="ratingCount" class="count">1</span> vote)</span>
		
	</td>

</tr>

</tbody></table>


							            <div id="ctl00_RB" class="speech-bubble-container-up">
								            <div class="speech-bubble-up" style="width:150px !important">
									                        
<div>
<table class="feature" title="Voting Distribution. Recent data only" width="100%" cellspacing="0" cellpadding="0" height="50px"><tbody><tr class="chart-row"><td class="chart-column"><span title="0 votes">1</span></td>
<td class="chart-column"><span title="0 votes">2</span></td>
<td class="chart-column"><span title="0 votes">3</span></td>
<td class="chart-column"><span title="0 votes">4</span></td>
<td class="chart-column"><div><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/pollcol.gif" alt="1 vote, 100.0%" title="1 vote, 100.0%" width="20pxpx" border="0px" height="50px"></div><span title="1 vote">5</span></td>
</tr></tbody></table><div class="small-text align-center">5.00/5 - 1 vote</div><div class="small-text align-center subdue">μ 5.00, σ<sub>a</sub> 5.00 [<a href="http://www.codeproject.com/KB/FAQs/RatingReputationFAQ.aspx#noisefilter">?</a>]</div>
</div>
								            </div>
								            <div class="speech-bubble-pointer-up">
									            <div class="speech-bubble-pointer-up-inner"></div>
								            </div>
							            </div>
						            </div>
                                </div>
					        </div>

                            
						    <div id="ctl00_RateArticleRow" class="float-right align-right voting-bar">
						        <div id="ctl00_RateArticle_RateItemWrapper" class="small-text" name="RateItem_34125">

	<table class="small-text" width="100%" cellspacing="0" cellpadding="0">
	<tbody><tr>
		<td id="ctl00_RateArticle_VoteResultDiv" class="rating-result align-right">
			<span class="align-right"></span>
			<img class="loaderImg" alt="loading..." src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/animated_loading_blue.gif" style="display:none;" width="16px" height="16px"> 
		</td>

	
		<td class="voteTbl" style="white-space:nowrap" align="right">
			<table class="small-text">
			<tbody><tr>
				<td id="ctl00_RateArticle_RateText" class="rating-prompt">
					Rate this:
				</td>

				
				<td id="ctl00_RateArticle_VoteFormDiv" class="nowrap rating-stars-voter-large">
					

					<span id="ctl00_RateArticle_RB" class="tooltip ajaxHist radio voting">
						<span id="ctl00_RateArticle_VoteRBL"><input id="ctl00_RateArticle_VoteRBL_0" name="ctl00$RateArticle$VoteRBL" value="1" style="display: none;" type="radio"><input id="ctl00_RateArticle_VoteRBL_1" name="ctl00$RateArticle$VoteRBL" value="2" style="display: none;" type="radio"><input id="ctl00_RateArticle_VoteRBL_2" name="ctl00$RateArticle$VoteRBL" value="3" style="display: none;" type="radio"><input id="ctl00_RateArticle_VoteRBL_3" name="ctl00$RateArticle$VoteRBL" value="4" style="display: none;" type="radio"><input id="ctl00_RateArticle_VoteRBL_4" name="ctl00$RateArticle$VoteRBL" value="5" style="display: none;" type="radio"></span> 

						
					<div class="rating-star-block"><a href="#" rating="1" class="star outline" title="vote 1">vote 1</a><a href="#" rating="2" class="star outline" title="vote 2">vote 2</a><a href="#" rating="3" class="star outline" title="vote 3">vote 3</a><a href="#" rating="4" class="star outline" title="vote 4">vote 4</a><a href="#" rating="5" class="star outline" title="vote 5">vote 5</a></div></span>

				</td>

				
				<td style="padding-left:5px">	
					<input name="ctl00$RateArticle$SubmitRateBtn" value="Vote!" id="ctl00_RateArticle_SubmitRateBtn" class="button" style="display: none;" type="submit">
				</td>
			</tr>
			</tbody></table>
			
		</td>
	</tr>
	</tbody></table>
	<div class="hover-container">
		
        <div id="ctl00_RateArticle_RSU" class="rating-comment align-left float-right">
            <div class="padded">
            Please <a id="ctl00_RateArticle_SignUp" href="https://www.codeproject.com/script/Membership/LogOn.aspx?rp=%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis">Sign up or sign in</a> to vote.
            </div>
        </div>
	</div>
</div>
						    </div>
						    	
                        </div>

   					    
                        <div id="ctl00_description" class="summary" itemprop="headline">A study of object-oriented programming by explaining and demonstrating polymorphism with inheritance hierarchies. </div><span id="ctl00_thumbnailUrl" class="date" itemprop="image" content="http://www.codeproject.com/KB/books/OOP_Polymorphism/Thumb-34125.jpg"></span>			

                    </div>
                    
					
					

					

					
					
					

						
					

					

						
						<div id="contentdiv" class="text" itemprop="articleBody">
						



<table class="TableNoBorder" width="550">
<tbody>
<tr>
<td><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/ShowCover.jpg" alt="ShowCover.asp.jpg" width="125" height="163"></td>

<td>By Paul J. Deitel and Harvey M. Deitel<br>Published by Prentice Hall <br>ISBN-10: 0-13-700129-0 <br>ISBN-13: 978-0-13-700129-3 </td>
</tr>
</tbody>
</table>

<p><em>This chapter is an excerpt from the book, Java for Programmers, 
authored by Paul and Harvey Deitel, part of the Deitel Developer Series,
 ISBN 0137001290, published in Feb 2009 by Prentice Hall Professional, 
Copyright 2009 Pearson Education, Inc. For more info, please visit: <a href="http://www.informit.com/store/product.aspx?isbn=0137001290">http://www.informit.com/store/product.aspx?isbn=0137001290</a> Safari Books Online subscribers can access the book here: <a href="http://my.safaribooksonline.com/9780137018529">http://my.safaribooksonline.com/9780137018529</a></em> </p>

<h2>Objectives </h2>

<p>In this chapter you'll learn: </p>

<ul>
<li>The concept of polymorphism. </li>

<li>To use overridden methods to effect polymorphism. </li>

<li>To distinguish between abstract and concrete classes. </li>

<li>To declare abstract methods to create abstract classes. </li>

<li>How polymorphism makes systems extensible and maintainable. </li>

<li>To determine an object's type at execution time. </li>

<li>To declare and implement interfaces. </li>
</ul>

<p>One Ring to rule them all, One Ring to find them, One Ring to bring them all and in the darkness bind </p>

<p align="right">—<strong>John Ronald Reuel Tolkien</strong> </p>

<p>General propositions do not decide concrete cases. </p>

<p align="right">—<strong>Oliver Wendell Holmes</strong> </p>

<p>A philosopher of imposing stature doesn't think in a vacuum. Even his
 most abstract ideas are, to some extent, conditioned by what is or is 
not known in the time when he lives. </p>

<p align="right">—<strong>Alfred North Whitehead</strong> </p>

<p>Why art thou cast down, O my soul? </p>

<p align="right">—<strong>Psalms 42:5</strong> </p>

<h2>Outline</h2>

<ul>
<li>10.1 Introduction </li>

<li>10.2 Polymorphism Examples </li>

<li>10.3 Demonstrating Polymorphic Behavior </li>

<li>10.4 Abstract Classes and Methods </li>

<li>10.5 Case Study: Payroll System Using Polymorphism 
<ul>
<li>10.5.1 Creating Abstract Superclass Employee </li>

<li>10.5.2 Creating Concrete Subclass SalariedEmployee </li>

<li>10.5.3 Creating Concrete Subclass HourlyEmployee </li>

<li>10.5.4 Creating Concrete Subclass CommissionEmployee </li>

<li>10.5.5 Creating Indirect Concrete Subclass BasePlusCommissionEmployee </li>

<li>10.5.6 Demonstrating Polymorphic Processing, Operator instanceof and Downcasting </li>

<li>10.5.7 Summary of the Allowed Assignments Between Superclass and Subclass Variables </li>
</ul>
</li>

<li>10.6 final Methods and Classes </li>

<li>10.7 Case Study: Creating and Using Interfaces 
<ul>
<li>10.7.1 Developing a Payable Hierarchy </li>

<li>10.7.2 Declaring Interface Payable </li>

<li>10.7.3 Creating Class Invoice </li>

<li>10.7.4 Modifying Class Employee to Implement Interface Payable </li>

<li>10.7.5 Modifying Class SalariedEmployee for Use in the Payable Hierarchy </li>

<li>10.7.6 Using Interface Payable to Process Invoices and Employees Polymorphically </li>

<li>10.7.7 Declaring Constants with Interfaces </li>

<li>10.7.8 Common Interfaces of the Java API </li>
</ul>
</li>

<li>10.8 (Optional) Software Engineering Case Study: Incorporating Inheritance into the ATM System </li>

<li>10.9 Wrap-Up </li>
</ul>

<h2>10.1 Introduction</h2>

<p>We now continue our study of object-oriented programming by explaining and demonstrating <em>polymorphism</em>
 with inheritance hierarchies. Polymorphism enables us to "program in 
the general" rather than "program in the specific." In particular, 
polymorphism enables us to write programs that process objects that 
share the same superclass in a class hierarchy as if they are all 
objects of the superclass; this can simplify programming.</p>

<p>Consider the following example of polymorphism. Suppose we create a 
program that simulates the movement of several types of animals for a 
biological study. Classes Fish, Frog and Bird represent the three types 
of animals under investigation. Imagine that each of these classes 
extends superclass Animal, which contains a method move and maintains an
 animal's current location as <em>x-y</em> coordinates. Each subclass 
implements method move. Our program maintains an array of references to 
objects of the various Animal subclasses. To simulate the animals' 
movements, the program sends each object the same message once per 
second—namely, move. However, each specific type of Animal responds to a
 move message in a unique way—a Fish might swim three feet, a Frog might
 jump five feet and a Bird might fly ten feet. The program issues the 
same message (i.e., move) to each animal object generically, but each 
object knows how to modify its <em>x-y</em> coordinates appropriately 
for its specific type of movement. Relying on each object to know how to
 "do the right thing" (i.e., do what is appropriate for that type of 
object) in response to the same method call is the key concept of 
polymorphism. The same message (in this case, move) sent to a variety of
 objects has "many forms" of results—hence the term polymorphism.</p>

<p>With polymorphism, we can design and implement systems that are 
easily extensible—new classes can be added with little or no 
modification to the general portions of the program, as long as the new 
classes are part of the inheritance hierarchy that the program processes
 generically. The only parts of a program that must be altered to 
accommodate new classes are those that require direct knowledge of the 
new classes that the programmer adds to the hierarchy. For example, if 
we extend class Animal to create class Tortoise (which might respond to a
 move message by crawling one inch), we need to write only the Tortoise 
class and the part of the simulation that instantiates a Tortoise 
object. The portions of the simulation that process each Animal 
generically can remain the same.</p>

<p>This chapter has several parts. First, we discuss common examples of 
polymorphism. We then provide an example demonstrating polymorphic 
behavior. We'll use superclass references to manipulate both superclass 
objects and subclass objects polymorphically.</p>

<p>We then present a case study that revisits the employee hierarchy of 
Section 9.4.5. We develop a simple payroll application that 
polymorphically calculates the weekly pay of several different types of 
employees using each employee's earnings method. Though the earnings of 
each type of employee are calculated in a specific way, polymorphism 
allows us to process the employees "in the general." In the case study, 
we enlarge the hierarchy to include two new classes—SalariedEmployee 
(for people paid a fixed weekly salary) and HourlyEmployee (for people 
paid an hourly salary and so-called time-and-a-half for overtime). We 
declare a common set of functionality for all the classes in the updated
 hierarchy in a so-called abstract class, Employee, from which classes 
SalariedEmployee, HourlyEmployee and CommissionEmployee inherit directly
 and class BasePlusCommissionEmployee4 inherits indirectly. As you'll 
soon see, when we invoke each employee's earnings method off a 
superclass Employee reference, the correct earnings calculation is 
performed due to Java's polymorphic capabilities. </p>

<p>Occasionally, when performing polymorphic processing, we need to 
program "in the specific." Our Employee case study demonstrates that a 
program can determine the type of an object at execution time and act on
 that object accordingly. In the case study, we use these capabilities 
to determine whether a particular employee object <em>is a</em> BasePlusCommissionEmployee. If so, we increase that employee's base salary by 10%.</p>

<p>Next, the chapter introduces interfaces. An interface describes 
methods that can be called on an object, but does not provide concrete 
method implementations. You can declare classes that <em>implement</em> 
(i.e., provide concrete implementations for the methods of) one or more 
interfaces. Each interface method must be declared in all the classes 
that implement the interface. Once a class implements an interface, all 
objects of that class have an <em>is-a</em> relationship with the 
interface type, and all objects of the class are guaranteed to provide 
the functionality described by the interface. This is true of all 
subclasses of that class as well.</p>

<p>Interfaces are particularly useful for assigning common functionality
 to possibly unrelated classes. This allows objects of unrelated classes
 to be processed polymorphically—objects of classes that implement the 
same interface can respond to the same method calls. To demonstrate 
creating and using interfaces, we modify our payroll application to 
create a general accounts payable application that can calculate 
payments due for company employees and invoice amounts to be billed for 
purchased goods. As you'll see, interfaces enable polymorphic 
capabilities similar to those possible with inheritance.</p>

<h2>10.2 Polymorphism Examples</h2>

<p>Let's consider several other examples of polymorphism. If class 
Rectangle is derived from class Quadrilateral, then a Rectangle object 
is a more specific version of a Quadrilateral object. Any operation 
(e.g., calculating the perimeter or the area) that can be performed on a
 Quadrilateral object can also be performed on a Rectangle object. These
 operations can also be performed on other Quadrilaterals, such as 
Squares, Parallelograms and Trapezoids. The polymorphism occurs when a 
program invokes a method through a superclass variable—at execution 
time, the correct subclass version of the method is called, based on the
 type of the reference stored in the superclass variable. You'll see a 
simple code example that illustrates this process in Section 10.3.</p>

<p>As another example, suppose we design a video game that manipulates 
objects of classes Martian, Venusian, Plutonian, SpaceShip and 
LaserBeam. Imagine that each class inherits from the common superclass 
called SpaceObject, which contains method draw. Each subclass implements
 this method. A screen-manager program maintains a collection (e.g., a 
SpaceObject array) of references to objects of the various classes. To 
refresh the screen, the screen manager periodically sends each object 
the same message—namely, draw. However, each object responds in a unique
 way. For example, a Martian object might draw itself in red with green 
eyes and the appropriate number of antennae. A SpaceShip object might 
draw itself as a bright silver flying saucer. A LaserBeam object might 
draw itself as a bright red beam across the screen. Again, the same 
message (in this case, draw) sent to a variety of objects has "many 
forms" of results.</p>

<p>A screen manager might use polymorphism to facilitate adding new 
classes to a system with minimal modifications to the system's code. 
Suppose that we want to add Mercurian objects to our video game. To do 
so, we must build a class Mercurian that extends SpaceObject and 
provides its own draw method implementation. When objects of class 
Mercurian appear in the SpaceObject collection, the screen manager code 
invokes method draw, exactly as it does for every other object in the 
collection, regardless of its type. So the new Mercurian objects simply 
"plug right in" without any modification of the screen manager code. 
Thus, without modifying the system (other than to build new classes and 
modify the code that creates new objects), programmers can use 
polymorphism to conveniently include additional types that were not 
envisioned when the system was created.</p>

<p>With polymorphism, the same method name and signature can be used to 
cause different actions to occur, depending on the type of object on 
which the method is invoked. This gives the programmer tremendous 
expressive capability.</p>

<h3>Software Engineering Observation 10.1</h3>

<p>Polymorphism enables programmers to deal in generalities and let the 
execution-time environment handle the specifics. Programmers can command
 objects to behave in manners appropriate to those objects, without 
knowing the types of the objects (as long as the objects belong to the 
same inheritance hierarchy). </p>

<h3>Software Engineering Observation 10.2</h3>

<p>Polymorphism promotes extensibility: Software that invokes 
polymorphic behavior is independent of the object types to which 
messages are sent. New object types that can respond to existing method 
calls can be incorporated into a system without requiring modification 
of the base system. Only client code that instantiates new objects must 
be modified to accommodate new types.</p>

<h2>10.3 Demonstrating Polymorphic Behavior</h2>

<p>Section 9.4 created a commission employee class hierarchy, in which 
class BasePlusCommissionEmployee inherited from class 
CommissionEmployee. The examples in that section manipulated 
CommissionEmployee and BasePlusCommissionEmployee objects by using 
references to them to invoke their methods—we aimed superclass 
references at superclass objects and subclass references at subclass 
objects. These assignments are natural and straightforward—superclass 
references are intended to refer to superclass objects, and subclass 
references are intended to refer to subclass objects. However, as you'll
 soon see, other assignments are possible.</p>

<p>In the next example, we aim a superclass reference at a subclass 
object. We then show how invoking a method on a subclass object via a 
superclass reference invokes the subclass functionality—the type of the <em>actual referenced object</em>, not the type of the <em>reference</em>,
 determines which method is called. This example demonstrates the key 
concept that an object of a subclass can be treated as an object of its 
superclass. This enables various interesting manipulations. A program 
can create an array of superclass references that refer to objects of 
many subclass types. This is allowed because each subclass object is an 
object of its superclass. For instance, we can assign the reference of a
 BasePlusCommissionEmployee object to a superclass CommissionEmployee 
variable because a BasePlusCommissionEmployee <em>is a</em> CommissionEmployee—we can treat a BasePlusCommissionEmployee as a CommissionEmployee. </p>

<p>As you'll learn later in the chapter, we cannot treat a superclass 
object as a subclass object because a superclass object is not an object
 of any of its subclasses. For example, we cannot assign the reference 
of a CommissionEmployee object to a subclass BasePlusCommissionEmployee 
variable because a CommissionEmployee is not a 
BasePlusCommissionEmployee—a CommissionEmployee does not have a 
baseSalary instance variable and does not have methods setBaseSalary and
 getBaseSalary. The <em>is-a</em> relationship applies only from a subclass to its direct (and indirect) superclasses, and not vice versa.</p>

<p>The Java compiler does allow the assignment of a superclass reference
 to a subclass variable if we explicitly cast the superclass reference 
to the subclass type—a technique we discuss in detail in Section 10.5. 
Why would we ever want to perform such an assignment? A superclass 
reference can be used to invoke only the methods declared in the 
superclass—attempting to invoke subclass-only methods through a 
superclass reference results in compilation errors. If a program needs 
to perform a subclass-specific operation on a subclass object referenced
 by a superclass variable, the program must first cast the superclass 
reference to a subclass reference through a technique known as <em>downcasting</em>.
 This enables the program to invoke subclass methods that are not in the
 superclass. We show a concrete example of downcasting in Section 10.5.</p>

<p>The example in Figure 10.1 demonstrates three ways to use superclass 
and subclass variables to store references to superclass and subclass 
objects. The first two are straightforward—as in Section 9.4, we assign a
 superclass reference to a superclass variable, and we assign a subclass
 reference to a subclass variable. Then we demonstrate the relationship 
between subclasses and superclasses (i.e., the <em>is-a</em> relationship) by assigning a subclass reference to a superclass variable. [<em>Note:</em> This program uses classes CommissionEmployee3 and BasePlusCommissionEmployee4 from Figure 9.12 and Figure 9.13, respectively.]</p>

<p>In Figure 10.1, lines 10-11 create a CommissionEmployee3 object and 
assign its reference to a CommissionEmployee3 variable. Lines 14-16 
create a BasePlusCommissionEmployee4 object and assign its reference to a
 BasePlusCommissionEmployee4 variable. These assignments are natural—for
 example, a CommissionEmployee3 variable's primary purpose is to hold a 
reference to a CommissionEmployee3 object. Lines 19-21 use reference 
commissionEmployee to invoke toString explicitly. Because 
commissionEmployee refers to a CommissionEmployee3 object, superclass 
CommissionEmployee3's version of toString is called. Similarly, lines 
24-27 use basePlusCommissionEmployee to invoke toString explicitly on 
the BasePlusCommissionEmployee4 object. This invokes subclass 
BasePlusCommissionEmployee4's version of toString. </p>

<div class="pre-action-link" id="premain308514" style="width:100%;display:block;"><span id="prehide308514" onclick="processCodeBlocks.togglePre(308514);">Hide</span>  &nbsp; <span id="preShrink308514" onclick="processCodeBlocks.shrinkExpand(308514);">Shrink</span> <img id="preimg308514" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(308514);">  &nbsp; <span id="copycode308514" onclick="return processCodeBlocks.copyCode(308514);">Copy Code</span></div><pre id="pre308514" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>	<em><span class="code-comment">//</span><span class="code-comment"> Figure 10.1: PolymorphismTest.java</span></em>
	 <span class="code-digit">2</span>	<em><span class="code-comment">//</span><span class="code-comment"> Assigning superclass and subclass references to superclass and</span></em>

	 <span class="code-digit">3</span>	<em><span class="code-comment">//</span><span class="code-comment"> subclass variables.</span></em>
	 <span class="code-digit">4</span>	
	 <span class="code-digit">5</span>	<em><span class="code-keyword">public</span> <span class="code-keyword">class</span></em> PolymorphismTest  
	 <span class="code-digit">6</span>	{
	 <span class="code-digit">7</span>	   <em><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span class="code-keyword">void</span></em> main( <span class="code-sdkkeyword">String</span> args[] ) 
	 <span class="code-digit">8</span>	   {
	 <span class="code-digit">9</span>	      <em><span class="code-comment">//</span><span class="code-comment"> assign superclass reference to superclass variable</span></em>
	<span class="code-digit">10</span>	      CommissionEmployee3 commissionEmployee = <em><span class="code-keyword">new</span></em> CommissionEmployee3(
	<span class="code-digit">11</span>	         <span class="code-string">"</span><span class="code-string">Sue"</span>, <span class="code-string">"</span><span class="code-string">Jones"</span>, <span class="code-string">"</span><span class="code-string">222-22-2222"</span>, <span class="code-digit">10000</span>, .<span class="code-digit">06</span> );
	<span class="code-digit">12</span>	
	<span class="code-digit">13</span>	      <em><span class="code-comment">//</span><span class="code-comment"> assign subclass reference to subclass variable</span></em>

	<span class="code-digit">14</span>	      BasePlusCommissionEmployee4 basePlusCommissionEmployee =
	<span class="code-digit">15</span>	         <em><span class="code-keyword">new</span></em> BasePlusCommissionEmployee4(
	<span class="code-digit">16</span>	         <span class="code-string">"</span><span class="code-string">Bob"</span>, <span class="code-string">"</span><span class="code-string">Lewis"</span>, <span class="code-string">"</span><span class="code-string">333-33-3333"</span>, <span class="code-digit">5000</span>, .<span class="code-digit">04</span>, <span class="code-digit">300</span> );
	<span class="code-digit">17</span>	
	<span class="code-digit">18</span>	      <em><span class="code-comment">//</span><span class="code-comment"> invoke toString on superclass object using superclass variable</span></em>
	<span class="code-digit">19</span>	      System.<span class="code-keyword">out</span>.printf( <span class="code-string">"</span><span class="code-string">%s %s:\n\n%s\n\n"</span>, 
	<span class="code-digit">20</span>	      <span class="code-string">"</span><span class="code-string">Call CommissionEmployee3's toString with superclass reference "</span>,
	<span class="code-digit">21</span>	      <span class="code-string">"</span><span class="code-string">to superclass object"</span>, commissionEmployee.toString() );
	<span class="code-digit">22</span>	
	<span class="code-digit">23</span>	      <em><span class="code-comment">//</span><span class="code-comment"> invoke toString on subclass object using subclass variable</span></em>   
	<span class="code-digit">24</span>	      System.<span class="code-keyword">out</span>.printf( <span class="code-string">"</span><span class="code-string">%s %s:\n\n%s\n\n"</span>, 
	<span class="code-digit">25</span>	         <span class="code-string">"</span><span class="code-string">Call BasePlusCommissionEmployee4's toString with subclass"</span>,
	<span class="code-digit">26</span>	         <span class="code-string">"</span><span class="code-string">reference to subclass object"</span>, 
	<span class="code-digit">27</span>	         basePlusCommissionEmployee.toString() );
	<span class="code-digit">28</span>	
	<span class="code-digit">29</span>	      <em><span class="code-comment">//</span><span class="code-comment"> invoke toString on subclass object using superclass variable</span></em>
	<span class="code-digit">30</span>	      CommissionEmployee3 commissionEmployee2 =
	<span class="code-digit">31</span>	         basePlusCommissionEmployee;
	<span class="code-digit">32</span>	      System.<span class="code-keyword">out</span>.printf( <span class="code-string">"</span><span class="code-string">%s %s:\n\n%s\n"</span>, 
	<span class="code-digit">33</span>	         <span class="code-string">"</span><span class="code-string">Call BasePlusCommissionEmployee4's toString with superclass"</span>,
	<span class="code-digit">34</span>	         <span class="code-string">"</span><span class="code-string">reference to subclass object"</span>,
                           commissionEmployee2.toString() );
	<span class="code-digit">35</span>	   } <em><span class="code-comment">//</span><span class="code-comment"> end main</span></em>

	<span class="code-digit">36</span>	} <em><span class="code-comment">//</span><span class="code-comment"> end class PolymorphismTest</span></em>
</pre>

<h4>OUTPUT</h4>

<div class="pre-action-link" id="premain720773" style="width:100%;display:block;"><span id="prehide720773" onclick="processCodeBlocks.togglePre(720773);">Hide</span>  &nbsp; <span id="copycode720773" onclick="return processCodeBlocks.copyCode(720773);">Copy Code</span></div><pre id="pre720773" style="margin-top: 0px;" class="notranslate">Call CommissionEmployee3<span class="code-string">'</span><span class="code-string">s toString with superclass reference to superclass object:

commission employee: Sue Jones
social security number: 222-22-2222
gross sales: 10000.00
commission rate: 0.06

Call BasePlusCommissionEmployee4'</span>s toString with subclass reference to 
subclass <span class="code-keyword">object</span>:

base-salaried commission employee: Bob Lewis
social security number: 333-33-3333
gross sales: <span class="code-digit">5000</span>.<span class="code-digit">00</span>
commission rate: <span class="code-digit">0</span>.<span class="code-digit">04</span>
<span class="code-keyword">base</span> salary: <span class="code-digit">300</span>.<span class="code-digit">00</span>

Call BasePlusCommissionEmployee4<span class="code-string">'</span><span class="code-string">s toString with superclass reference to 
subclass object:

base-salaried commission employee: Bob Lewis
social security number: 333-33-3333
gross sales: 5000.00
commission rate: 0.04
base salary: 300.00
</span></pre>

<p><strong>Figure 10.1</strong> Assigning superclass and subclass references to superclass and subclass variables. </p>

<p>Lines 30-31 then assign the reference to subclass object 
basePlusCommissionEmployee to a superclass CommissionEmployee3 variable,
 which lines 32-34 use to invoke method toString. When a superclass 
variable contains a reference to a subclass object, and that reference 
is used to call a method, the subclass version of the method is called. 
Hence, commissionEmployee2.toString() in line 34 actually calls class 
BasePlusCommissionEmployee4's toString method. The Java compiler allows 
this "crossover" because an object of a subclass <em>is an</em> object 
of its superclass (but not vice versa). When the compiler encounters a 
method call made through a variable, the compiler determines if the 
method can be called by checking the variable's class type. If that 
class contains the proper method declaration (or inherits one), the call
 is compiled. At execution time, the type of the object to which the 
variable refers determines the actual method to use. </p>

<h2>10.4 Abstract Classes and Methods</h2>

<p>When we think of a class type, we assume that programs will create 
objects of that type. In some cases, however, it is useful to declare 
classes for which the programmer never intends to instantiate objects. 
Such classes are called <em>abstract classes</em>. Because they are used only as superclasses in inheritance hierarchies, we refer to them as <em>abstract superclasses</em>.
 These classes cannot be used to instantiate objects, because, as we'll 
soon see, abstract classes are incomplete. Subclasses must declare the 
"missing pieces." We demonstrate abstract classes in Section 10.5.</p>

<p>An abstract class's purpose is to provide an appropriate superclass 
from which other classes can inherit and thus share a common design. In 
the Shape hierarchy of Figure 9.3, for example, subclasses inherit the 
notion of what it means to be a Shape—common attributes such as 
location, color and borderThickness, and behaviors such as draw, move, 
resize and changeColor. Classes that can be used to instantiate objects 
are called <em>concrete classes</em>. Such classes provide 
implementations of every method they declare (some of the 
implementations can be inherited). For example, we could derive concrete
 classes Circle, Square and Triangle from abstract superclass 
TwoDimensionalShape. Similarly, we could derive concrete classes Sphere,
 Cube and Tetrahedron from abstract superclass ThreeDimensionalShape. 
Abstract superclasses are too general to create real objects—they 
specify only what is common among subclasses. We need to be more 
specific before we can create objects. For example, if you send the draw
 message to abstract class TwoDimensionalShape, it knows that 
two-dimensional shapes should be drawable, but it does not know what 
specific shape to draw, so it cannot implement a real draw method. 
Concrete classes provide the specifics that make it reasonable to 
instantiate objects.</p>

<p>Not all inheritance hierarchies contain abstract classes. However, 
programmers often write client code that uses only abstract superclass 
types to reduce client code's dependencies on a range of specific 
subclass types. For example, a programmer can write a method with a 
parameter of an abstract superclass type. When called, such a method can
 be passed an object of any concrete class that directly or indirectly 
extends the superclass specified as the parameter's type. </p>

<p>Abstract classes sometimes constitute several levels of the 
hierarchy. For example, the Shape hierarchy of Figure 9.3 begins with 
abstract class Shape. On the next level of the hierarchy are two more 
abstract classes, TwoDimensionalShape and ThreeDimensionalShape. The 
next level of the hierarchy declares concrete classes for 
TwoDimensionalShapes (Circle, Square and Triangle) and for 
ThreeDimensionalShapes (Sphere, Cube and Tetrahedron).</p>

<p>You make a class abstract by declaring it with keyword <strong>abstract</strong>. An abstract class normally contains one or more <em>abstract methods</em>. An abstract method is one with keyword abstract in its declaration, as in</p>

<div class="pre-action-link" id="premain278669" style="width:100%;display:block;"><span id="prehide278669" onclick="processCodeBlocks.togglePre(278669);">Hide</span>  &nbsp; <span id="copycode278669" onclick="return processCodeBlocks.copyCode(278669);">Copy Code</span></div><pre id="pre278669" style="margin-top: 0px;" class="notranslate"><em><span class="code-keyword">public</span> <span class="code-keyword">abstract</span> <span class="code-keyword">void</span></em> draw(); <span class="code-comment">//</span><span class="code-comment"> <em>abstract method</em></span></pre>

<p>Abstract methods do not provide implementations. A class that 
contains any abstract methods must be declared as an abstract class even
 if that class contains some concrete (nonabstract) methods. Each 
concrete subclass of an abstract superclass also must provide concrete 
implementations of each of the superclass's abstract methods. 
Constructors and static methods cannot be declared abstract. 
Constructors are not inherited, so an abstract constructor could never 
be implemented. Though static methods are inherited, they are not 
associated with particular objects of the classes that declare the 
static methods. Since abstract methods are meant to be overridden so 
they can process objects based on their types, it would not make sense 
to declare a static method as abstract.</p>

<h3>Software Engineering Observation 10.3</h3>

<p>An abstract class declares common attributes and behaviors of the 
various classes in a class hierarchy. An abstract class typically 
contains one or more abstract methods that subclasses must override if 
the subclasses are to be concrete. The instance variables and concrete 
methods of an abstract class are subject to the normal rules of 
inheritance.</p>

<h3>Common Programming Error 10.1</h3>

<p>Attempting to instantiate an object of an abstract class is a compilation error.</p>

<h3>Common Programming Error 10.2</h3>

<p>Failure to implement a superclass's abstract methods in a subclass is
 a compilation error unless the subclass is also declared abstract.</p>

<p>Although we cannot instantiate objects of abstract superclasses, 
you'll soon see that we can use abstract superclasses to declare 
variables that can hold references to objects of any concrete class 
derived from those abstract superclasses. Programs typically use such 
variables to manipulate subclass objects polymorphically. We also can 
use abstract superclass names to invoke static methods declared in those
 abstract superclasses. </p>

<p>Consider another application of polymorphism. A drawing program needs
 to display many shapes, including new shape types that the programmer 
will add to the system after writing the drawing program. The drawing 
program might need to display shapes, such as Circles, Triangles, 
Rectangles or others, that derive from abstract superclass Shape. The 
drawing program uses Shape variables to manage the objects that are 
displayed. To draw any object in this inheritance hierarchy, the drawing
 program uses a superclass Shape variable containing a reference to the 
subclass object to invoke the object's draw method. This method is 
declared abstract in superclass Shape, so each concrete subclass <em>must</em>
 implement method draw in a manner specific to that shape. Each object 
in the Shape inheritance hierarchy knows how to draw itself. The drawing
 program does not have to worry about the type of each object or whether
 the drawing program has ever encountered objects of that type. </p>

<p>Polymorphism is particularly effective for implementing so-called 
layered software systems. In operating systems, for example, each type 
of physical device could operate quite differently from the others. Even
 so, commands to read or write data from and to devices may have a 
certain uniformity. For each device, the operating system uses a piece 
of software called a device driver to control all communication between 
the system and the device. The write message sent to a device-driver 
object needs to be interpreted specifically in the context of that 
driver and how it manipulates devices of a specific type. However, the 
write call itself really is no different from the write to any other 
device in the system: Place some number of bytes from memory onto that 
device. An object-oriented operating system might use an abstract 
superclass to provide an "interface" appropriate for all device drivers.
 Then, through inheritance from that abstract superclass, subclasses are
 formed that all behave similarly. The device-driver methods are 
declared as abstract methods in the abstract superclass. The 
implementations of these abstract methods are provided in the subclasses
 that correspond to the specific types of device drivers. New devices 
are always being developed, and often long after the operating system 
has been released. When you buy a new device, it comes with a device 
driver provided by the device vendor. The device is immediately 
operational after you connect it to your computer and install the 
driver. This is another elegant example of how polymorphism makes 
systems extensible.</p>

<p>It is common in object-oriented programming to declare an <em>iterator class</em>
 that can traverse all the objects in a collection, such as an array 
(Chapter 7) or an ArrayList (Chapter 16, Collections). For example, a 
program can print an ArrayList of objects by creating an iterator object
 and using it to obtain the next list element each time the iterator is 
called. Iterators often are used in polymorphic programming to traverse a
 collection that contains references to objects from various levels of a
 hierarchy. (Chapter 16 presents a thorough treatment of ArrayList, 
iterators and "generics" capabilities.) An ArrayList of objects of class
 TwoDimensionalShape, for example, could contain objects from subclasses
 Square, Circle, Triangle and so on. Calling method draw for each 
TwoDimensionalShape object off a TwoDimensionalShape variable would 
polymorphically draw each object correctly on the screen.</p>

<h2>10.5 Case Study: Payroll System Using Polymorphism</h2>

<p>This section reexamines the 
CommissionEmployee-BasePlusCommissionEmployee hierarchy that we explored
 throughout Section 9.4. Now we use an abstract method and polymorphism 
to perform payroll calculations based on the type of employee. We create
 an enhanced employee hierarchy to solve the following problem:</p>

<ul>
<p>A company pays its employees on a weekly basis. The employees are of 
four types: Salaried employees are paid a fixed weekly salary regardless
 of the number of hours worked, hourly employees are paid by the hour 
and receive overtime pay for all hours worked in excess of 40 hours, 
commission employees are paid a percentage of their sales and 
salaried-commission employees receive a base salary plus a percentage of
 their sales. For the current pay period, the company has decided to 
reward salaried-commission employees by adding 10% to their base 
salaries. The company wants to implement a Java application that 
performs its payroll calculations polymorphically.</p>
</ul>

<p>We use abstract class Employee to represent the general concept of an
 employee. The classes that extend Employee are SalariedEmployee, 
CommissionEmployee and HourlyEmployee. Class 
BasePlusCommissionEmployee—which extends CommissionEmployee—represents 
the last employee type. The UML class diagram in <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig02.jpg">Figure 10.2</a>
 shows the inheritance hierarchy for our polymorphic employee-payroll 
application. Note that abstract class Employee is italicized, as per the
 convention of the UML.</p>
<img alt="10fig02.jpg" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/10fig02.jpg" width="640" height="263"> 
<div class="Caption">Figure 10.2 Employee hierarchy UML class diagram.</div>

<p>Abstract superclass Employee declares the "interface" to the 
hierarchy—that is, the set of methods that a program can invoke on all 
Employee objects. We use the term "interface" here in a general sense to
 refer to the various ways programs can communicate with objects of any 
Employee subclass. Be careful not to confuse the general notion of an 
"interface" to something with the formal notion of a Java interface, the
 subject of Section 10.7. Each employee, regardless of the way his or 
her earnings are calculated, has a first name, a last name and a social 
security number, so private instance variables firstName, lastName and 
socialSecurityNumber appear in abstract superclass Employee. </p>

<h3>Software Engineering Observation 10.4</h3>

<p>A subclass can inherit "interface" or "implementation" from a superclass. Hierarchies designed for i<em>mplementation inheritance</em>
 tend to have their functionality high in the hierarchy—each new 
subclass inherits one or more methods that were implemented in a 
superclass, and the subclass uses the superclass implementations. 
Hierarchies designed for <em>interface inheritance</em> tend to have 
their functionality lower in the hierarchy—a superclass specifies one or
 more abstract methods that must be declared for each concrete class in 
the hierarchy, and the individual subclasses override these methods to 
provide subclass-specific implementations. </p>

<p>The following sections implement the Employee class hierarchy. Each 
of the first four sections implements one of the concrete classes. The 
last section implements a test program that builds objects of all these 
classes and processes those objects polymorphically.</p>

<h3>10.5.1 Creating Abstract Superclass Employee </h3>

<p>Class Employee (Figure 10.4) provides methods earnings and toString, 
in addition to the get and set methods that manipulate Employee's 
instance variables. An earnings method certainly applies generically to 
all employees. But each earnings calculation depends on the employee's 
class. So we declare earnings as abstract in superclass Employee because
 a default implementation does not make sense for that method—there is 
not enough information to determine what amount earnings should return. 
Each subclass overrides earnings with an appropriate implementation. To 
calculate an employee's earnings, the program assigns a reference to the
 employee's object to a superclass Employee variable, then invokes the 
earnings method on that variable. We maintain an array of Employee 
variables, each of which holds a reference to an Employee object (of 
course, there cannot be Employee objects because Employee is an abstract
 class—because of inheritance, however, all objects of all subclasses of
 Employee may nevertheless be thought of as Employee objects). The 
program iterates through the array and calls method earnings for each 
Employee object. Java processes these method calls polymorphically. 
Including earnings as an abstract method in Employee forces every direct
 subclass of Employee to override earnings in order to become a concrete
 class. This enables the designer of the class hierarchy to demand that 
each concrete subclass provide an appropriate pay calculation.</p>

<p>Method toString in class Employee returns a String containing the 
first name, last name and social security number of the employee. As 
we'll see, each subclass of Employee overrides method toString to create
 a string representation of an object of that class that contains the 
employee's type (e.g., "salaried employee:") followed by the rest of the
 employee's information.</p>

<p>The diagram in <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig03.jpg">Figure 10.3</a>
 shows each of the five classes in the hierarchy down the left side and 
methods earnings and toString across the top. For each class, the 
diagram shows the desired results of each method. [<em>Note:</em> We do not list superclass Employee's <em>get</em> and <em>set</em>
 methods because they are not overridden in any of the subclasses—each 
of these methods is inherited and used "as is" by each of the 
subclasses.]</p>
<img alt="10fig03.jpg" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/10fig03.jpg" width="640" height="558"> 
<div class="caption">Figure 10.3 Polymorphic interface for the Employee hierarchy classes. </div>

<p>Let us consider class Employee's declaration (Figure 10.4). The class
 includes a constructor that takes the first name, last name and social 
security number as arguments (lines 11-16); get methods that return the 
first name, last name and social security number (lines 25-28, 37-40 and
 49-52, respectively); set methods that set the first name, last name 
and social security number (lines 19-22, 31-34 and 43-46, respectively);
 method toString (lines 55-59), which returns the string representation 
of Employee; and abstract method earnings (line 62), which will be 
implemented by subclasses. Note that the Employee constructor does not 
validate the social security number in this example. Normally, such 
validation should be provided. </p>

<p>Why did we decide to declare earnings as an abstract method? It 
simply does not make sense to provide an implementation of this method 
in class Employee. We cannot calculate the earnings for a general 
Employee—we first must know the specific Employee type to determine the 
appropriate earnings calculation. By declaring this method abstract, we 
indicate that each concrete subclass must provide an appropriate 
earnings implementation and that a program will be able to use 
superclass Employee variables to invoke method earnings polymorphically 
for any type of Employee.</p>

<div class="pre-action-link" id="premain10092" style="width:100%;display:block;"><span id="prehide10092" onclick="processCodeBlocks.togglePre(10092);">Hide</span>  &nbsp; <span id="preShrink10092" onclick="processCodeBlocks.shrinkExpand(10092);">Shrink</span> <img id="preimg10092" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(10092);">  &nbsp; <span id="copycode10092" onclick="return processCodeBlocks.copyCode(10092);">Copy Code</span></div><pre id="pre10092" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Figure 10.4: Employee.java</span></em>
<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> Employee abstract superclass.</span></em>
<span class="code-digit">3</span>
<span class="code-digit">4</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">abstract</span> <span class="code-keyword">class</span></em> Employee
<span class="code-digit">5</span>   {
<span class="code-digit">6</span>      <em><span class="code-keyword">private</span></em> <span class="code-sdkkeyword">String</span> firstName;
<span class="code-digit">7</span>      <em><span class="code-keyword">private</span></em> <span class="code-sdkkeyword">String</span> lastName;
<span class="code-digit">8</span>      <em><span class="code-keyword">private</span></em> <span class="code-sdkkeyword">String</span> socialSecurityNumber;
<span class="code-digit">9</span>
<span class="code-digit">10</span>     <em><span class="code-comment">//</span><span class="code-comment"> three-argument constructor</span></em>

<span class="code-digit">11</span>     <em><span class="code-keyword">public</span></em> Employee( <span class="code-sdkkeyword">String</span> first, <span class="code-sdkkeyword">String</span> last, <span class="code-sdkkeyword">String</span> ssn )
<span class="code-digit">12</span>     {
<span class="code-digit">13</span>        firstName = first;
<span class="code-digit">14</span>        lastName = last;
<span class="code-digit">15</span>        socialSecurityNumber = ssn;
<span class="code-digit">16</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end three-argument Employee constructor</span></em>
<span class="code-digit">17</span>
<span class="code-digit">18</span>     <em><span class="code-comment">//</span><span class="code-comment"> set first name</span></em>
<span class="code-digit">19</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setFirstName( <span class="code-sdkkeyword">String</span> first )
<span class="code-digit">20</span>     {
<span class="code-digit">21</span>        firstName = first;
<span class="code-digit">22</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setFirstName</span></em>

<span class="code-digit">23</span>
<span class="code-digit">24</span>     <em><span class="code-comment">//</span><span class="code-comment"> return first name</span></em>
<span class="code-digit">25</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> getFirstName()
<span class="code-digit">26</span>     {
<span class="code-digit">27</span>        <em><span class="code-keyword">return</span></em> firstName;
<span class="code-digit">28</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getFirstName</span></em>
<span class="code-digit">29</span>
<span class="code-digit">30</span>     <em><span class="code-comment">//</span><span class="code-comment"> set last name</span></em>

<span class="code-digit">31</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setLastName( <span class="code-sdkkeyword">String</span> last )
<span class="code-digit">32</span>     {
<span class="code-digit">33</span>        lastName = last;
<span class="code-digit">34</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setLastName</span></em>
<span class="code-digit">35</span>
<span class="code-digit">36</span>     <em><span class="code-comment">//</span><span class="code-comment"> return last name</span></em>
<span class="code-digit">37</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> getLastName()
<span class="code-digit">38</span>     {
<span class="code-digit">39</span>        <span class="code-keyword">return</span> lastName;
<span class="code-digit">40</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getLastName</span></em>

<span class="code-digit">41</span>
<span class="code-digit">42</span>     <em><span class="code-comment">//</span><span class="code-comment"> set social security number</span></em>
<span class="code-digit">43</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setSocialSecurityNumber( <span class="code-sdkkeyword">String</span> ssn )
<span class="code-digit">44</span>     {
<span class="code-digit">45</span>        socialSecurityNumber = ssn; <em><span class="code-comment">//</span><span class="code-comment"> should validate</span></em>
<span class="code-digit">46</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setSocialSecurityNumber</span></em>
<span class="code-digit">47</span>
<span class="code-digit">48</span>     <em><span class="code-comment">//</span><span class="code-comment"> return social security number</span></em>

<span class="code-digit">49</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> getSocialSecurityNumber()
<span class="code-digit">50</span>     {
<span class="code-digit">51</span>        <em><span class="code-keyword">return</span></em> socialSecurityNumber;
<span class="code-digit">52</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getSocialSecurityNumber</span></em>
<span class="code-digit">53</span>
<span class="code-digit">54</span>     <em><span class="code-comment">//</span><span class="code-comment"> return String representation of Employee object</span></em>
<span class="code-digit">55</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> toString()
<span class="code-digit">56</span>     {
<span class="code-digit">57</span>        <em><span class="code-keyword">return</span></em> <span class="code-sdkkeyword">String</span>.format( <span class="code-string">"</span><span class="code-string">%s %s\nsocial security number: %s"</span>,
<span class="code-digit">58</span>           getFirstName(), getLastName(),
                       getSocialSecurityNumber() );
<span class="code-digit">59</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method toString</span></em>

<span class="code-digit">60</span>
<span class="code-digit">61</span>     <em><span class="code-comment">//</span><span class="code-comment"> abstract method overridden by subclasses</span></em>
<span class="code-digit">62</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">abstract</span> <span class="code-keyword">double</span></em> earnings(); <em><span class="code-comment">//</span><span class="code-comment"> no implementation here</span></em>
<span class="code-digit">63</span>  } <em><span class="code-comment">//</span><span class="code-comment"> end abstract class Employee</span></em>
</pre>

<div class="Caption">Figure 10.4 Employee abstract superclass. </div>

<h3>10.5.2 Creating Concrete Subclass SalariedEmployee </h3>

<p>Class SalariedEmployee (Figure 10.5) extends class Employee (line 4) 
and overrides earnings (lines 29-32), which makes SalariedEmployee a 
concrete class. The class includes a constructor (lines 9-14) that takes
 a first name, a last name, a social security number and a weekly salary
 as arguments; a set method to assign a new nonnegative value to 
instance variable weeklySalary (lines 17-20); a get method to return 
weeklySalary's value (lines 23-26); a method earnings (lines 29-32) to 
calculate a SalariedEmployee's earnings; and a method toString (lines 
35-39), which returns a String including the employee's type, namely, 
"salaried employee: " followed by employee-specific information produced
 by superclass Employee's toString method and SalariedEmployee's 
getWeeklySalary method. Class SalariedEmployee's constructor passes the 
first name, last name and social security number to the Employee 
constructor (line 12) to initialize the private instance variables not 
inherited from the superclass. Method earnings overrides abstract method
 earnings in Employee to provide a concrete implementation that returns 
the SalariedEmployee's weekly salary. If we do not implement earnings, 
class SalariedEmployee must be declared abstract—otherwise, a 
compilation error occurs (and, of course, we want SalariedEmployee here 
to be a concrete class). </p>

<div class="pre-action-link" id="premain1463" style="width:100%;display:block;"><span id="prehide1463" onclick="processCodeBlocks.togglePre(1463);">Hide</span>  &nbsp; <span id="preShrink1463" onclick="processCodeBlocks.shrinkExpand(1463);">Shrink</span> <img id="preimg1463" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(1463);">  &nbsp; <span id="copycode1463" onclick="return processCodeBlocks.copyCode(1463);">Copy Code</span></div><pre id="pre1463" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Figure 10.5: SalariedEmployee.java</span></em>
<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> SalariedEmployee class extends Employee.</span></em>
<span class="code-digit">3</span>
<span class="code-digit">4</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">class</span></em> SalariedEmployee <em>extends</em> Employee
<span class="code-digit">5</span>   {
<span class="code-digit">6</span>      <em><span class="code-keyword">private</span> <span class="code-keyword">double</span></em> weeklySalary;
<span class="code-digit">7</span>
<span class="code-digit">8</span>      <em><span class="code-comment">//</span><span class="code-comment"> four-argument constructor</span></em>

<span class="code-digit">9</span>      <em><span class="code-keyword">public</span></em> SalariedEmployee( <span class="code-sdkkeyword">String</span> first, <span class="code-sdkkeyword">String</span> last, <span class="code-sdkkeyword">String</span> ssn,
<span class="code-digit">10</span>        <em><span class="code-keyword">double</span></em> salary )
<span class="code-digit">11</span>     {
<span class="code-digit">12</span>        <em>super</em>( first, last, ssn ); <em><span class="code-comment">//</span><span class="code-comment"> pass to Employee constructor</span></em>
<span class="code-digit">13</span>        setWeeklySalary( salary ); <em><span class="code-comment">//</span><span class="code-comment"> validate and store salary</span></em>
<span class="code-digit">14</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end four-argument SalariedEmployee constructor</span></em>

<span class="code-digit">15</span>
<span class="code-digit">16</span>     <em><span class="code-comment">//</span><span class="code-comment"> set salary</span></em>
<span class="code-digit">17</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setWeeklySalary( <em><span class="code-keyword">double</span></em> salary )
<span class="code-digit">18</span>     {
<span class="code-digit">19</span>        weeklySalary = salary &lt; <span class="code-digit">0</span>.<span class="code-digit">0</span> ? <span class="code-digit">0</span>.<span class="code-digit">0</span> : salary;
<span class="code-digit">20</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setWeeklySalary</span></em>
<span class="code-digit">21</span>
<span class="code-digit">22</span>     <em><span class="code-comment">//</span><span class="code-comment"> return salary</span></em>

<span class="code-digit">23</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> getWeeklySalary()
<span class="code-digit">24</span>     {
<span class="code-digit">25</span>        <em><span class="code-keyword">return</span></em> weeklySalary;
<span class="code-digit">26</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getWeeklySalary</span></em>
<span class="code-digit">27</span>
<span class="code-digit">28</span>     <em><span class="code-comment">//</span><span class="code-comment"> calculate earnings; override abstract method earnings
</span>                 <span class="code-comment">//</span><span class="code-comment"> in Employee</span></em>
<span class="code-digit">29</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> earnings()
<span class="code-digit">30</span>     {
<span class="code-digit">31</span>        <em><span class="code-keyword">return</span></em> getWeeklySalary();
<span class="code-digit">32</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method earnings</span></em>

<span class="code-digit">33</span>
<span class="code-digit">34</span>     <em><span class="code-comment">//</span><span class="code-comment"> return String representation of SalariedEmployee object</span></em>
<span class="code-digit">35</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> toString()
<span class="code-digit">36</span>     {
<span class="code-digit">37</span>        <em><span class="code-keyword">return</span></em> <span class="code-sdkkeyword">String</span>.format( <span class="code-string">"</span><span class="code-string">salaried employee: %s\n%s: $%,.2f"</span>,
<span class="code-digit">38</span>           <em>super</em>.toString(), <span class="code-string">"</span><span class="code-string">weekly salary"</span>, getWeeklySalary() );
<span class="code-digit">39</span>     }<em> <span class="code-comment">//</span><span class="code-comment"> end method toString</span></em>

<span class="code-digit">40</span>  } <em><span class="code-comment">//</span><span class="code-comment"> end class SalariedEmployee</span></em>
</pre>

<div class="Caption">Figure 10.5 SalariedEmployee class derived from Employee. </div>

<p>Method toString (lines 35-39) of class SalariedEmployee overrides 
Employee method toString. If class SalariedEmployee did not override 
toString, SalariedEmployee would have inherited the Employee version of 
toString. In that case, SalariedEmployee's toString method would simply 
return the employee's full name and social security number, which does 
not adequately represent a SalariedEmployee. To produce a complete 
string representation of a SalariedEmployee, the subclass's toString 
method returns "salaried employee: " followed by the superclass 
Employee-specific information (i.e., first name, last name and social 
security number) obtained by invoking the superclass's toString method 
(line 38)—this is a nice example of code reuse. The string 
representation of a SalariedEmployee also contains the employee's weekly
 salary obtained by invoking the class's getWeeklySalary method.</p>

<h3>10.5.3 Creating Concrete Subclass HourlyEmployee </h3>

<p>Class HourlyEmployee (Figure 10.6) also extends Employee (line 4). 
The class includes a constructor (lines 10-16) that takes as arguments a
 first name, a last name, a social security number, an hourly wage and 
the number of hours worked. Lines 19-22 and 31-35 declare set methods 
that assign new values to instance variables wage and hours, 
respectively. Method setWage (lines 19-22) ensures that wage is 
nonnegative, and method setHours (lines 31-35) ensures that hours is 
between 0 and 168 (the total number of hours in a week) inclusive. Class
 HourlyEmployee also includes get methods (lines 25-28 and 38-41) to 
return the values of wage and hours, respectively; a method earnings 
(lines 44-50) to calculate an HourlyEmployee's earnings; and a method 
toString (lines 53-58), which returns the employee's type, namely, 
"hourly employee: " and Employee-specific information. Note that the 
HourlyEmployee constructor, like the SalariedEmployee constructor, 
passes the first name, last name and social security number to the 
superclass Employee constructor (line 13) to initialize the private 
instance variables. In addition, method toString calls superclass method
 toString (line 56) to obtain the Employee-specific information (i.e., 
first name, last name and social security number)—this is another nice 
example of code reuse.</p>

<div class="pre-action-link" id="premain813750" style="width:100%;display:block;"><span id="prehide813750" onclick="processCodeBlocks.togglePre(813750);">Hide</span>  &nbsp; <span id="preShrink813750" onclick="processCodeBlocks.shrinkExpand(813750);">Shrink</span> <img id="preimg813750" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(813750);">  &nbsp; <span id="copycode813750" onclick="return processCodeBlocks.copyCode(813750);">Copy Code</span></div><pre id="pre813750" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Figure 10.6: HourlyEmployee.java</span></em>
<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> HourlyEmployee class extends Employee.</span></em>
<span class="code-digit">3</span>
<span class="code-digit">4</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">class</span></em> HourlyEmployee <em>extends</em> Employee
<span class="code-digit">5</span>   {
<span class="code-digit">6</span>      <em><span class="code-keyword">private</span> <span class="code-keyword">double</span></em> wage; <em><span class="code-comment">//</span><span class="code-comment"> wage per hour</span></em>

<span class="code-digit">7</span>      <em><span class="code-keyword">private</span> <span class="code-keyword">double</span></em> hours; <em><span class="code-comment">//</span><span class="code-comment"> hours worked for week</span></em>
<span class="code-digit">8</span>
<span class="code-digit">9</span>      <em><span class="code-comment">//</span><span class="code-comment"> five-argument constructor</span></em>
<span class="code-digit">10</span>     <em><span class="code-keyword">public</span></em> HourlyEmployee( <span class="code-sdkkeyword">String</span> first, <span class="code-sdkkeyword">String</span> last, <span class="code-sdkkeyword">String</span> ssn,
<span class="code-digit">11</span>        <em><span class="code-keyword">double</span></em> hourlyWage, <em><span class="code-keyword">double</span></em> hoursWorked )
<span class="code-digit">12</span>     {
<span class="code-digit">13</span>        <em>super</em>( first, last, ssn );
<span class="code-digit">14</span>        setWage( hourlyWage ); <em><span class="code-comment">//</span><span class="code-comment"> validate hourly wage</span></em>

<span class="code-digit">15</span>        setHours( hoursWorked ); <em><span class="code-comment">//</span><span class="code-comment"> validate hours worked</span></em>
<span class="code-digit">16</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end five-argument HourlyEmployee constructor</span></em>
<span class="code-digit">17</span>
<span class="code-digit">18</span>     <em><span class="code-comment">//</span><span class="code-comment"> set wage</span></em>
<span class="code-digit">19</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setWage( <em><span class="code-keyword">double</span></em> hourlyWage )
<span class="code-digit">20</span>     {
<span class="code-digit">21</span>        wage = ( hourlyWage &lt; <span class="code-digit">0</span>.<span class="code-digit">0</span> ) ? <span class="code-digit">0</span>.<span class="code-digit">0</span> : hourlyWage;
<span class="code-digit">22</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setWage</span></em>

<span class="code-digit">23</span>
<span class="code-digit">24</span>     <em><span class="code-comment">//</span><span class="code-comment"> return wage</span></em>
<span class="code-digit">25</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> getWage()
<span class="code-digit">26</span>     {
<span class="code-digit">27</span>        <em><span class="code-keyword">return</span></em> wage;
<span class="code-digit">28</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getWage</span></em>
<span class="code-digit">29</span>
<span class="code-digit">30</span>     <em><span class="code-comment">//</span><span class="code-comment"> set hours worked</span></em>

<span class="code-digit">31</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setHours( <em><span class="code-keyword">double</span></em> hoursWorked )
<span class="code-digit">32</span>     {
<span class="code-digit">33</span>        hours = ( ( hoursWorked &gt;= <span class="code-digit">0</span>.<span class="code-digit">0</span> ) &amp;&amp; (
                     hoursWorked &lt;= <span class="code-digit">168</span>.<span class="code-digit">0</span> ) ) ?
<span class="code-digit">34</span>           hoursWorked : <span class="code-digit">0</span>.<span class="code-digit">0</span>;
<span class="code-digit">35</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setHours</span></em>
<span class="code-digit">36</span>
<span class="code-digit">37</span>     <em><span class="code-comment">//</span><span class="code-comment"> return hours worked</span></em>

<span class="code-digit">38</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> getHours()
<span class="code-digit">39</span>     {
<span class="code-digit">40</span>        <em><span class="code-keyword">return</span></em> hours;
<span class="code-digit">41</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getHours</span></em>
<span class="code-digit">42</span>
<span class="code-digit">43</span>     <em><span class="code-comment">//</span><span class="code-comment"> calculate earnings; override abstract method
</span>                 <span class="code-comment">//</span><span class="code-comment"> earnings in Employee</span></em>
<span class="code-digit">44</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> earnings()
<span class="code-digit">45</span>     {
<span class="code-digit">46</span>        <em><span class="code-keyword">if</span></em> ( getHours() &lt;= <span class="code-digit">40</span> ) <em><span class="code-comment">//</span><span class="code-comment"> no overtime</span></em>

<span class="code-digit">47</span>           <em><span class="code-keyword">return</span></em> getWage() * getHours();
<span class="code-digit">48</span>        <em><span class="code-keyword">else</span></em>
<span class="code-digit">49</span>           <em><span class="code-keyword">return</span></em> <span class="code-digit">40</span> * getWage() + ( gethours() - <span class="code-digit">40</span> ) * getWage() *
                           <span class="code-digit">1</span>.<span class="code-digit">5</span>;
<span class="code-digit">50</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method earnings</span></em>
<span class="code-digit">51</span>
<span class="code-digit">52</span>     <em><span class="code-comment">//</span><span class="code-comment"> return String representation of HourlyEmployee object</span></em>

<span class="code-digit">53</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> toString()
<span class="code-digit">54</span>     {
<span class="code-digit">55</span>        <em><span class="code-keyword">return</span></em> <span class="code-sdkkeyword">String</span>.format(
                       <span class="code-string">"</span><span class="code-string">hourly employee: %s\n%s: $%,.2f; %s: %,.2f"</span>,
<span class="code-digit">56</span>           <em>super</em>.toString(), <span class="code-string">"</span><span class="code-string">hourly wage"</span>, getWage(),
<span class="code-digit">57</span>           <span class="code-string">"</span><span class="code-string">hours worked"</span>, getHours() );
<span class="code-digit">58</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method toString</span></em>
<span class="code-digit">59</span>  } <em><span class="code-comment">//</span><span class="code-comment"> end class HourlyEmployee</span></em>
</pre>

<div class="Caption">Figure 10.6 HourlyEmployee class derived from Employee. </div>

<h3>10.5.4 Creating Concrete Subclass CommissionEmployee </h3>

<p>Class CommissionEmployee (Figure 10.7) extends class Employee (line 
4). The class includes a constructor (lines 10-16) that takes a first 
name, a last name, a social security number, a sales amount and a 
commission rate; set methods (lines 19-22 and 31-34) to assign new 
values to instance variables commissionRate and grossSales, 
respectively; get methods (lines 25-28 and 37-40) that retrieve the 
values of these instance variables; method earnings (lines 43-46) to 
calculate a CommissionEmployee's earnings; and method toString (lines 
49-55), which returns the employee's type, namely, "commission employee:
 " and Employee-specific information. The constructor also passes the 
first name, last name and social security number to Employee's 
constructor (line 13) to initialize Employee's private instance 
variables. Method toString calls superclass method toString (line 52) to
 obtain the Employee-specific information (i.e., first name, last name 
and social security number). </p>

<div class="pre-action-link" id="premain731672" style="width:100%;display:block;"><span id="prehide731672" onclick="processCodeBlocks.togglePre(731672);">Hide</span>  &nbsp; <span id="preShrink731672" onclick="processCodeBlocks.shrinkExpand(731672);">Shrink</span> <img id="preimg731672" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(731672);">  &nbsp; <span id="copycode731672" onclick="return processCodeBlocks.copyCode(731672);">Copy Code</span></div><pre id="pre731672" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Figure 10.7: CommissionEmployee.java</span></em>
<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> CommissionEmployee class extends Employee.</span></em>
<span class="code-digit">3</span>
<span class="code-digit">4</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">class</span></em> CommissionEmployee <em>extends</em> Employee
<span class="code-digit">5</span>   {
<span class="code-digit">6</span>      <em><span class="code-keyword">private</span> <span class="code-keyword">double</span></em> grossSales; <em><span class="code-comment">//</span><span class="code-comment"> gross weekly sales</span></em>

<span class="code-digit">7</span>      <em><span class="code-keyword">private</span> <span class="code-keyword">double</span></em> commissionRate; <em><span class="code-comment">//</span><span class="code-comment"> commission percentage</span></em>
<span class="code-digit">8</span>
<span class="code-digit">9</span>      <em><span class="code-comment">//</span><span class="code-comment"> five-argument constructor</span></em>
<span class="code-digit">10</span>     <em><span class="code-keyword">public</span></em> CommissionEmployee( <span class="code-sdkkeyword">String</span> first, <span class="code-sdkkeyword">String</span> last,
                     <span class="code-sdkkeyword">String</span> ssn,
<span class="code-digit">11</span>        <em><span class="code-keyword">double</span></em> sales, <em><span class="code-keyword">double</span></em> rate )
<span class="code-digit">12</span>     {
<span class="code-digit">13</span>        <em>super</em>( first, last, ssn );
<span class="code-digit">14</span>        setGrossSales( sales );
<span class="code-digit">15</span>        setCommissionRate( rate );
<span class="code-digit">16</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end five-argument CommissionEmployee constructor</span></em>

<span class="code-digit">17</span>
<span class="code-digit">18</span>     <em><span class="code-comment">//</span><span class="code-comment"> set commission rate</span></em>
<span class="code-digit">19</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setCommissionRate( <em><span class="code-keyword">double</span></em> rate )
<span class="code-digit">20</span>     {
<span class="code-digit">21</span>        commissionRate = ( rate &gt; <span class="code-digit">0</span>.<span class="code-digit">0</span> &amp;&amp; rate &lt; <span class="code-digit">1</span>.<span class="code-digit">0</span> ) ? rate : <span class="code-digit">0</span>.<span class="code-digit">0</span>;
<span class="code-digit">22</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setCommissionRate</span></em>

<span class="code-digit">23</span>
<span class="code-digit">24</span>     <em><span class="code-comment">//</span><span class="code-comment"> return commission rate</span></em>
<span class="code-digit">25</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> getCommissionRate()
<span class="code-digit">26</span>     {
<span class="code-digit">27</span>        <em><span class="code-keyword">return</span></em> commissionRate;
<span class="code-digit">28</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getCommissionRate</span></em>
<span class="code-digit">29</span>
<span class="code-digit">30</span>     <em><span class="code-comment">//</span><span class="code-comment"> set gross sales amount</span></em>

<span class="code-digit">31</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setGrossSales( <em><span class="code-keyword">double</span></em> sales )
<span class="code-digit">32</span>     {
<span class="code-digit">33</span>        grossSales = ( sales &lt; <span class="code-digit">0</span>.<span class="code-digit">0</span> ) ? <span class="code-digit">0</span>.<span class="code-digit">0</span> : sales;
<span class="code-digit">34</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setGrossSales</span></em>
<span class="code-digit">35</span>
<span class="code-digit">36</span>     <em><span class="code-comment">//</span><span class="code-comment"> return gross sales amount</span></em>
<span class="code-digit">37</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> getGrossSales()
<span class="code-digit">38</span>     {
<span class="code-digit">39</span>        <em><span class="code-keyword">return</span></em> grossSales;
<span class="code-digit">40</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getGrossSales</span></em>

<span class="code-digit">41</span>
<span class="code-digit">42</span>     <em><span class="code-comment">//</span><span class="code-comment"> calculate earnings; override abstract method earnings
</span>                 <span class="code-comment">//</span><span class="code-comment"> in Employee</span></em>
<span class="code-digit">43</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> earnings()
<span class="code-digit">44</span>     {
<span class="code-digit">45</span>        <em><span class="code-keyword">return</span></em> getCommissionRate() * getGrossSales();
<span class="code-digit">46</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method earnings</span></em>
<span class="code-digit">47</span>
<span class="code-digit">48</span>     <em><span class="code-comment">//</span><span class="code-comment"> return String representation of CommissionEmployee object</span></em>

<span class="code-digit">49</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> toString()
<span class="code-digit">50</span>     {
<span class="code-digit">51</span>        <em><span class="code-keyword">return</span></em> <span class="code-sdkkeyword">String</span>.format( <span class="code-string">"</span><span class="code-string">%s: %s\n%s: $%,.2f; %s: %.2f"</span>,
<span class="code-digit">52</span>           <span class="code-string">"</span><span class="code-string">commission employee"</span>, <em>super</em>.toString(),
<span class="code-digit">53</span>           <span class="code-string">"</span><span class="code-string">gross sales"</span>, getGrossSales(),
<span class="code-digit">54</span>           <span class="code-string">"</span><span class="code-string">commission rate"</span>, getCommissionRate() );
<span class="code-digit">55</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method toString</span></em>
<span class="code-digit">56</span>  } <em><span class="code-comment">//</span><span class="code-comment"> end class CommissionEmployee</span></em>
</pre>

<div class="Caption">Figure 10.7 CommissionEmployee class derived from Employee. </div>

<h3>10.5.5 Creating Indirect Concrete Subclass BasePlusCommissionEmployee </h3>

<p>Class BasePlusCommissionEmployee (Figure 10.8) extends class 
CommissionEmployee (line 4) and therefore is an indirect subclass of 
class Employee. Class BasePlusCommissionEmployee has a constructor 
(lines 9-14) that takes as arguments a first name, a last name, a social
 security number, a sales amount, a commission rate and a base salary. 
It then passes the first name, last name, social security number, sales 
amount and commission rate to the CommissionEmployee constructor (line 
12) to initialize the inherited members. BasePlusCommissionEmployee also
 contains a set method (lines 17-20) to assign a new value to instance 
variable baseSalary and a get method (lines 23-26) to return 
baseSalary's value. Method earnings (lines 29-32) calculates a 
BasePlusCommissionEmployee's earnings. Note that line 31 in method 
earnings calls superclass CommissionEmployee's earnings method to 
calculate the commission-based portion of the employee's earnings. This 
is a nice example of code reuse. BasePlusCommissionEmployee's toString 
method (lines 35-40) creates a string representation of a 
BasePlusCommissionEmployee that contains "base-salaried", followed by 
the String obtained by invoking superclass CommissionEmployee's toString
 method (another example of code reuse), then the base salary. The 
result is a String beginning with "base-salaried commission employee" 
followed by the rest of the BasePlusCommissionEmployee's information. 
Recall that CommissionEmployee's toString obtains the employee's first 
name, last name and social security number by invoking the toString 
method of its superclass (i.e., Employee)—yet another example of code 
reuse. Note that BasePlusCommissionEmployee's toString initiates a chain
 of method calls that span all three levels of the Employee hierarchy.</p>

<div class="pre-action-link" id="premain922116" style="width:100%;display:block;"><span id="prehide922116" onclick="processCodeBlocks.togglePre(922116);">Hide</span>  &nbsp; <span id="preShrink922116" onclick="processCodeBlocks.shrinkExpand(922116);">Shrink</span> <img id="preimg922116" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(922116);">  &nbsp; <span id="copycode922116" onclick="return processCodeBlocks.copyCode(922116);">Copy Code</span></div><pre id="pre922116" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Figure 10.8: BasePlusCommissionEmployee.java</span></em>
<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> BasePlusCommissionEmployee class extends CommissionEmployee.</span></em>
<span class="code-digit">3</span>
<span class="code-digit">4</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">class</span></em> BasePlusCommissionEmployee <em>extends</em> CommissionEmployee
<span class="code-digit">5</span>   {
<span class="code-digit">6</span>      <em><span class="code-keyword">private</span> <span class="code-keyword">double</span></em> baseSalary; <em><span class="code-comment">//</span><span class="code-comment"> base salary per week</span></em>

<span class="code-digit">7</span>
<span class="code-digit">8</span>      <em><span class="code-comment">//</span><span class="code-comment"> six-argument constructor</span></em>
<span class="code-digit">9</span>      <em><span class="code-keyword">public</span></em> BasePlusCommissionEmployee( <span class="code-sdkkeyword">String</span> first, <span class="code-sdkkeyword">String</span> last,
<span class="code-digit">10</span>        <span class="code-sdkkeyword">String</span> ssn, <em><span class="code-keyword">double</span></em> sales, <em><span class="code-keyword">double</span></em> rate, <em><span class="code-keyword">double</span></em> salary )
<span class="code-digit">11</span>     {
<span class="code-digit">12</span>        <em>super</em>( first, last, ssn, sales, rate );
<span class="code-digit">13</span>        setBaseSalary( salary ); <em><span class="code-comment">//</span><span class="code-comment"> validate and store base salary</span></em>

<span class="code-digit">14</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end six-argument BasePlusCommissionEmployee constructor</span></em>
<span class="code-digit">15</span>
<span class="code-digit">16</span>     <em><span class="code-comment">//</span><span class="code-comment"> set base salary</span></em>
<span class="code-digit">17</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setBaseSalary( <em><span class="code-keyword">double</span></em> salary )
<span class="code-digit">18</span>     {
<span class="code-digit">19</span>        baseSalary = ( salary &lt; <span class="code-digit">0</span>.<span class="code-digit">0</span> ) ? <span class="code-digit">0</span>.<span class="code-digit">0</span> : salary; <em><span class="code-comment">//</span><span class="code-comment"> non-negative</span></em>

<span class="code-digit">20</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setBaseSalary</span></em>
<span class="code-digit">21</span>
<span class="code-digit">22</span>     <em><span class="code-comment">//</span><span class="code-comment"> return base salary</span></em>
<span class="code-digit">23</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> getBaseSalary()
<span class="code-digit">24</span>     {
<span class="code-digit">25</span>        <em><span class="code-keyword">return</span></em> baseSalary;
<span class="code-digit">26</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getBaseSalary</span></em>

<span class="code-digit">27</span>
<span class="code-digit">28</span>     <em><span class="code-comment">//</span><span class="code-comment"> calculate earnings; override method earnings in
</span>                 <span class="code-comment">//</span><span class="code-comment"> CommissionEmployee</span></em>
<span class="code-digit">29</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> earnings()
<span class="code-digit">30</span>     {
<span class="code-digit">31</span>        <em><span class="code-keyword">return</span></em> getBaseSalary() + <em>super</em>.earnings();
<span class="code-digit">32</span>     } <span class="code-comment">//</span><span class="code-comment"> end method earnings
</span><span class="code-digit">33</span>
<span class="code-digit">34</span>     <span class="code-comment">//</span><span class="code-comment"> return String representation of BasePlusCommissionEmployee
</span>                 <span class="code-comment">//</span><span class="code-comment"> object
</span><span class="code-digit">35</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> toString()
<span class="code-digit">36</span>     {
<span class="code-digit">37</span>        <em><span class="code-keyword">return</span></em> <span class="code-sdkkeyword">String</span>.format( <span class="code-string">"</span><span class="code-string">%s %s; %s: $%,.2f"</span>,
<span class="code-digit">38</span>           <span class="code-string">"</span><span class="code-string">base-salaried"</span>, <em>super</em>.toString(),
<span class="code-digit">39</span>           <span class="code-string">"</span><span class="code-string">base salary"</span>, getBaseSalary() );
<span class="code-digit">40</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method toString</span></em>

<span class="code-digit">41</span>  } <em><span class="code-comment">//</span><span class="code-comment"> end class BasePlusCommissionEmployee</span></em>
</pre>

<div class="Caption">Figure 10.8 BasePlusCommissionEmployee derives from CommissionEmployee.</div>

<h3>10.5.6 Demonstrating Polymorphic Processing, Operator instanceof and Downcasting</h3>

<p>To test our Employee hierarchy, the application in Figure 10.9 
creates an object of each of the four concrete classes SalariedEmployee,
 HourlyEmployee, CommissionEmployee and BasePlusCommissionEmployee. The 
program manipulates these objects, first via variables of each object's 
own type, then polymorphically, using an array of Employee variables. 
While processing the objects polymorphically, the program increases the 
base salary of each BasePlusCommissionEmployee by 10% (this, of course, 
requires determining the object's type at execution time). Finally, the 
program polymorphically determines and outputs the type of each object 
in the Employee array. Lines 9-18 create objects of each of the four 
concrete Employee subclasses. Lines 22-30 output the string 
representation and earnings of each of these objects. Note that each 
object's toString method is called implicitly by printf when the object 
is output as a String with the %s format specifier.</p>

<div class="pre-action-link" id="premain146625" style="width:100%;display:block;"><span id="prehide146625" onclick="processCodeBlocks.togglePre(146625);">Hide</span>  &nbsp; <span id="preShrink146625" onclick="processCodeBlocks.shrinkExpand(146625);">Shrink</span> <img id="preimg146625" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(146625);">  &nbsp; <span id="copycode146625" onclick="return processCodeBlocks.copyCode(146625);">Copy Code</span></div><pre id="pre146625" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Figure 10.9: PayrollSystemTest.java</span></em>
<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> Employee hierarchy test program.</span></em>

<span class="code-digit">3</span>
<span class="code-digit">4</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">class</span></em> PayrollSystemTest
<span class="code-digit">5</span>   {
<span class="code-digit">6</span>      <em><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span class="code-keyword">void</span></em> main( <span class="code-sdkkeyword">String</span> args[] )
<span class="code-digit">7</span>      {
<span class="code-digit">8</span>         <em><span class="code-comment">//</span><span class="code-comment"> create subclass objects</span></em>
<span class="code-digit">9</span>         SalariedEmployee salariedEmployee =
<span class="code-digit">10</span>           <em><span class="code-keyword">new</span></em> SalariedEmployee( <span class="code-string">"</span><span class="code-string">John"</span>, <span class="code-string">"</span><span class="code-string">Smith"</span>, <span class="code-string">"</span><span class="code-string">111-11-1111"</span>,
                       <span class="code-digit">800</span>.<span class="code-digit">00</span> );
<span class="code-digit">11</span>        HourlyEmployee hourlyEmployee =
<span class="code-digit">12</span>           <em><span class="code-keyword">new</span></em> HourlyEmployee( <span class="code-string">"</span><span class="code-string">Karen"</span>, <span class="code-string">"</span><span class="code-string">Price"</span>, <span class="code-string">"</span><span class="code-string">222-22-2222"</span>, <span class="code-digit">16</span>.<span class="code-digit">75</span>,
                       <span class="code-digit">40</span> );
<span class="code-digit">13</span>        CommissionEmployee commissionEmployee =
<span class="code-digit">14</span>           <em><span class="code-keyword">new</span></em> CommissionEmployee(
<span class="code-digit">15</span>           <span class="code-string">"</span><span class="code-string">Sue"</span>, <span class="code-string">"</span><span class="code-string">Jones"</span>, <span class="code-string">"</span><span class="code-string">333-33-3333"</span>, <span class="code-digit">10000</span>, .<span class="code-digit">06</span> );
<span class="code-digit">16</span>        BasePlusCommissionEmployee basePlusCommissionEmployee =
<span class="code-digit">17</span>           <em><span class="code-keyword">new</span></em> BasePlusCommissionEmployee(
<span class="code-digit">18</span>           <span class="code-string">"</span><span class="code-string">Bob"</span>, <span class="code-string">"</span><span class="code-string">Lewis"</span>, <span class="code-string">"</span><span class="code-string">444-44-4444"</span>, <span class="code-digit">5000</span>, .<span class="code-digit">04</span>, <span class="code-digit">300</span> );
<span class="code-digit">19</span>
<span class="code-digit">20</span>        System.<span class="code-keyword">out</span>.println( <span class="code-string">"</span><span class="code-string">Employees processed individually:\n"</span> );
<span class="code-digit">21</span>
<span class="code-digit">22</span>        System.<span class="code-keyword">out</span>.printf( <span class="code-string">"</span><span class="code-string">%s\n%s: $%,.2f\n\n"</span>,
<span class="code-digit">23</span>           salariedEmployee, <span class="code-string">"</span><span class="code-string">earned"</span>, salariedEmployee.earnings() );
<span class="code-digit">24</span>        System.<span class="code-keyword">out</span>.printf( <span class="code-string">"</span><span class="code-string">%s\n%s: $%,.2f\n\n"</span>,
<span class="code-digit">25</span>           hourlyEmployee, <span class="code-string">"</span><span class="code-string">earned"</span>, hourlyEmployee.earnings() );
<span class="code-digit">26</span>        System.<span class="code-keyword">out</span>.printf( <span class="code-string">"</span><span class="code-string">%s\n%s: $%,.2f\n\n"</span>,
<span class="code-digit">27</span>           commissionEmployee, <span class="code-string">"</span><span class="code-string">earned"</span>,
                       commissionEmployee.earnings() );
<span class="code-digit">28</span>        System.<span class="code-keyword">out</span>.printf( <span class="code-string">"</span><span class="code-string">%s\n%s: $%,.2f\n\n"</span>,
<span class="code-digit">29</span>           basePlusCommissionEmployee,
<span class="code-digit">30</span>           <span class="code-string">"</span><span class="code-string">earned"</span>, basePlusCommissionEmployee.earnings() );
<span class="code-digit">31</span>
<span class="code-digit">32</span>        <em><span class="code-comment">//</span><span class="code-comment"> create four-element Employee array</span></em>

<span class="code-digit">33</span>        Employee employees[] = <em><span class="code-keyword">new</span></em> Employee[ <span class="code-digit">4</span> ];
<span class="code-digit">34</span>
<span class="code-digit">35</span>        <em><span class="code-comment">//</span><span class="code-comment"> initialize array with Employees</span></em>
<span class="code-digit">36</span>        employees[ <span class="code-digit">0</span> ] = salariedEmployee;
<span class="code-digit">37</span>        employees[ <span class="code-digit">1</span> ] = hourlyEmployee;
<span class="code-digit">38</span>        employees[ <span class="code-digit">2</span> ] = commissionEmployee;
<span class="code-digit">39</span>        employees[ <span class="code-digit">3</span> ] = basePlusCommissionEmployee;
<span class="code-digit">40</span>
<span class="code-digit">41</span>        System.<span class="code-keyword">out</span>.println(
                        <span class="code-string">"</span><span class="code-string">Employees processed polymorphically:\n"</span> );
<span class="code-digit">42</span>
<span class="code-digit">43</span>        <em><span class="code-comment">//</span><span class="code-comment"> generically process each element in array employees</span></em>
<span class="code-digit">44</span>        <em><span class="code-keyword">for</span></em> ( Employee currentEmployee : employees )
<span class="code-digit">45</span>        {
<span class="code-digit">46</span>           System.<span class="code-keyword">out</span>.println( currentEmployee ); <em><span class="code-comment">//</span><span class="code-comment"> invokes toString</span></em>

<span class="code-digit">47</span>
<span class="code-digit">48</span>           <em><span class="code-comment">//</span><span class="code-comment"> determine whether element is a BasePlusCommissionEmployee</span></em>
<span class="code-digit">49</span>           <em><span class="code-keyword">if</span></em> (
                           currentEmployee <em>instanceof</em> BasePlusCommissionEmployee )
<span class="code-digit">50</span>           {
<span class="code-digit">51</span>              <em><span class="code-comment">//</span><span class="code-comment"> downcast Employee reference to</span></em>
<span class="code-digit">52</span>              <em><span class="code-comment">//</span><span class="code-comment"> BasePlusCommissionEmployee reference</span></em>

<span class="code-digit">53</span>              BasePlusCommissionEmployee employee =
<span class="code-digit">54</span>                 ( BasePlusCommissionEmployee ) currentEmployee;
<span class="code-digit">55</span>
<span class="code-digit">56</span>              <em><span class="code-keyword">double</span></em> oldBaseSalary = employee.getBaseSalary();
<span class="code-digit">57</span>              employee.setBaseSalary( <span class="code-digit">1</span>.<span class="code-digit">10</span> * oldBaseSalary );
<span class="code-digit">58</span>              System.<span class="code-keyword">out</span>.printf(
<span class="code-digit">59</span>                 <span class="code-string">"</span><span class="code-string">new base salary with 10%% increase is: $%,.2f\n"</span>,
<span class="code-digit">60</span>                 employee.getBaseSalary() );
<span class="code-digit">61</span>           } <em><span class="code-comment">//</span><span class="code-comment"> end if</span></em>
<span class="code-digit">62</span>
<span class="code-digit">63</span>           System.<span class="code-keyword">out</span>.printf(
<span class="code-digit">64</span>              <span class="code-string">"</span><span class="code-string">earned $%,.2f\n\n"</span>, currentEmployee.earnings() );
<span class="code-digit">65</span>        } <em><span class="code-comment">//</span><span class="code-comment"> end for</span></em>
<span class="code-digit">66</span>
<span class="code-digit">67</span>        <em><span class="code-comment">//</span><span class="code-comment"> get type name of each object in employees array</span></em>
<span class="code-digit">68</span>        <em><span class="code-keyword">for</span></em> ( <em><span class="code-keyword">int</span></em> j = <span class="code-digit">0</span>; j &lt; employees.length; j++ )
<span class="code-digit">69</span>           System.<span class="code-keyword">out</span>.printf( <span class="code-string">"</span><span class="code-string">Employee %d is a %s\n"</span>, j,
<span class="code-digit">70</span>              employees[ j ].getClass().getName() );
<span class="code-digit">71</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end main</span></em>

<span class="code-digit">72</span>  } <em><span class="code-comment">//</span><span class="code-comment"> end class PayrollSystemTest</span></em>
</pre>

<h4>OUTPUT</h4>

<div class="pre-action-link" id="premain899231" style="width:100%;display:block;"><span id="prehide899231" onclick="processCodeBlocks.togglePre(899231);">Hide</span>  &nbsp; <span id="preShrink899231" onclick="processCodeBlocks.shrinkExpand(899231);">Shrink</span> <img id="preimg899231" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(899231);">  &nbsp; <span id="copycode899231" onclick="return processCodeBlocks.copyCode(899231);">Copy Code</span></div><pre id="pre899231" style="margin-top: 0px;" processed="true" class="notranslate">Employees processed individually:

salaried employee: John Smith
social security number: 111-11-1111
weekly salary: $800.<span class="code-digit">00</span>
earned: $800.<span class="code-digit">00</span>

hourly employee: Karen Price
social security number: 222-22-2222
hourly wage: $16.<span class="code-digit">75</span>; hours worked: <span class="code-digit">40</span>.<span class="code-digit">00</span>
earned: $670.<span class="code-digit">00</span>

commission employee: Sue Jones
social security number: 333-33-3333
gross sales: $10,<span class="code-digit">000</span>.<span class="code-digit">00</span>; commission rate: <span class="code-digit">0</span>.<span class="code-digit">06</span>
earned: $600.<span class="code-digit">00</span>

base-salaried commission employee: Bob Lewis
social security number: 444-44-4444
gross sales: $5,<span class="code-digit">000</span>.<span class="code-digit">00</span>; commission rate: <span class="code-digit">0</span>.<span class="code-digit">04</span>; <span class="code-keyword">base</span> salary: $300.<span class="code-digit">00</span>
earned: $500.<span class="code-digit">00</span>

Employees processed polymorphically:

salaried employee: John Smith
social security number: 111-11-1111
weekly salary: $800.<span class="code-digit">00</span>
earned $800.<span class="code-digit">00</span>

hourly employee: Karen Price
social security number: 222-22-2222
hourly wage: $16.<span class="code-digit">75</span>; hours worked: <span class="code-digit">40</span>.<span class="code-digit">00</span>
earned $670.<span class="code-digit">00</span>

commission employee: Sue Jones
social security number: 333-33-3333
gross sales: $10,<span class="code-digit">000</span>.<span class="code-digit">00</span>; commission rate: <span class="code-digit">0</span>.<span class="code-digit">06</span>
earned $600.<span class="code-digit">00</span>

base-salaried commission employee: Bob Lewis
social security number: 444-44-4444
gross sales: $5,<span class="code-digit">000</span>.<span class="code-digit">00</span>; commission rate: <span class="code-digit">0</span>.<span class="code-digit">04</span>; <span class="code-keyword">base</span> salary: $300.<span class="code-digit">00</span>
<span class="code-keyword">new</span> <span class="code-keyword">base</span> salary with 10% increase <span class="code-keyword">is</span> $330.<span class="code-digit">00</span>
earned $530.<span class="code-digit">00</span>

Employee <span class="code-digit">0</span> <span class="code-keyword">is</span> a SalariedEmployee
Employee <span class="code-digit">1</span> <span class="code-keyword">is</span> a HourlyEmployee
Employee <span class="code-digit">2</span> <span class="code-keyword">is</span> a CommissionEmployee
Employee <span class="code-digit">3</span> <span class="code-keyword">is</span> a BasePlusCommissionEmployee</pre>

<div class="Caption">Figure 10.9 Employee class hierarchy test program. </div>

<p>Line 33 declares employees and assigns it an array of four Employee 
variables. Line 36 assigns the reference to a SalariedEmployee object to
 employees[ 0 ]. Line 37 assigns the reference to an HourlyEmployee 
object to employees[ 1 ]. Line 38 assigns the reference to a 
CommissionEmployee object to employees[ 2 ]. Line 39 assigns the 
reference to a BasePlusCommissionEmployee object to employee[ 3 ]. Each 
assignment is allowed, because a SalariedEmployee <em>is an</em> Employee, an HourlyEmployee <em>is an</em> Employee, a CommissionEmployee <em>is an</em>
 Employee and a BasePlusCommissionEmployee is an Employee. Therefore, we
 can assign the references of SalariedEmployee, HourlyEmployee, 
CommissionEmployee and BasePlusCommissionEmployee objects to superclass 
Employee variables, even though Employee is an abstract class.</p>

<p>Lines 44-65 iterate through array employees and invoke methods 
toString and earnings with Employee control variable currentEmployee. 
The output illustrates that the appropriate methods for each class are 
indeed invoked. All calls to method toString and earnings are resolved 
at execution time, based on the type of the object to which 
currentEmployee refers. This process is known as <em>dynamic binding</em> or <em>late binding</em>.
 For example, line 46 implicitly invokes method toString of the object 
to which currentEmployee refers. As a result of dynamic binding, Java 
decides which class's toString method to call at execution time rather 
than at compile time. Note that only the methods of class Employee can 
be called via an Employee variable (and Employee, of course, includes 
the methods of class Object). (Section 9.7 discusses the set of methods 
that all classes inherit from class Object.) A superclass reference can 
be used to invoke only methods of the superclass (and the superclass can
 invoke overridden versions of these in the subclass).</p>

<p>We perform special processing on BasePlusCommissionEmployee 
objects—as we encounter these objects, we increase their base salary by 
10%. When processing objects polymorphically, we typically do not need 
to worry about the "specifics," but to adjust the base salary, we do 
have to determine the specific type of Employee object at execution 
time. Line 49 uses the <em>instanceof</em> operator to determine whether
 a particular Employee object's type is BasePlusCommissionEmployee. The 
condition in line 49 is true if the object referenced by currentEmployee
 <em>is a</em> BasePlusCommissionEmployee. This would also be true for any object of a BasePlusCommissionEmployee subclass because of the <em>is-a</em>
 relationship a subclass has with its superclass. Lines 53-54 downcast 
currentEmployee from type Employee to type 
BasePlusCommissionEmployee—this cast is allowed only if the object has 
an is-a relationship with BasePlusCommissionEmployee. The condition at 
line 49 ensures that this is the case. This cast is required if we are 
to invoke subclass BasePlusCommissionEmployee methods getBaseSalary and 
setBaseSalary on the current Employee object—as you'll see momentarily, 
attempting to invoke a subclass-only method directly on a superclass 
reference is a compilation error.</p>

<h3>Common Programming Error 10.3</h3>

<p>Assigning a superclass variable to a subclass variable (without an explicit cast) is a compilation error.</p>

<h3>Software Engineering Observation 10.5</h3>

<p>If at execution time the reference of a subclass object has been 
assigned to a variable of one of its direct or indirect superclasses, it
 is acceptable to cast the reference stored in that superclass variable 
back to a reference of the subclass type. Before performing such a cast,
 use the instanceof operator to ensure that the object is indeed an 
object of an appropriate subclass type. </p>

<h3>Common Programming Error 10.4</h3>

<p>When downcasting an object, a ClassCastException occurs if at 
execution time the object does not have an is-a relationship with the 
type specified in the cast operator. An object can be cast only to its 
own type or to the type of one of its superclasses.</p>

<p>If the instanceof expression in line 49 is true, the body of the if 
statement (lines 49-61) performs the special processing required for the
 BasePlusCommissionEmployee object. Using BasePlusCommissionEmployee 
variable employee, lines 56 and 57 invoke subclass-only methods 
getBaseSalary and setBaseSalary to retrieve and update the employee's 
base salary with the 10% raise. </p>

<p>Lines 63-64 invoke method earnings on currentEmployee, which calls 
the appropriate subclass object's earnings method polymorphically. As 
you can see, obtaining the earnings of the SalariedEmployee, 
HourlyEmployee and CommissionEmployee polymorphically in lines 63-64 
produces the same result as obtaining these employees' earnings 
individually in lines 22-27. However, the earnings amount obtained for 
the BasePlusCommissionEmployee in lines 63-64 is higher than that 
obtained in lines 28-30, due to the 10% increase in its base salary.</p>

<p>Lines 68-70 display each employee's type as a string. Every object in
 Java knows its own class and can access this information through the <em>getClass</em> method, which all classes inherit from class Object. The getClass method returns an object of type <em>Class</em>
 (from package java.lang), which contains information about the object's
 type, including its class name. Line 70 invokes the getClass method on 
the object to get its runtime class (i.e., a Class object that 
represents the object's type). Then method <em>getName</em> is invoked 
on the object returned by getClass to get the class's name. To learn 
more about class Class, see its online documentation at <a href="http://www.codeproject.com/Articles/34125/java.sun.com/javase/6/docs/api/java/lang/Class.html">http://www.java.sun.com/javase/6/docs/api/java/lang/Class.html</a>.</p>

<p>In the previous example, we avoided several compilation errors by 
downcasting an Employee variable to a BasePlusCommissionEmployee 
variable in lines 53-54. If you remove the cast operator ( 
BasePlusCommissionEmployee ) from line 54 and attempt to assign Employee
 variable currentEmployee directly to BasePlusCommissionEmployee 
variable employee, you'll receive an "incompatible types" compilation 
error. This error indicates that the attempt to assign the reference of 
superclass object commissionEmployee to subclass variable 
basePlusCommissionEmployee is not allowed. The compiler prevents this 
assignment because a CommissionEmployee is not a 
BasePlusCommissionEmployee—the <em>is-a</em> relationship applies only between the subclass and its superclasses, not vice versa.</p>

<p>Similarly, if lines 56, 57 and 60 used superclass variable 
currentEmployee, rather than subclass variable employee, to invoke 
subclass-only methods getBaseSalary and setBaseSalary, we would receive a
 "cannot find symbol" compilation error on each of these lines. 
Attempting to invoke subclass-only methods on a superclass reference is 
not allowed. While lines 56, 57 and 60 execute only if instanceof in 
line 49 returns true to indicate that currentEmployee has been assigned a
 reference to a BasePlusCommissionEmployee object, we cannot attempt to 
invoke subclass BasePlusCommissionEmployee methods getBaseSalary and 
setBaseSalary on superclass Employee reference currentEmployee. The 
compiler would generate errors in lines 56, 57 and 60, because 
getBaseSalary and setBaseSalary are not superclass methods and cannot be
 invoked on a superclass variable. Although the actual method that is 
called depends on the object's type at execution time, a variable can be
 used to invoke only those methods that are members of that variable's 
type, which the compiler verifies. Using a superclass Employee variable,
 we can invoke only methods found in class Employee—earnings, toString 
and Employee's <em>get</em> and <em>set</em> methods.</p>

<h3>10.5.7 Summary of the Allowed Assignments Between Superclass and Subclass Variables</h3>

<p>Now that you have seen a complete application that processes diverse 
subclass objects polymorphically, we summarize what you can and cannot 
do with superclass and subclass objects and variables. Although a 
subclass object also <em>is a</em> superclass object, the two objects 
are nevertheless different. As discussed previously, subclass objects 
can be treated as if they are superclass objects. But because the 
subclass can have additional subclass-only members, assigning a 
superclass reference to a subclass variable is not allowed without an 
explicit cast—such an assignment would leave the subclass members 
undefined for the superclass object. </p>

<p>In the current section and in Section 10.3 and Chapter 9, we have 
discussed four ways to assign superclass and subclass references to 
variables of superclass and subclass types:</p>

<ol>
<li>Assigning a superclass reference to a superclass variable is straightforward. </li>

<li>Assigning a subclass reference to a subclass variable is straightforward. </li>

<li>Assigning a subclass reference to a superclass variable is safe, because the subclass object <em>is an</em>
 object of its superclass. However, this reference can be used to refer 
only to superclass members. If this code refers to subclass-only members
 through the superclass variable, the compiler reports errors. </li>

<li>Attempting to assign a superclass reference to a subclass variable 
is a compilation error. To avoid this error, the superclass reference 
must be cast to a subclass type explicitly. At execution time, if the 
object to which the reference refers is not a subclass object, an 
exception will occur. (For more on exception handling, see Chapter 13.) 
The instanceof operator can be used to ensure that such a cast is 
performed only if the object is a subclass object. </li>
</ol>

<h2>10.6 final Methods and Classes</h2>

<p>We saw in Section 6.10 that variables can be declared final to 
indicate that they cannot be modified after they are initialized—such 
variables represent constant values. It is also possible to declare 
methods, method parameters and classes with the final modifier.</p>

<p>A method that is declared final in a superclass cannot be overridden 
in a subclass. Methods that are declared private are implicitly final, 
because it is impossible to override them in a subclass. Methods that 
are declared static are also implicitly final. A final method's 
declaration can never change, so all subclasses use the same method 
implementation, and calls to final methods are resolved at compile 
time—this is known as <em>static binding</em>. Since the compiler knows 
that final methods cannot be overridden, it can optimize programs by 
removing calls to final methods and replacing them with the expanded 
code of their declarations at each method call location—a technique 
known as <em>inlining the code</em>.</p>

<h3>Performance Tip 10.1</h3>

<p>The compiler can decide to inline a final method call and will do so 
for small, simple final methods. Inlining does not violate encapsulation
 or information hiding, but does improve performance because it 
eliminates the overhead of making a method call.</p>

<p>A class that is declared final cannot be a superclass (i.e., a class 
cannot extend a final class). All methods in a final class are 
implicitly final. Class String is an example of a final class. This 
class cannot be extended, so programs that use Strings can rely on the 
functionality of String objects as specified in the Java API. Making the
 class final also prevents programmers from creating subclasses that 
might bypass security restrictions. For more information on final 
classes and methods, visit <a href="http://www.java.sun.com/docs/books/tutorial/java/IandI/final.html">http://www.java.sun.com/docs/books/tutorial/java/IandI/final.html</a>. This site contains additional insights into using final classes to improve the security of a system.</p>

<h3>Common Programming Error 10.5</h3>

<p>Attempting to declare a subclass of a final class is a compilation error.</p>

<div class="Caption">Software Engineering Observation 10.6</div>

<p>In the Java API, the vast majority of classes are not declared final.
 This enables inheritance and polymorphism—the fundamental capabilities 
of object-oriented programming. However, in some cases, it is important 
to declare classes final—typically for security reasons.</p>

<h2>10.7 Case Study: Creating and Using Interfaces</h2>

<p>Our next example (Figs. 10.11-10.13) reexamines the payroll system of
 Section 10.5. Suppose that the company involved wishes to perform 
several accounting operations in a single accounts payable 
application—in addition to calculating the earnings that must be paid to
 each employee, the company must also calculate the payment due on each 
of several invoices (i.e., bills for goods purchased). Though applied to
 unrelated things (i.e., employees and invoices), both operations have 
to do with obtaining some kind of payment amount. For an employee, the 
payment refers to the employee's earnings. For an invoice, the payment 
refers to the total cost of the goods listed on the invoice. Can we 
calculate such different things as the payments due for employees and 
invoices in a single application polymorphically? Does Java offer a 
capability that requires that unrelated classes implement a set of 
common methods (e.g., a method that calculates a payment amount)? Java <em>interfaces</em> offer exactly this capability.</p>

<p>Interfaces define and standardize the ways in which things such as 
people and systems can interact with one another. For example, the 
controls on a radio serve as an interface between radio users and a 
radio's internal components. The controls allow users to perform only a 
limited set of operations (e.g., changing the station, adjusting the 
volume, choosing between AM and FM), and different radios may implement 
the controls in different ways (e.g., using push buttons, dials, voice 
commands). The interface specifies <em>what</em> operations a radio must permit users to perform but does not specify <em>how</em>
 the operations are performed. Similarly, the interface between a driver
 and a car with a manual transmission includes the steering wheel, the 
gear shift, the clutch pedal, the gas pedal and the brake pedal. This 
same interface is found in nearly all manual transmission cars, enabling
 someone who knows how to drive one particular manual transmission car 
to drive just about any manual transmission car. The components of each 
individual car may look different, but their general purpose is the 
same—to allow people to drive the car.</p>

<p>Software objects also communicate via interfaces. A Java interface 
describes a set of methods that can be called on an object, to tell the 
object to perform some task or return some piece of information, for 
example. The next example introduces an interface named Payable to 
describe the functionality of any object that must be capable of being 
paid and thus must offer a method to determine the proper payment amount
 due. An <em>interface declaration</em> begins with the keyword <em>interface</em>
 and contains only constants and abstract methods. Unlike classes, all 
interface members must be public, and interfaces may not specify any 
implementation details, such as concrete method declarations and 
instance variables. So all methods declared in an interface are 
implicitly public abstract methods and all fields are implicitly public,
 static and final.</p>

<h3>Good Programming Practice 10.1</h3>

<p>According to Chapter 9 of the Java Language Specification, it is 
proper style to declare an interface's methods without keywords public 
and abstract because they are redundant in interface method 
declarations. Similarly, constants should be declared without keywords 
public, static and final because they, too, are redundant.</p>

<p>To use an interface, a concrete class must specify that it <em>implements</em>
 the interface and must declare each method in the interface with the 
signature specified in the interface declaration. A class that does not 
implement all the methods of the interface is an abstract class and must
 be declared abstract. Implementing an interface is like signing a 
contract with the compiler that states, "I will declare all the methods 
specified by the interface or I will declare my class abstract."</p>

<h3>Common Programming Error 10.6</h3>

<p>Failing to implement any method of an interface in a concrete class 
that implements the interface results in a compilation error indicating 
that the class must be declared abstract.</p>

<div></div>

<p>An interface is typically used when disparate (i.e., unrelated) 
classes need to share common methods and constants. This allows objects 
of unrelated classes to be processed polymorphically—objects of classes 
that implement the same interface can respond to the same method calls. 
You can create an interface that describes the desired functionality, 
then implement this interface in any classes that require that 
functionality. For example, in the accounts payable application 
developed in this section, we implement interface Payable in any class 
that must be able to calculate a payment amount (e.g., Employee, 
Invoice).</p>

<p>An interface is often used in place of an abstract class when there 
is no default implementation to inherit—that is, no fields and no 
default method implementations. Interfaces are typically public types, 
so they are normally declared in files by themselves with the same name 
as the interface and the .java file-name extension. </p>

<h3>10.7.1 Developing a Payable Hierarchy</h3>

<p>To build an application that can determine payments for employees and
 invoices alike, we first create interface Payable, which contains 
method getPaymentAmount that returns a double amount that must be paid 
for an object of any class that implements the interface. Method 
getPaymentAmount is a general purpose version of method earnings of the 
Employee hierarchy—method earnings calculates a payment amount 
specifically for an Employee, while getPaymentAmount can be applied to a
 broad range of unrelated objects. After declaring interface Payable, we
 introduce class Invoice, which implements interface Payable. We then 
modify class Employee such that it also implements interface Payable. 
Finally, we update Employee subclass SalariedEmployee to "fit" into the 
Payable hierarchy (i.e., we rename SalariedEmployee method earnings as 
getPaymentAmount). </p>

<h3>Good Programming Practice 10.2</h3>

<p>When declaring a method in an interface, choose a method name that 
describes the method's purpose in a general manner, because the method 
may be implemented by many unrelated classes.</p>

<p>Classes Invoice and Employee both represent things for which the 
company must be able to calculate a payment amount. Both classes 
implement Payable, so a program can invoke method getPaymentAmount on 
Invoice objects and Employee objects alike. As we'll soon see, this 
enables the polymorphic processing of Invoices and Employees required 
for our company's accounts payable application.</p>

<p>The UML class diagram in <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig10.jpg">Figure 10.10</a>
 shows the hierarchy used in our accounts payable application. The 
hierarchy begins with interface Payable. The UML distinguishes an 
interface from other classes by placing the word "interface" in 
guillemets (« and ») above the interface name. The UML expresses the 
relationship between a class and an interface through a relationship 
known as a realization. A class is said to "realize," or implement, the 
methods of an interface. A class diagram models a realization as a 
dashed arrow with a hollow arrowhead pointing from the implementing 
class to the interface. The diagram in <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig10.jpg">Figure 10.10</a>
 indicates that classes Invoice and Employee each realize (i.e., 
implement) interface Payable. Note that, as in the class diagram of <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig02.jpg">Figure 10.2</a>,
 class Employee appears in italics, indicating that it is an abstract 
class. Concrete class SalariedEmployee extends Employee and inherits its
 superclass's realization relationship with interface Payable.</p>
<img alt="10fig10.jpg" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/10fig10.jpg" width="640" height="401"> 
<div class="Caption">Figure 10.10 Payable interface hierarchy UML class diagram. </div>

<h3>10.7.2 Declaring Interface Payable </h3>

<p>The declaration of interface Payable begins in Figure 10.11 at line 
4. Interface Payable contains public abstract method getPaymentAmount 
(line 6). Note that the method is not explicitly declared public or 
abstract. Interface methods must be public and abstract, so they do not 
need to be declared as such. Interface Payable has only one 
method—interfaces can have any number of methods. (We'll see later in 
the book the notion of "tagging interfaces"—these actually have no 
methods. In fact, a tagging interface contains no constant values, 
either—it simply contains an empty interface declaration.) In addition, 
method getPaymentAmount has no parameters, but interface methods can 
have parameters. </p>

<div class="pre-action-link" id="premain294557" style="width:100%;display:block;"><span id="prehide294557" onclick="processCodeBlocks.togglePre(294557);">Hide</span>  &nbsp; <span id="copycode294557" onclick="return processCodeBlocks.copyCode(294557);">Copy Code</span></div><pre id="pre294557" style="margin-top: 0px;" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Figure 10.11: Payable.java</span></em>
<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> Payable interface declaration.</span></em>
<span class="code-digit">3</span>
<span class="code-digit">4</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">interface</span></em> Payable
<span class="code-digit">5</span>   {
<span class="code-digit">6</span>   <em><span class="code-keyword">double</span></em> getPaymentAmount(); <em><span class="code-comment">//</span><span class="code-comment"> calculate payment; no implementation</span></em>

<span class="code-digit">7</span>   } <em><span class="code-comment">//</span><span class="code-comment"> end interface Payable</span></em>
</pre>

<div class="Caption">Figure 10.11 Payable interface declaration. </div>

<h3>10.7.3 Creating Class Invoice </h3>

<p>We now create class Invoice (Figure 10.12) to represent a simple 
invoice that contains billing information for only one kind of part. The
 class declares private instance variables partNumber, partDescription, 
quantity and pricePerItem (in lines 6-9) that indicate the part number, a
 description of the part, the quantity of the part ordered and the price
 per item. Class Invoice also contains a constructor (lines 12-19), <em>get</em> and <em>set</em>
 methods (lines 22-67) that manipulate the class's instance variables 
and a toString method (lines 70-75) that returns a string representation
 of an Invoice object. Note that methods setQuantity (lines 46-49) and 
setPricePerItem (lines 58-61) ensure that quantity and pricePerItem 
obtain only nonnegative values. </p>

<div class="pre-action-link" id="premain881970" style="width:100%;display:block;"><span id="prehide881970" onclick="processCodeBlocks.togglePre(881970);">Hide</span>  &nbsp; <span id="preShrink881970" onclick="processCodeBlocks.shrinkExpand(881970);">Shrink</span> <img id="preimg881970" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(881970);">  &nbsp; <span id="copycode881970" onclick="return processCodeBlocks.copyCode(881970);">Copy Code</span></div><pre id="pre881970" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Figure 10.12: Invoice.java</span></em>
<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> Invoice class implements Payable.</span></em>
<span class="code-digit">3</span>
<span class="code-digit">4</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">class</span></em> Invoice <em>implements</em> Payable
<span class="code-digit">5</span>   {
<span class="code-digit">6</span>      <em><span class="code-keyword">private</span></em> <span class="code-sdkkeyword">String</span> partNumber;
<span class="code-digit">7</span>      <em><span class="code-keyword">private</span></em> <span class="code-sdkkeyword">String</span> partDescription;
<span class="code-digit">8</span>      <em><span class="code-keyword">private</span> <span class="code-keyword">int</span></em> quantity;
<span class="code-digit">9</span>      <em><span class="code-keyword">private</span> <span class="code-keyword">double</span></em> pricePerItem;
<span class="code-digit">10</span>
<span class="code-digit">11</span>     <em><span class="code-comment">//</span><span class="code-comment"> four-argument constructor</span></em>

<span class="code-digit">12</span>     <em><span class="code-keyword">public</span></em> Invoice( <span class="code-sdkkeyword">String</span> part, <span class="code-sdkkeyword">String</span> description, <em><span class="code-keyword">int</span></em> count,
<span class="code-digit">13</span>        <em><span class="code-keyword">double</span></em> price )
<span class="code-digit">14</span>     {
<span class="code-digit">15</span>        partNumber = part;
<span class="code-digit">16</span>        partDescription = description;
<span class="code-digit">17</span>        setQuantity( count ); <em><span class="code-comment">//</span><span class="code-comment"> validate and store quantity</span></em>
<span class="code-digit">18</span>        setPricePerItem( price ); <em><span class="code-comment">//</span><span class="code-comment"> validate and store price per item</span></em>

<span class="code-digit">19</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end four-argument Invoice constructor</span></em>
<span class="code-digit">20</span>
<span class="code-digit">21</span>     <em><span class="code-comment">//</span><span class="code-comment"> set part number</span></em>
<span class="code-digit">22</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setPartNumber( <span class="code-sdkkeyword">String</span> part )
<span class="code-digit">23</span>     {
<span class="code-digit">24</span>        partNumber = part;
<span class="code-digit">25</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setPartNumber</span></em>
<span class="code-digit">26</span>
<span class="code-digit">27</span>     <em><span class="code-comment">//</span><span class="code-comment"> get part number</span></em>

<span class="code-digit">28</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> getPartNumber()
<span class="code-digit">29</span>     {
<span class="code-digit">30</span>        <em><span class="code-keyword">return</span></em> partNumber;
<span class="code-digit">31</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getPartNumber</span></em>
<span class="code-digit">32</span>
<span class="code-digit">33</span>     <em><span class="code-comment">//</span><span class="code-comment"> set description</span></em>
<span class="code-digit">34</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setPartDescription( <span class="code-sdkkeyword">String</span> description )
<span class="code-digit">35</span>     {
<span class="code-digit">36</span>        partDescription = description;
<span class="code-digit">37</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setPartDescription</span></em>

<span class="code-digit">38</span>
<span class="code-digit">39</span>     <em><span class="code-comment">//</span><span class="code-comment"> get description</span></em>
<span class="code-digit">40</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> getPartDescription()
<span class="code-digit">41</span>     {
<span class="code-digit">42</span>        <em><span class="code-keyword">return</span></em> partDescription;
<span class="code-digit">43</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getPartDescription</span></em>
<span class="code-digit">44</span>
<span class="code-digit">45</span>     <em><span class="code-comment">//</span><span class="code-comment"> set quantity</span></em>

<span class="code-digit">46</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setQuantity( <em><span class="code-keyword">int</span></em> count )
<span class="code-digit">47</span>     {
<span class="code-digit">48</span>        quantity = ( count &lt; <span class="code-digit">0</span> ) ? <span class="code-digit">0</span> : count; <em><span class="code-comment">//</span><span class="code-comment"> quantity cannot be
</span>                                                          <span class="code-comment">//</span><span class="code-comment"> negative</span></em>
<span class="code-digit">49</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setQuantity</span></em>
<span class="code-digit">50</span>
<span class="code-digit">51</span>     <em><span class="code-comment">//</span><span class="code-comment"> get quantity</span></em>

<span class="code-digit">52</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">int</span></em> getQuantity()
<span class="code-digit">53</span>     {
<span class="code-digit">54</span>        <em><span class="code-keyword">return</span></em> quantity;
<span class="code-digit">55</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getQuantity</span></em>
<span class="code-digit">56</span>
<span class="code-digit">57</span>     <em><span class="code-comment">//</span><span class="code-comment"> set price per item</span></em>
<span class="code-digit">58</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setPricePerItem( <em><span class="code-keyword">double</span></em> price )
<span class="code-digit">59</span>     {
<span class="code-digit">60</span>        pricePerItem = ( price &lt; <span class="code-digit">0</span>.<span class="code-digit">0</span> ) ? <span class="code-digit">0</span>.<span class="code-digit">0</span> : price; <em><span class="code-comment">//</span><span class="code-comment"> validate price</span></em>

<span class="code-digit">61</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setPricePerItem</span></em>
<span class="code-digit">62</span>
<span class="code-digit">63</span>     <em><span class="code-comment">//</span><span class="code-comment"> get price per item</span></em>
<span class="code-digit">64</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> getPricePerItem()
<span class="code-digit">65</span>     {
<span class="code-digit">66</span>        <em><span class="code-keyword">return</span></em> pricePerItem;
<span class="code-digit">67</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getPricePerItem</span></em>

<span class="code-digit">68</span>
<span class="code-digit">69</span>     <em><span class="code-comment">//</span><span class="code-comment"> return String representation of Invoice object</span></em>
<span class="code-digit">70</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> toString()
<span class="code-digit">71</span>     {
<span class="code-digit">72</span>        <span class="code-keyword">return</span> <span class="code-sdkkeyword">String</span>.format(
                       <span class="code-string">"</span><span class="code-string">%s: \n%s: %s (%s) \n%s: %d \n%s: $%,.2f"</span>,
<span class="code-digit">73</span>           <span class="code-string">"</span><span class="code-string">invoice"</span>, <span class="code-string">"</span><span class="code-string">part number"</span>, getPartNumber(),
                       getPartDescription(),
<span class="code-digit">74</span>           <span class="code-string">"</span><span class="code-string">quantity"</span>, getQuantity(), <span class="code-string">"</span><span class="code-string">price per item"</span>,
                       getPricePerItem() );
<span class="code-digit">75</span>     } <span class="code-comment">//</span><span class="code-comment"> end method toString
</span><span class="code-digit">76</span>
<span class="code-digit">77</span>     <span class="code-comment">//</span><span class="code-comment"> method required to carry out contract with interface Payable
</span><span class="code-digit">78</span>     <span class="code-keyword">public</span> <span class="code-keyword">double</span> getPaymentAmount()
<span class="code-digit">79</span>     {
<span class="code-digit">80</span>        <span class="code-keyword">return</span> getQuantity() * getPricePerItem(); <span class="code-comment">//</span><span class="code-comment"> calculate total cost
</span><span class="code-digit">81</span>     } <span class="code-comment">//</span><span class="code-comment"> end method getPaymentAmount
</span><span class="code-digit">82</span>  } <span class="code-comment">//</span><span class="code-comment"> end class Invoice
</span></pre>

<div class="Caption">Figure 10.12 Invoice class that implements Payable. </div>

<p>Line 4 of Figure 10.12 indicates that class Invoice implements 
interface Payable. Like all classes, class Invoice also implicitly 
extends Object. Java does not allow subclasses to inherit from more than
 one superclass, but it does allow a class to inherit from a superclass 
and implement more than one interface. In fact, a class can implement as
 many interfaces as it needs, in addition to extending one other class. 
To implement more than one interface, use a comma-separated list of 
interface names after keyword implements in the class declaration, as 
in:</p>

<div class="pre-action-link" id="premain59282" style="width:100%;display:block;"><span id="prehide59282" onclick="processCodeBlocks.togglePre(59282);">Hide</span>  &nbsp; <span id="copycode59282" onclick="return processCodeBlocks.copyCode(59282);">Copy Code</span></div><pre id="pre59282" style="margin-top: 0px;" class="notranslate"><span class="code-keyword">public</span> <span class="code-keyword">class</span> ClassName extends SuperclassName implements FirstInterface,
     SecondInterface, ｡ｦ</pre>

<p>All objects of a class that implement multiple interfaces have the is-a relationship with each implemented interface type.</p>

<p>Class Invoice implements the one method in interface Payable. Method 
getPaymentAmount is declared in lines 78-81. The method calculates the 
total payment required to pay the invoice. The method multiplies the 
values of quantity and pricePerItem (obtained through the appropriate <em>get</em>
 methods) and returns the result (line 80). This method satisfies the 
implementation requirement for this method in interface Payable—we have 
fulfilled the interface contract with the compiler.</p>

<h3>10.7.4 Modifying Class Employee to Implement Interface Payable </h3>

<p>We now modify class Employee such that it implements interface 
Payable. Figure 10.13 contains the modified Employee class. This class 
declaration is identical to that of Figure 10.4 with only two 
exceptions. First, line 4 of Figure 10.13 indicates that class Employee 
now implements interface Payable. Second, since Employee now implements 
interface Payable, we must rename earnings to getPaymentAmount 
throughout the Employee hierarchy. As with method earnings in the 
version of class Employee in Figure 10.4, however, it does not make 
sense to implement method getPaymentAmount in class Employee because we 
cannot calculate the earnings payment owed to a general Employee—first 
we must know the specific type of Employee. In Figure 10.4, we declared 
method earnings as abstract for this reason, and as a result class 
Employee had to be declared abstract. This forced each Employee subclass
 to override earnings with a concrete implementation. </p>

<div class="pre-action-link" id="premain214116" style="width:100%;display:block;"><span id="prehide214116" onclick="processCodeBlocks.togglePre(214116);">Hide</span>  &nbsp; <span id="preShrink214116" onclick="processCodeBlocks.shrinkExpand(214116);">Shrink</span> <img id="preimg214116" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(214116);">  &nbsp; <span id="copycode214116" onclick="return processCodeBlocks.copyCode(214116);">Copy Code</span></div><pre id="pre214116" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Figure 10.13: Employee.java</span></em>
<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> Employee abstract superclass implements Payable.</span></em>
<span class="code-digit">3</span>
<span class="code-digit">4</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">abstract</span> <span class="code-keyword">class</span></em> Employee <em>implements</em> Payable
<span class="code-digit">5</span>   {
<span class="code-digit">6</span>      <em><span class="code-keyword">private</span></em> <span class="code-sdkkeyword">String</span> firstName;
<span class="code-digit">7</span>      <em><span class="code-keyword">private</span></em> <span class="code-sdkkeyword">String</span> lastName;
<span class="code-digit">8</span>      <em><span class="code-keyword">private</span></em> <span class="code-sdkkeyword">String</span> socialSecurityNumber;
<span class="code-digit">9</span>
<span class="code-digit">10</span>     <em><span class="code-comment">//</span><span class="code-comment"> three-argument constructor</span></em>

<span class="code-digit">11</span>     <em><span class="code-keyword">public</span></em> Employee( <span class="code-sdkkeyword">String</span> first, <span class="code-sdkkeyword">String</span> last, <span class="code-sdkkeyword">String</span> ssn )
<span class="code-digit">12</span>     {
<span class="code-digit">13</span>        firstName = first;
<span class="code-digit">14</span>        lastName = last;
<span class="code-digit">15</span>        socialSecurityNumber = ssn;
<span class="code-digit">16</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end three-argument Employee constructor</span></em>
<span class="code-digit">17</span>
<span class="code-digit">18</span>     <em><span class="code-comment">//</span><span class="code-comment"> set first name</span></em>
<span class="code-digit">19</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setFirstName( <span class="code-sdkkeyword">String</span> first )
<span class="code-digit">20</span>     {
<span class="code-digit">21</span>        firstName = first;
<span class="code-digit">22</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setFirstName</span></em>

<span class="code-digit">23</span>
<span class="code-digit">24</span>     <em><span class="code-comment">//</span><span class="code-comment"> return first name</span></em>
<span class="code-digit">25</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> getFirstName()
<span class="code-digit">26</span>     {
<span class="code-digit">27</span>        <em><span class="code-keyword">return</span></em> firstName;
<span class="code-digit">28</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getFirstName</span></em>
<span class="code-digit">29</span>
<span class="code-digit">30</span>     <em><span class="code-comment">//</span><span class="code-comment"> set last name</span></em>

<span class="code-digit">31</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setLastName( <span class="code-sdkkeyword">String</span> last )
<span class="code-digit">32</span>     {
<span class="code-digit">33</span>        lastName = last;
<span class="code-digit">34</span>     } <span class="code-comment">//</span><span class="code-comment"> end method setLastName
</span><span class="code-digit">35</span>
<span class="code-digit">36</span>     <em><span class="code-comment">//</span><span class="code-comment"> return last name</span></em>
<span class="code-digit">37</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> getLastName()
<span class="code-digit">38</span>     {
<span class="code-digit">39</span>        <em><span class="code-keyword">return</span></em> lastName;
<span class="code-digit">40</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getLastName</span></em>

<span class="code-digit">41</span>
<span class="code-digit">42</span>     <em><span class="code-comment">//</span><span class="code-comment"> set social security number</span></em>
<span class="code-digit">43</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setSocialSecurityNumber( <span class="code-sdkkeyword">String</span> ssn )
<span class="code-digit">44</span>     {
<span class="code-digit">45</span>        socialSecurityNumber = ssn; <em><span class="code-comment">//</span><span class="code-comment"> should validate</span></em>
<span class="code-digit">46</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setSocialSecurityNumber</span></em>
<span class="code-digit">47</span>
<span class="code-digit">48</span>     <em><span class="code-comment">//</span><span class="code-comment"> return social security number</span></em>

<span class="code-digit">49</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> getSocialSecurityNumber()
<span class="code-digit">50</span>     {
<span class="code-digit">51</span>        <em><span class="code-keyword">return</span></em> socialSecurityNumber;
<span class="code-digit">52</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getSocialSecurityNumber</span></em>
<span class="code-digit">53</span>
<span class="code-digit">54</span>     <em><span class="code-comment">//</span><span class="code-comment"> return String representation of Employee object</span></em>
<span class="code-digit">55</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> toString()
<span class="code-digit">56</span>     {
<span class="code-digit">57</span>        <em><span class="code-keyword">return</span></em> <span class="code-sdkkeyword">String</span>.format( <span class="code-string">"</span><span class="code-string">%s %s\nsocial security number: %s"</span>,
<span class="code-digit">58</span>           getFirstName(), getLastName(), getSocialSecurityNumber() );
<span class="code-digit">59</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method toString</span></em>

<span class="code-digit">60</span>
<span class="code-digit">61</span>     <em><span class="code-comment">//</span><span class="code-comment"> Note: We do not implement Payable method getPaymentAmount
</span>                 <span class="code-comment">//</span><span class="code-comment"> here so</span></em>
<span class="code-digit">62</span>     <em><span class="code-comment">//</span><span class="code-comment"> this class must be declared abstract to avoid a compilation
</span>                 <span class="code-comment">//</span><span class="code-comment"> error.</span></em>
<span class="code-digit">63</span>  } <em><span class="code-comment">//</span><span class="code-comment"> end abstract class Employee</span></em>
</pre>

<div class="Caption">Figure 10.13 Employee class that implements Payable. </div>

<p>In Figure 10.13, we handle this situation differently. Recall that 
when a class implements an interface, the class makes a contract with 
the compiler stating either that the class will implement each of the 
methods in the interface or that the class will be declared abstract. If
 the latter option is chosen, we do not need to declare the interface 
methods as abstract in the abstract class—they are already implicitly 
declared as such in the interface. Any concrete subclass of the abstract
 class must implement the interface methods to fulfill the superclass's 
contract with the compiler. If the subclass does not do so, it too must 
be declared abstract. As indicated by the comments in lines 61-62, class
 Employee of Figure 10.13 does not implement method getPaymentAmount, so
 the class is declared abstract. Each direct Employee subclass inherits 
the superclass's contract to implement method getPaymentAmount and thus 
must implement this method to become a concrete class for which objects 
can be instantiated. A class that extends one of Employee's concrete 
subclasses will inherit an implementation of getPaymentAmount and thus 
will also be a concrete class.</p>

<h3>10.7.5 Modifying Class SalariedEmployee for Use in the Payable Hierarchy</h3>

<p>Figure 10.14 contains a modified version of class SalariedEmployee 
that extends Employee and fulfills superclass Employee's contract to 
implement method getPaymentAmount of interface Payable. This version of 
SalariedEmployee is identical to that of Figure 10.5 with the exception 
that the version here implements method getPaymentAmount (lines 30-33) 
instead of method earnings. The two methods contain the same 
functionality but have different names. Recall that the Payable version 
of the method has a more general name to be applicable to possibly 
disparate classes. The remaining Employee subclasses (e.g., 
HourlyEmployee, CommissionEmployee and BasePlusCommissionEmployee) also 
must be modified to contain method getPaymentAmount in place of earnings
 to reflect the fact that Employee now implements Payable. We leave 
these modifications as an exercise and use only SalariedEmployee in our 
test program in this section.</p>

<div class="pre-action-link" id="premain179720" style="width:100%;display:block;"><span id="prehide179720" onclick="processCodeBlocks.togglePre(179720);">Hide</span>  &nbsp; <span id="preShrink179720" onclick="processCodeBlocks.shrinkExpand(179720);">Shrink</span> <img id="preimg179720" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(179720);">  &nbsp; <span id="copycode179720" onclick="return processCodeBlocks.copyCode(179720);">Copy Code</span></div><pre id="pre179720" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Figure 10.14: SalariedEmployee.java</span></em>

<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> SalariedEmployee class extends Employee, which implements Payable.</span></em>
<span class="code-digit">3</span>
<span class="code-digit">4</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">class</span></em> SalariedEmployee <em>extends</em> Employee
<span class="code-digit">5</span>   {
<span class="code-digit">6</span>      <em><span class="code-keyword">private</span> <span class="code-keyword">double</span></em> weeklySalary;
<span class="code-digit">7</span>
<span class="code-digit">8</span>      <em><span class="code-comment">//</span><span class="code-comment"> four-argument constructor</span></em>

<span class="code-digit">9</span>      <em><span class="code-keyword">public</span></em> SalariedEmployee( <span class="code-sdkkeyword">String</span> first, <span class="code-sdkkeyword">String</span> last, <span class="code-sdkkeyword">String</span> ssn,
<span class="code-digit">10</span>        <em><span class="code-keyword">double</span></em> salary )
<span class="code-digit">11</span>     {
<span class="code-digit">12</span>        <em>super</em>( first, last, ssn ); <em><span class="code-comment">//</span><span class="code-comment"> pass to Employee constructor</span></em>
<span class="code-digit">13</span>        setWeeklySalary( salary ); <em><span class="code-comment">//</span><span class="code-comment"> validate and store salary</span></em>
<span class="code-digit">14</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end four-argument SalariedEmployee constructor</span></em>

<span class="code-digit">15</span>
<span class="code-digit">16</span>     <em><span class="code-comment">//</span><span class="code-comment"> set salary</span></em>
<span class="code-digit">17</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> setWeeklySalary( <em><span class="code-keyword">double</span></em> salary )
<span class="code-digit">18</span>     {
<span class="code-digit">19</span>        weeklySalary = salary &lt; <span class="code-digit">0</span>.<span class="code-digit">0</span> ? <span class="code-digit">0</span>.<span class="code-digit">0</span> : salary;
<span class="code-digit">20</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method setWeeklySalary</span></em>
<span class="code-digit">21</span>
<span class="code-digit">22</span>     <em><span class="code-comment">//</span><span class="code-comment"> return salary</span></em>

<span class="code-digit">23</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> getWeeklySalary()
<span class="code-digit">24</span>     {
<span class="code-digit">25</span>        <em><span class="code-keyword">return</span></em> weeklySalary;
<span class="code-digit">26</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getWeeklySalary</span></em>
<span class="code-digit">27</span>
<span class="code-digit">28</span>     <em><span class="code-comment">//</span><span class="code-comment"> calculate earnings; implement interface Payable method that was</span></em>
<span class="code-digit">29</span>     <em><span class="code-comment">//</span><span class="code-comment"> abstract in superclass Employee</span></em>

<span class="code-digit">30</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">double</span></em> getPaymentAmount()
<span class="code-digit">31</span>     {
<span class="code-digit">32</span>        <em><span class="code-keyword">return</span></em> getWeeklySalary();
<span class="code-digit">33</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getPaymentAmount</span></em>
<span class="code-digit">34</span>
<span class="code-digit">35</span>     <em><span class="code-comment">//</span><span class="code-comment"> return String representation of SalariedEmployee object</span></em>
<span class="code-digit">36</span>     <em><span class="code-keyword">public</span></em> <span class="code-sdkkeyword">String</span> toString()
<span class="code-digit">37</span>     {
<span class="code-digit">38</span>        <em><span class="code-keyword">return</span></em> <span class="code-sdkkeyword">String</span>.format( <span class="code-string">"</span><span class="code-string">salaried employee: %s\n%s: $%,.2f"</span>,
<span class="code-digit">39</span>           <em>super</em>.toString(), <span class="code-string">"</span><span class="code-string">weekly salary"</span>, getWeeklySalary() );
<span class="code-digit">40</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method toString</span></em>

<span class="code-digit">41</span>  } <em><span class="code-comment">//</span><span class="code-comment"> end class SalariedEmployee</span></em>
</pre>

<div class="Caption">Figure 10.14 SalariedEmployee class that implements interface Payable method getPaymentAmount. </div>

<p>When a class implements an interface, the same <em>is-a</em> relationship provided by inheritance applies. For example, class Employee implements Payable, so we can say that an Employee <em>is a</em>
 Payable. In fact, objects of any classes that extend Employee are also 
Payable objects. SalariedEmployee objects, for instance, are Payable 
objects. As with inheritance relationships, an object of a class that 
implements an interface may be thought of as an object of the interface 
type. Objects of any subclasses of the class that implements the 
interface can also be thought of as objects of the interface type. Thus,
 just as we can assign the reference of a SalariedEmployee object to a 
superclass Employee variable, we can assign the reference of a 
SalariedEmployee object to an interface Payable variable. Invoice 
implements Payable, so an Invoice object also <em>is a</em> Payable object, and we can assign the reference of an Invoice object to a Payable variable.</p>

<h3>Software Engineering Observation 10.7</h3>

<p>Inheritance and interfaces are similar in their implementation of the
 is-a relationship. An object of a class that implements an interface 
may be thought of as an object of that interface type. An object of any 
subclasses of a class that implements an interface also can be thought 
of as an object of the interface type.</p>

<h3>Software Engineering Observation 10.8</h3>

<p>The is-a relationship that exists between superclasses and 
subclasses, and between interfaces and the classes that implement them, 
holds when passing an object to a method. When a method parameter 
receives a variable of a superclass or interface type, the method 
processes the object received as an argument polymorphically.</p>

<h3>Software Engineering Observation 10.9</h3>

<p>Using a superclass reference, we can polymorphically invoke any 
method specified in the superclass declaration (and in class Object). 
Using an interface reference, we can polymorphically invoke any method 
specified in the interface declaration (and in class Object—because a 
variable of an interface type must refer to an object to call methods, 
and all objects contain the methods of class Object). </p>

<h3>10.7.6 Using Interface Payable to Process Invoices and Employees Polymorphically</h3>

<p>PayableInterfaceTest (Figure 10.15) illustrates that interface 
Payable can be used to process a set of Invoices and Employees 
polymorphically in a single application. Line 9 declares payableObjects 
and assigns it an array of four Payable variables. Lines 12-13 assign 
the references of Invoice objects to the first two elements of 
payableObjects. Lines 14-17 then assign the references of 
SalariedEmployee objects to the remaining two elements of 
payableObjects. These assignments are allowed because an Invoice is a 
Payable, a SalariedEmployee <em>is an</em> Employee and an Employee <em>is </em>a
 Payable. Lines 23-29 use the enhanced for statement to polymorphically 
process each Payable object in payableObjects, printing the object as a 
String, along with the payment amount due. Note that line 27 invokes 
method toString off a Payable interface reference, even though toString 
is not declared in interface Payable—all references (including those of 
interface types) refer to objects that extend Object and therefore have a
 toString method. (Note that toString also can be invoked implicitly 
here.) Line 28 invokes Payable method getPaymentAmount to obtain the 
payment amount for each object in payableObjects, regardless of the 
actual type of the object. The output reveals that the method calls in 
lines 27-28 invoke the appropriate class's implementation of methods 
toString and getPaymentAmount. For instance, when currentEmployee refers
 to an Invoice during the first iteration of the for loop, class 
Invoice's toString and getPaymentAmount execute.</p>

<h3>Software Engineering Observation 10.10</h3>

<p>All methods of class Object can be called by using a reference of an 
interface type. A reference refers to an object, and all objects inherit
 the methods of class Object.</p>

<div class="pre-action-link" id="premain365011" style="width:100%;display:block;"><span id="prehide365011" onclick="processCodeBlocks.togglePre(365011);">Hide</span>  &nbsp; <span id="preShrink365011" onclick="processCodeBlocks.shrinkExpand(365011);">Shrink</span> <img id="preimg365011" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(365011);">  &nbsp; <span id="copycode365011" onclick="return processCodeBlocks.copyCode(365011);">Copy Code</span></div><pre id="pre365011" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Figure 10.15: PayableInterfaceTest.java</span></em>
<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> Tests interface Payable.</span></em>
<span class="code-digit">3</span>
<span class="code-digit">4</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">class</span></em> PayableInterfaceTest
<span class="code-digit">5</span>   {
<span class="code-digit">6</span>      <em><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span class="code-keyword">void</span></em> main( <span class="code-sdkkeyword">String</span> args[] )
<span class="code-digit">7</span>      {
<span class="code-digit">8</span>         <em><span class="code-comment">//</span><span class="code-comment"> create four-element Payable array</span></em>

<span class="code-digit">9</span>         Payable payableObjects[] = <em><span class="code-keyword">new</span></em> Payable[ <span class="code-digit">4</span> ];
<span class="code-digit">10</span>
<span class="code-digit">11</span>        <em><span class="code-comment">//</span><span class="code-comment"> populate array with objects that implement Payable</span></em>
<span class="code-digit">12</span>        payableObjects[ <span class="code-digit">0</span> ] = <em><span class="code-keyword">new</span></em> Invoice( <span class="code-string">"</span><span class="code-string">01234"</span>, <span class="code-string">"</span><span class="code-string">seat"</span>, <span class="code-digit">2</span>,
                        <span class="code-digit">375</span>.<span class="code-digit">00</span> );
<span class="code-digit">13</span>        payableObjects[ <span class="code-digit">1</span> ] = <em><span class="code-keyword">new</span></em> Invoice( <span class="code-string">"</span><span class="code-string">56789"</span>, <span class="code-string">"</span><span class="code-string">tire"</span>, <span class="code-digit">4</span>, <span class="code-digit">79</span>.<span class="code-digit">95</span> );
<span class="code-digit">14</span>        payableObjects[ <span class="code-digit">2</span> ] =
<span class="code-digit">15</span>           <em><span class="code-keyword">new</span></em> SalariedEmployee( <span class="code-string">"</span><span class="code-string">John"</span>, <span class="code-string">"</span><span class="code-string">Smith"</span>, <span class="code-string">"</span><span class="code-string">111-11-1111"</span>,
                       <span class="code-digit">800</span>.<span class="code-digit">00</span> );
<span class="code-digit">16</span>        payableObjects[ <span class="code-digit">3</span> ] =
<span class="code-digit">17</span>           <em><span class="code-keyword">new</span></em> SalariedEmployee( <span class="code-string">"</span><span class="code-string">Lisa"</span>, <span class="code-string">"</span><span class="code-string">Barnes"</span>, <span class="code-string">"</span><span class="code-string">888-88-8888"</span>,
                       <span class="code-digit">1200</span>.<span class="code-digit">00</span> );
<span class="code-digit">18</span>
<span class="code-digit">19</span>        System.<span class="code-keyword">out</span>.println(
<span class="code-digit">20</span>           <span class="code-string">"</span><span class="code-string">Invoices and Employees processed polymorphically:\n"</span> );
<span class="code-digit">21</span>
<span class="code-digit">22</span>        <em><span class="code-comment">//</span><span class="code-comment"> generically process each element in array payableObjects</span></em>

<span class="code-digit">23</span>        <em><span class="code-keyword">for</span></em> ( Payable currentPayable : payableObjects )
<span class="code-digit">24</span>        {
<span class="code-digit">25</span>           <em><span class="code-comment">//</span><span class="code-comment"> output currentPayable and its appropriate payment amount</span></em>
<span class="code-digit">26</span>           System.<span class="code-keyword">out</span>.printf( <span class="code-string">"</span><span class="code-string">%s \n%s: $%,.2f\n\n"</span>,
<span class="code-digit">27</span>              currentPayable.toString(),
<span class="code-digit">28</span>              <span class="code-string">"</span><span class="code-string">payment due"</span>, currentPayable.getPaymentAmount() );
<span class="code-digit">29</span>        } <em><span class="code-comment">//</span><span class="code-comment"> end for</span></em>
<span class="code-digit">30</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end main</span></em>
<span class="code-digit">31</span>  } <em><span class="code-comment">//</span><span class="code-comment"> end class PayableInterfaceTest</span></em>
</pre>

<h4>OUTPUT</h4>

<div class="pre-action-link" id="premain406198" style="width:100%;display:block;"><span id="prehide406198" onclick="processCodeBlocks.togglePre(406198);">Hide</span>  &nbsp; <span id="copycode406198" onclick="return processCodeBlocks.copyCode(406198);">Copy Code</span></div><pre id="pre406198" style="margin-top: 0px;" class="notranslate">Invoices and Employees processed polymorphically:

invoice:
part number: <span class="code-digit">01234</span> (seat)
quantity: <span class="code-digit">2</span>
price per item: $375.<span class="code-digit">00</span>
payment due: $750.<span class="code-digit">00</span>

invoice:
part number: <span class="code-digit">56789</span> (tire)
quantity: <span class="code-digit">4</span>
price per item: $79.<span class="code-digit">95</span>
payment due: $319.<span class="code-digit">80</span>

salaried employee: John Smith
social security number: 111-11-1111
weekly salary: $800.<span class="code-digit">00</span>
payment due: $800.<span class="code-digit">00</span>

salaried employee: Lisa Barnes
social security number: 888-88-8888
weekly salary: $1,<span class="code-digit">200</span>.<span class="code-digit">00</span>
payment due: $1,<span class="code-digit">200</span>.<span class="code-digit">00</span></pre>

<div class="Caption">Figure 10.15 Payable interface test program processing Invoices and Employees polymorphically. </div>

<h3>10.7.7 Declaring Constants with Interfaces</h3>

<p>As we mentioned an interface can declare constants. The constants are
 implicitly public, static and final—again, these keywords are not 
required in the interface declaration. One popular use of an interface 
is to declare a set of constants that can be used in many class 
declarations. Consider interface Constants:</p>

<div class="pre-action-link" id="premain600360" style="width:100%;display:block;"><span id="prehide600360" onclick="processCodeBlocks.togglePre(600360);">Hide</span>  &nbsp; <span id="copycode600360" onclick="return processCodeBlocks.copyCode(600360);">Copy Code</span></div><pre id="pre600360" style="margin-top: 0px;" class="notranslate"><em><span class="code-keyword">public</span> <span class="code-keyword">interface</span></em> Constants
  {
    <em><span class="code-keyword">int</span></em> ONE = <span class="code-digit">1</span>;
    <em><span class="code-keyword">int</span></em> TWO = <span class="code-digit">2</span>;
    <em><span class="code-keyword">int</span></em> THREE = <span class="code-digit">3</span>;
  }</pre>

<p>A class can use these constants by importing the interface, then 
referring to each constant as Constants.ONE, Constants.TWO and 
Constants.THREE. Note that a class can refer to the imported constants 
with just their names (i.e., ONE, TWO and THREE) if it uses a static 
import declaration (presented in Section 8.12) to import the interface.</p>

<h3>Software Engineering Observation 10.11</h3>

<p>As of Java SE 5.0, it became a better programming practice to create 
sets of constants as enumerations with keyword enum. See Section 6.10 
for an introduction to enum and Section 8.9 for additional enum details.</p>

<h3>10.7.8 Common Interfaces of the Java API</h3>

<p>In this section, we overview several common interfaces found in the 
Java API. The power and flexibility of interfaces is used frequently 
throughout the Java API. These interfaces are implemented and used in 
the same manner as the interfaces you create (e.g., interface Payable in
 Section 10.7.2). As you'll see throughout this book, the Java API's 
interfaces enable you to use your own classes within the frameworks 
provided by Java, such as comparing objects of your own types and 
creating tasks that can execute concurrently with other tasks in the 
same program. Figure 10.16 presents a brief overview of a few of the 
more popular interfaces of the Java API.</p>

<table class="ArticleTable" width="100%">
<thead>
<tr valign="top">
<td>
<p>Interface</p>
</td>

<td>
<p>Description</p>
</td>
</tr>
</thead>

<tbody>
<tr valign="top">
<td>Comparable </td>

<td>
<p>As you learned in Chapter 2, Java contains several comparison 
operators (e.g., &lt;, &lt;=, &gt;, &gt;=, ==, !=) that allow you to 
compare primitive values. However, these operators cannot be used to 
compare the contents of objects. Interface Comparable is used to allow 
objects of a class that implements the interface to be compared to one 
another. The interface contains one method, compareTo, that compares the
 object that calls the method to the object passed as an argument to the
 method. Classes must implement compareTo such that it returns a value 
indicating whether the object on which it is invoked is less than 
(negative integer return value), equal to (0 return value) or greater 
than (positive integer return value) the object passed as an argument, 
using any criteria specified by the programmer. For example, if class 
Employee implements Comparable, its compareTo method could compare 
Employee objects by their earnings amounts. Interface Comparable is 
commonly used for ordering objects in a collection such as an array. We 
use Comparable in Chapter 15, Generics, and Chapter 16, Collections.</p>
</td>
</tr>

<tr valign="top">
<td>Serializable </td>

<td>
<p>An interface used to identify classes whose objects can be written to
 (i.e., serialized) or read from (i.e., deserialized) some type of 
storage (e.g., file on disk, database field) or transmitted across a 
network. We use Serializable in Chapter 14, Files and Streams, and 
Chapter 19, Networking.</p>
</td>
</tr>

<tr valign="top">
<td>Runnable</td>

<td>
<p>Implemented by any class for which objects of that class should be 
able to execute in parallel using a technique called multithreading 
(discussed in Chapter 18, Multithreading). The interface contains one 
method, run, which describes the behavior of an object when executed.</p>
</td>
</tr>

<tr valign="top">
<td>GUI event-listener interfaces </td>

<td>
<p>You work with graphical user interfaces (GUIs) every day. For 
example, in your web browser, you might type in a text field the address
 of a website to visit, or you might click a button to return to the 
previous site you visited. When you type a website address or click a 
button in the web browser, the browser must respond to your interaction 
and perform the desired task for you. Your interaction is known as an 
event, and the code that the browser uses to respond to an event is 
known as an event handler. In Chapter 11, GUI Components: Part 1, and 
Chapter 17, GUI Components: Part 2, you'll learn how to build Java GUIs 
and how to build event handlers to respond to user interactions. The 
event handlers are declared in classes that implement an appropriate 
event-listener interface. Each event-listener interface specifies one or
 more methods that must be implemented to respond to user interactions.</p>
</td>
</tr>

<tr valign="top">
<td>SwingConstants </td>

<td>
<p>Contains constants used in GUI programming to position GUI elements 
on the screen. We explore GUI programming in Chapters 11 and 17.</p>
</td>
</tr>
</tbody>
</table>

<div class="Caption">Figure 10.16 Common interfaces of the Java API. </div>

<h2>10.8 (Optional) Software Engineering Case Study: Incorporating Inheritance into the ATM System</h2>

<p>We now revisit our ATM system design to see how it might benefit from
 inheritance. To apply inheritance, we first look for commonality among 
classes in the system. We create an inheritance hierarchy to model 
similar (yet not identical) classes in a more elegant and efficient 
manner. We then modify our class diagram to incorporate the new 
inheritance relationships. Finally, we demonstrate how our updated 
design is translated into Java code.</p>

<p>In Section 3.9, we encountered the problem of representing a 
financial transaction in the system. Rather than create one class to 
represent all transaction types, we decided to create three individual 
transaction classes—BalanceInquiry, Withdrawal and Deposit—to represent 
the transactions that the ATM system can perform. <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig17.jpg">Figure 10.17</a>
 shows the attributes and operations of classes BalanceInquiry, 
Withdrawal and Deposit. Note that these classes have one attribute 
(accountNumber) and one operation (execute) in common. Each class 
requires attribute accountNumber to specify the account to which the 
transaction applies. Each class contains operation execute, which the 
ATM invokes to perform the transaction. Clearly, BalanceInquiry, 
Withdrawal and Deposit represent <em>types of</em> transactions. <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig17.jpg">Figure 10.17</a>
 reveals commonality among the transaction classes, so using inheritance
 to factor out the common features seems appropriate for designing 
classes BalanceInquiry, Withdrawal and Deposit. We place the common 
functionality in a superclass, Transaction, that classes BalanceInquiry,
 Withdrawal and Deposit extend. </p>
<img alt="10fig17.jpg" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/10fig17.jpg" width="640" height="268"> 
<div class="Caption">Figure 10.17 Attributes and operations of classes BalanceInquiry, Withdrawal and Deposit. </div>

<p>The UML specifies a relationship called a generalization to model inheritance. <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig18.jpg">Figure 10.18</a>
 is the class diagram that models the generalization of superclass 
Transaction and subclasses BalanceInquiry, Withdrawal and Deposit. The 
arrows with triangular hollow arrowheads indicate that classes 
BalanceInquiry, Withdrawal and Deposit extend class Transaction. Class 
Transaction is said to be a generalization of classes BalanceInquiry, 
Withdrawal and Deposit. Class BalanceInquiry, Withdrawal and Deposit are
 said to be specializations of class Transaction.</p>

<p>Classes BalanceInquiry, Withdrawal and Deposit share integer 
attribute accountNumber, so we factor out this common attribute and 
place it in superclass Transaction. We no longer list accountNumber in 
the second compartment of each subclass, because the three subclasses 
inherit this attribute from Transaction. Recall, however, that 
subclasses cannot access private attributes of a superclass. We 
therefore include public method getAccountNumber in class Transaction. 
Each subclass will inherit this method, enabling the subclass to access 
its accountNumber as needed to execute a transaction.</p>

<p>According to <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig17.jpg">Figure 10.17</a>,
 classes BalanceInquiry, Withdrawal and Deposit also share operation 
execute, so we decided that superclass Transaction should contain public
 method execute. However, it does not make sense to implement execute in
 class Transaction, because the functionality that this method provides 
depends on the type of the actual transaction. We therefore declare 
method execute as abstract in superclass Transaction. Any class that 
contains at least one abstract method must also be declared abstract. 
This forces any subclass of Transaction that must be a concrete class 
(i.e., BalanceInquiry, Withdrawal and Deposit) to implement method 
execute. The UML requires that we place abstract class names (and 
abstract methods) in italics, so Transaction and its method execute 
appear in italics in <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig18.jpg">Figure 10.18</a>.
 Note that method execute is not italicized in subclasses 
BalanceInquiry, Withdrawal and Deposit. Each subclass overrides 
superclass Transaction's execute method with a concrete implementation 
that performs the steps appropriate for completing that type of 
transaction. Note that <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig18.jpg">Figure 10.18</a>
 includes operation execute in the third compartment of classes 
BalanceInquiry, Withdrawal and Deposit, because each class has a 
different concrete implementation of the overridden method.</p>

<p>Incorporating inheritance provides the ATM with an elegant way to 
execute all transactions "in the general." For example, suppose a user 
chooses to perform a balance inquiry. The ATM sets a Transaction 
reference to a new object of class BalanceInquiry. When the ATM uses its
 Transaction reference to invoke method execute, BalanceInquiry's 
version of execute is called. </p>

<p>This polymorphic approach also makes the system easily extensible. 
Should we wish to create a new transaction type (e.g., funds transfer or
 bill payment), we would just create an additional Transaction subclass 
that overrides the execute method with a version of the method 
appropriate for executing the new transaction type. We would need to 
make only minimal changes to the system code to allow users to choose 
the new transaction type from the main menu and for the ATM to 
instantiate and execute objects of the new subclass. The ATM could 
execute transactions of the new type using the current code, because it 
executes all transactions polymorphically using a general Transaction 
reference.</p>
<img alt="10fig18.jpg" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/10fig18.jpg" width="640" height="296"> 
<div class="Caption">Figure 10.18 Class diagram modeling generalization 
of superclass Transaction and subclasses BalanceInquiry, Withdrawal and 
Deposit. Note that abstract class names (e.g., Transaction) and method 
names (e.g., execute in class Transaction) appear in italics. </div>

<p>An abstract class like Transaction is one for which the programmer 
never intends to instantiate objects. An abstract class simply declares 
common attributes and behaviors of its subclasses in an inheritance 
hierarchy. Class Transaction defines the concept of what it means to be a
 transaction that has an account number and executes. You may wonder why
 we bother to include abstract method execute in class Transaction if it
 lacks a concrete implementation. Conceptually, we include this method 
because it corresponds to the defining behavior of all 
transactions—executing. Technically, we must include method execute in 
superclass Transaction so that the ATM (or any other class) can 
polymorphically invoke each subclass's overridden version of this method
 through a Transaction reference. Also, from a software engineering 
perspective, including an abstract method in a superclass forces the 
implementor of the subclasses to override that method with concrete 
implementations in the subclasses, or else the subclasses, too, will be 
abstract, preventing objects of those subclasses from being 
instantiated.</p>

<p>Subclasses BalanceInquiry, Withdrawal and Deposit inherit attribute 
accountNumber from superclass Transaction, but classes Withdrawal and 
Deposit contain the additional attribute amount that distinguishes them 
from class BalanceInquiry. Classes Withdrawal and Deposit require this 
additional attribute to store the amount of money that the user wishes 
to withdraw or deposit. Class BalanceInquiry has no need for such an 
attribute and requires only an account number to execute. Even though 
two of the three Transaction subclasses share this attribute, we do not 
place it in superclass Transaction—we place only features common to all 
the subclasses in the superclass, otherwise subclasses could inherit 
attributes (and methods) that they do not need and should not have.</p>

<p><a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig19.jpg">Figure 10.19</a>
 presents an updated class diagram of our model that incorporates 
inheritance and introduces class Transaction. We model an association 
between class ATM and class Transaction to show that the ATM, at any 
given moment is either executing a transaction or it is not (i.e., zero 
or one objects of type Transaction exist in the system at a time). 
Because a Withdrawal is a type of Transaction, we no longer draw an 
association line directly between class ATM and class Withdrawal. 
Subclass Withdrawal inherits superclass Transaction's association with 
class ATM. Subclasses BalanceInquiry and Deposit inherit this 
association, too, so the previously omitted associations between ATM and
 classes BalanceInquiry and Deposit no longer exist either.</p>
<img alt="10fig19.jpg" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/10fig19.jpg" width="640" height="531"> 
<div class="Caption">Figure 10.19 Class diagram of the ATM system 
(incorporating inheritance). Note that abstract class names (e.g., 
Transaction) appear in italics. </div>

<p>We also add an association between class Transaction and the BankDatabase (<a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig19.jpg">Figure 10.19</a>).
 All Transactions require a reference to the BankDatabase so they can 
access and modify account information. Because each Transaction subclass
 inherits this reference, we no longer model the association between 
class Withdrawal and the BankDatabase. Similarly, the previously omitted
 associations between the BankDatabase and classes BalanceInquiry and 
Deposit no longer exist. </p>

<p>We show an association between class Transaction and the Screen. All 
Transactions display output to the user via the Screen. Thus, we no 
longer include the association previously modeled between Withdrawal and
 the Screen, although Withdrawal still participates in associations with
 the CashDispenser and the Keypad. Our class diagram incorporating 
inheritance also models Deposit and BalanceInquiry. We show associations
 between Deposit and both the DepositSlot and the Keypad. Note that 
class BalanceInquiry takes part in no associations other than those 
inherited from class Transaction—a BalanceInquiry needs to interact only
 with the BankDatabase and with the Screen.</p>

<p>The class diagram of Figure 8.21 showed attributes and operations 
with visibility markers. Now we present a modified class diagram that 
incorporates inheritance in <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig20.jpg">Figure 10.20</a>.
 This abbreviated diagram does not show inheritance relationships, but 
instead shows the attributes and methods after we have employed 
inheritance in our system. To save space, as we did in Figure 4.16, we 
do not include those attributes shown by associations in <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig19.jpg">Figure 10.19</a>—we
 do, however, include them in the Java implementation in Appendix H. We 
also omit all operation parameters, as we did in Figure 
8.21—incorporating inheritance does not affect the parameters already 
modeled in Figs. 6.27-6.30.</p>
<img alt="10fig20.jpg" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/10fig20.jpg" width="640" height="886"> 
<div class="Caption">Figure 10.20 Class diagram with attributes and 
operations (incorporating inheritance). Note that abstract class names 
(e.g., Transaction) and method names (e.g., execute in class 
Transaction) appear in italics. </div>

<h3>Software Engineering Observation 10.12</h3>

<p>A complete class diagram shows all the associations among classes and
 all the attributes and operations for each class. When the number of 
class attributes, methods and associations is substantial, a good 
practice that promotes readability is to divide this information between
 two class diagrams—one focusing on associations and the other on 
attributes and methods.</p>

<h4>Implementing the ATM System Design (Incorporating Inheritance)</h4>

<p>In Section 8.18, we began implementing the ATM system design. We now 
modify our implementation to incorporate inheritance, using class 
Withdrawal as an example.</p>

<ol>
<li>If a class A is a generalization of class B, then class B extends 
class A in the class declaration. For example, abstract superclass 
Transaction is a generalization of class Withdrawal. Figure 10.21 
contains the shell of class Withdrawal containing the appropriate class 
declaration. </li>

<li>If class A is an abstract class and class B is a subclass of class 
A, then class B must implement the abstract methods of class A if class B
 is to be a concrete class. For example, class Transaction contains 
abstract method execute, so class Withdrawal must implement this method 
if we want to instantiate a Withdrawal object. Figure 10.22 is the Java 
code for class Withdrawal from <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig19.jpg">Figure 10.19</a>
 and Figure 10.20. Class Withdrawal inherits field accountNumber from 
superclass Transaction, so Withdrawal does not need to declare this 
field. Class Withdrawal also inherits references to the Screen and the 
BankDatabase from its superclass Transaction, so we do not include these
 references in our code. <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig20.jpg">Figure 10.20</a>
 specifies attribute amount and operation execute for class Withdrawal. 
Line 6 of Figure 10.22 declares a field for attribute amount. Lines 
16-18 declare the shell of a method for operation execute. Recall that 
subclass Withdrawal must provide a concrete implementation of the 
abstract method execute in superclass Transaction. The keypad and 
cashDispenser references (lines 7-8) are fields derived from 
Withdrawal's associations in <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig19.jpg">Figure 10.19</a>. [Note: The constructor in the complete working version of this class will initialize these references to actual objects.] </li>
</ol>

<div class="pre-action-link" id="premain223" style="width:100%;display:block;"><span id="prehide223" onclick="processCodeBlocks.togglePre(223);">Hide</span>  &nbsp; <span id="copycode223" onclick="return processCodeBlocks.copyCode(223);">Copy Code</span></div><pre id="pre223" style="margin-top: 0px;" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Class Withdrawal represents an ATM withdrawal transaction</span></em>
<span class="code-digit">2</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">class</span></em> Withdrawal <em>extends</em> Transaction
<span class="code-digit">3</span>   {
<span class="code-digit">4</span>   } <em><span class="code-comment">//</span><span class="code-comment"> end class Withdrawal</span></em>
</pre>

<div class="Caption">Figure 10.21 Java code for shell of class Withdrawal. </div>

<div class="pre-action-link" id="premain927679" style="width:100%;display:block;"><span id="prehide927679" onclick="processCodeBlocks.togglePre(927679);">Hide</span>  &nbsp; <span id="copycode927679" onclick="return processCodeBlocks.copyCode(927679);">Copy Code</span></div><pre id="pre927679" style="margin-top: 0px;" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Withdrawal.java</span></em>
<span class="code-digit">2</span>   <em><span class="code-comment">//</span><span class="code-comment"> Generated using the class diagrams in Figure 10.21 and Figure 10.22</span></em>
<span class="code-digit">3</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">class</span></em> Withdrawal <strong>extends</strong> Transaction
<span class="code-digit">4</span>   {
<span class="code-digit">5</span>      <em><span class="code-comment">//</span><span class="code-comment"> attributes</span></em>

<span class="code-digit">6</span>      <em><span class="code-keyword">private</span> <span class="code-keyword">double</span></em> amount; <em><span class="code-comment">//</span><span class="code-comment"> amount to withdraw</span></em>
<span class="code-digit">7</span>      <em><span class="code-keyword">private</span></em> Keypad keypad; <em><span class="code-comment">//</span><span class="code-comment"> reference to keypad</span></em>
<span class="code-digit">8</span>      <em><span class="code-keyword">private</span></em> CashDispenser cashDispenser; <em><span class="code-comment">//</span><span class="code-comment"> reference to cash dispenser</span></em>

<span class="code-digit">9</span>
<span class="code-digit">10</span>     <em><span class="code-comment">//</span><span class="code-comment"> no-argument constructor</span></em>
<span class="code-digit">11</span>     <em><span class="code-keyword">public</span></em> Withdrawal()
<span class="code-digit">12</span>     {
<span class="code-digit">13</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end no-argument Withdrawal constructor</span></em>
<span class="code-digit">14</span>
<span class="code-digit">15</span>     <em><span class="code-comment">//</span><span class="code-comment"> method overriding execute</span></em>
<span class="code-digit">16</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">void</span></em> execute()
<span class="code-digit">17</span>     {
<span class="code-digit">18</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method execute</span></em>

<span class="code-digit">19</span>  } <em><span class="code-comment">//</span><span class="code-comment"> end class Withdrawal</span></em>
</pre>

<div class="Caption">Figure 10.22 Java code for class Withdrawal based on <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig19.jpg">Figs. 10.19</a> and <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig20.jpg">10.20</a>. </div>

<h3>Software Engineering Observation 10.13</h3>

<p>Several UML modeling tools convert UML-based designs into Java code 
and can speed the implementation process considerably. For more 
information on these tools, refer to the web resources listed at the end
 of Section 2.8.</p>

<p>Congratulations on completing the design portion of the case study! 
We completely implement the ATM system in 670 lines of Java code in 
Appendix H. We recommend that you carefully read the code and its 
description. The code is abundantly commented and precisely follows the 
design with which you are now familiar. The accompanying description is 
carefully written to guide your understanding of the implementation 
based on the UML design. Mastering this code is a wonderful culminating 
accomplishment after studying Chapters 1-8.</p>

<h4>Software Engineering Case Study Self-Review Exercises</h4>

<p><strong>10.1</strong> The UML uses an arrow with a __________________ to indicate a generalization relationship.</p>

<ol>
<li>solid filled arrowhead </li>

<li>triangular hollow arrowhead </li>

<li>diamond-shaped hollow arrowhead </li>

<li>stick arrowhead </li>
</ol>

<p><strong>10.2</strong> State whether the following statement is true 
or false, and if false, explain why: The UML requires that we underline 
abstract class names and method names.</p>

<p><strong>10.3</strong> Write Java code to begin implementing the design for class Transaction specified in <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig19.jpg">Figs. 10.19</a> and <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig20.jpg">10.20</a>.
 Be sure to include private reference-type attributes based on class 
Transaction's associations. Also be sure to include public get methods 
that provide access to any of these private attributes that the 
subclasses require to perform their tasks.</p>

<h4>Answers to Software Engineering Case Study Self-Review Exercises</h4>

<p><strong>10.1</strong> b. </p>

<p><strong>10.2</strong> False. The UML requires that we italicize abstract class names and method names.</p>

<p><strong>10.3</strong> The design for class Transaction yields the 
code in Figure 10.23. The bodies of the class constructor and methods 
will be completed in Appendix H. When fully implemented, methods 
getScreen and getBankDatabase will return superclass Transaction's 
private reference attributes screen and bankDatabase, respectively. 
These methods allow the Transaction subclasses to access the ATM's 
screen and interact with the bank's database.</p>

<div class="pre-action-link" id="premain821730" style="width:100%;display:block;"><span id="prehide821730" onclick="processCodeBlocks.togglePre(821730);">Hide</span>  &nbsp; <span id="preShrink821730" onclick="processCodeBlocks.shrinkExpand(821730);">Shrink</span> <img id="preimg821730" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/arrow-up-16.png" style="height:16px;width:16px" onclick="processCodeBlocks.shrinkExpand(821730);">  &nbsp; <span id="copycode821730" onclick="return processCodeBlocks.copyCode(821730);">Copy Code</span></div><pre id="pre821730" style="margin-top: 0px;" processed="true" class="notranslate"><span class="code-digit">1</span>   <em><span class="code-comment">//</span><span class="code-comment"> Abstract class Transaction represents an ATM transaction</span></em>

<span class="code-digit">2</span>   <em><span class="code-keyword">public</span> <span class="code-keyword">abstract</span> <span class="code-keyword">class</span></em> Transaction
<span class="code-digit">3</span>   {
<span class="code-digit">4</span>      <em><span class="code-comment">//</span><span class="code-comment"> attributes</span></em>
<span class="code-digit">5</span>      <em><span class="code-keyword">private</span> <span class="code-keyword">int</span></em> accountNumber; <em><span class="code-comment">//</span><span class="code-comment"> indicates account involved</span></em>
<span class="code-digit">6</span>      <em><span class="code-keyword">private</span></em> Screen screen; <em><span class="code-comment">//</span><span class="code-comment"> ATM's screen</span></em>

<span class="code-digit">7</span>      <em><span class="code-keyword">private</span></em> BankDatabase bankDatabase; <span class="code-comment">//</span><span class="code-comment"> account info database
</span><span class="code-digit">8</span>
<span class="code-digit">9</span>      <em><span class="code-comment">//</span><span class="code-comment"> no-argument constructor invoked by subclasses using super()</span></em>
<span class="code-digit">10</span>     <em><span class="code-keyword">public</span></em> Transaction()
<span class="code-digit">11</span>     {
<span class="code-digit">12</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end no-argument Transaction constructor</span></em>
<span class="code-digit">13</span>
<span class="code-digit">14</span>     <em><span class="code-comment">//</span><span class="code-comment"> return account number</span></em>

<span class="code-digit">15</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">int</span></em> getAccountNumber()
<span class="code-digit">16</span>     {
<span class="code-digit">17</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getAccountNumber</span></em>
<span class="code-digit">18</span>
<span class="code-digit">19</span>     <em><span class="code-comment">//</span><span class="code-comment"> return reference to screen</span></em>
<span class="code-digit">20</span>     <em><span class="code-keyword">public</span></em> Screen getScreen()
<span class="code-digit">21</span>     {
<span class="code-digit">22</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getScreen</span></em>

<span class="code-digit">23</span>
<span class="code-digit">24</span>     <em><span class="code-comment">//</span><span class="code-comment"> return reference to bank database</span></em>
<span class="code-digit">25</span>     <em><span class="code-keyword">public</span></em> BankDatabase getBankDatabase()
<span class="code-digit">26</span>     {
<span class="code-digit">27</span>     } <em><span class="code-comment">//</span><span class="code-comment"> end method getBankDatabase</span></em>
<span class="code-digit">28</span>
<span class="code-digit">29</span>     <em><span class="code-comment">//</span><span class="code-comment"> abstract method overridden by subclasses</span></em>
<span class="code-digit">30</span>     <em><span class="code-keyword">public</span> <span class="code-keyword">abstract</span> <span class="code-keyword">void</span></em> execute();
<span class="code-digit">31</span>  } <em><span class="code-comment">//</span><span class="code-comment"> end class Transaction</span></em>
</pre>

<div class="Caption">Figure 10.23 Java code for class Transaction based on <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig19.jpg">Figs. 10.19</a> and <a href="http://www.codeproject.com/KB/books/OOP_Polymorphism/10fig20.jpg">10.20</a>. </div>

<h2>10.9 Wrap-Up</h2>

<p>This chapter introduced polymorphism—the ability to process objects 
that share the same superclass in a class hierarchy as if they are all 
objects of the superclass. The chapter discussed how polymorphism makes 
systems extensible and maintainable, then demonstrated how to use 
overridden methods to effect polymorphic behavior. We introduced 
abstract classes, which allow programmers to provide an appropriate 
superclass from which other classes can inherit. You learned that an 
abstract class can declare abstract methods that each subclass must 
implement to become a concrete class and that a program can use 
variables of an abstract class to invoke the subclasses' implementations
 of abstract methods polymorphically. You also learned how to determine 
an object's type at execution time. Finally, the chapter discussed 
declaring and implementing an interface as another way to achieve 
polymorphic behavior.</p>

<p>You should now be familiar with classes, objects, encapsulation, 
inheritance, interfaces and polymorphism—the most essential aspects of 
object-oriented programming. In the next chapter, we take a deeper look 
at graphical user interfaces (GUIs).</p>


						</div>
						

						<div class="float-right" style="margin:20px 0 0 10px;border:1px solid #ccc">
						<div class="msg-300x250" data-format="300x250" data-type="ad" data-publisher="lqm.codeproject.site" data-zone="General-Reading/Book-Chapters/Prentice-Hall" data-loadonview="true" data-tags="C#,rating4.5"><noscript><a href="http://pubads.g.doubleclick.net/gampad/jump?iu=/6839/lqm.codeproject.site/General-Reading/Book-Chapters/Prentice-Hall&sz=300x250&c=7105"><img src="http://pubads.g.doubleclick.net/gampad/ad?iu=/6839/lqm.codeproject.site/General-Reading/Book-Chapters/Prentice-Hall&sz=300x250&c=7105"  width="300px" height="250px" target="_blank"/></a></noscript></div>
						</div>
                        
                        
						
						<h2>License</h2>
						<div id="LicenseTerms"><p>This article, along with any associated source code and files, is licensed under <a href="http://www.codeproject.com/info/cpol10.aspx" rel="license">The Code Project Open License (CPOL)</a></p></div>
						

                        
						<h2>Share</h2>
				        <div class="share-list">
					        



<!-- Buttons start here. Copy this ul to your document. -->
<ul class="rrssb-buttons clearfix rrssb-1">
    <li class="email" style="width: calc(25% - 21px);" data-initwidth="16.666666666666668" data-size="32">

        <a href="mailto:?subject=Chapter%2010%3a%20Object-Oriented%20Programming%3a%20Polymorphism%20-%20CodeProject&amp;body=Here%27s%20an%20interesting%20article%20on%20for%20you%20on%20codeproject.com%0a%0ahttp%3a%2f%2fwww.codeproject.com%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis%0a">
            <span class="icon">
                <svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve"><g>
                        <path d="M20.111 26.147c-2.336 1.051-4.361 1.401-7.125 1.401c-6.462 0-12.146-4.633-12.146-12.265 
                            c0-7.94 5.762-14.833 14.561-14.833c6.853 0 11.8 4.7 11.8 11.252c0 5.684-3.194 9.265-7.399 
                            9.3 c-1.829 0-3.153-0.934-3.347-2.997h-0.077c-1.208 1.986-2.96 2.997-5.023 2.997c-2.532 
                            0-4.361-1.868-4.361-5.062 c0-4.749 3.504-9.071 9.111-9.071c1.713 0 3.7 0.4 4.6 0.973l-1.169 
                            7.203c-0.388 2.298-0.116 3.3 1 3.4 c1.673 0 3.773-2.102 3.773-6.58c0-5.061-3.27-8.994-9.303-8.994c-5.957 
                            0-11.175 4.673-11.175 12.1 c0 6.5 4.2 10.2 10 10.201c1.986 0 4.089-0.43 5.646-1.245L20.111 
                            26.147z M16.646 10.1 c-0.311-0.078-0.701-0.155-1.207-0.155c-2.571 0-4.595 2.53-4.595 5.529c0 
                            1.5 0.7 2.4 1.9 2.4 c1.441 0 2.959-1.828 3.311-4.087L16.646 10.068z"></path></g>
                </svg>
            </span>
            <span class="text">email</span>
        </a>
    </li>
    <li class="twitter" style="width: calc(25% - 21px);" data-initwidth="16.666666666666668" data-size="47">
        <!-- Replace href with your Meta and URL information  -->
        <a href="http://twitter.com/home?status=Chapter+10%3a+Object-Oriented+Programming%3a+Polymorphism+-+CodeProject+-+http%3a%2f%2fwww.codeproject.com%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis" class="popup">
            <span class="icon">
                <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve">
                <path d="M24.253,8.756C24.689,17.08,18.297,24.182,9.97,24.62c-3.122,0.162-6.219-0.646-8.861-2.32
                    c2.703,0.179,5.376-0.648,7.508-2.321c-2.072-0.247-3.818-1.661-4.489-3.638c0.801,0.128,1.62,0.076,2.399-0.155
                    C4.045,15.72,2.215,13.6,2.115,11.077c0.688,0.275,1.426,0.407,2.168,0.386c-2.135-1.65-2.729-4.621-1.394-6.965
                    C5.575,7.816,9.54,9.84,13.803,10.071c-0.842-2.739,0.694-5.64,3.434-6.482c2.018-0.623,4.212,0.044,5.546,1.683
                    c1.186-0.213,2.318-0.662,3.329-1.317c-0.385,1.256-1.247,2.312-2.399,2.942c1.048-0.106,2.069-0.394,3.019-0.851
                    C26.275,7.229,25.39,8.196,24.253,8.756z"></path>
                </svg>
            </span>
            <span class="text">twitter</span>
        </a>
    </li>

    <li class="facebook" style="width: calc(25% - 21px);" data-initwidth="16.666666666666668" data-size="55">
        <!-- Replace with your URL. For best results, make sure you page has the proper FB Open Graph tags in header: 
        https://developers.facebook.com/docs/opengraph/howtos/maximizing-distribution-media-content/ -->
        <a href="https://www.facebook.com/sharer/sharer.php?u=http%3a%2f%2fwww.codeproject.com%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis" class="popup">
            <span class="icon">
                <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve">
                    <path d="M27.825,4.783c0-2.427-2.182-4.608-4.608-4.608H4.783c-2.422,0-4.608,2.182-4.608,4.608v18.434
                        c0,2.427,2.181,4.608,4.608,4.608H14V17.379h-3.379v-4.608H14v-1.795c0-3.089,2.335-5.885,5.192-5.885h3.718v4.608h-3.726
                        c-0.408,0-0.884,0.492-0.884,1.236v1.836h4.609v4.608h-4.609v10.446h4.916c2.422,0,4.608-2.188,4.608-4.608V4.783z"></path>
                </svg>
            </span>
            <span class="text">facebook</span>
        </a>
    </li>
    
    <li class="linkedin" style="width: calc(25% - 21px);" data-initwidth="16.666666666666668" data-size="50">
        <!-- Replace href with your meta and URL information -->
        <a href="http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3a%2f%2fwww.codeproject.com%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis&amp;title=Chapter+10%3a+Object-Oriented+Programming%3a+Polymorphism+-+CodeProject&amp;summary=&amp;source=codeproject.com" class="popup">
            <span class="icon">
                <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve">
                    <path d="M25.424,15.887v8.447h-4.896v-7.882c0-1.979-0.709-3.331-2.48-3.331c-1.354,0-2.158,0.911-2.514,1.803
                        c-0.129,0.315-0.162,0.753-0.162,1.194v8.216h-4.899c0,0,0.066-13.349,0-14.731h4.899v2.088c-0.01,0.016-0.023,0.032-0.033,0.048
                        h0.033V11.69c0.65-1.002,1.812-2.435,4.414-2.435C23.008,9.254,25.424,11.361,25.424,15.887z M5.348,2.501
                        c-1.676,0-2.772,1.092-2.772,2.539c0,1.421,1.066,2.538,2.717,2.546h0.032c1.709,0,2.771-1.132,2.771-2.546
                        C8.054,3.593,7.019,2.501,5.343,2.501H5.348z M2.867,24.334h4.897V9.603H2.867V24.334z"></path>
                </svg>
            </span>
            <span class="text">linkedin</span>
        </a>
    </li>
    <li class="reddit small" style="width: 42px;" data-initwidth="16.666666666666668" data-size="39">
        <a href="http://www.reddit.com/submit?url=http%3a%2f%2fwww.codeproject.com%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis&amp;title=Chapter+10%3a+Object-Oriented+Programming%3a+Polymorphism+-+CodeProject">
            <span class="icon">
                <svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve"><g>
                <path d="M11.794 15.316c0-1.029-0.835-1.895-1.866-1.895c-1.03 0-1.893 0.865-1.893 1.895s0.863 1.9 1.9 1.9 C10.958 17.2 11.8 16.3 11.8 15.316z"></path>
                <path d="M18.1 13.422c-1.029 0-1.895 0.864-1.895 1.895c0 1 0.9 1.9 1.9 1.865c1.031 0 1.869-0.836 1.869-1.865 C19.969 14.3 19.1 13.4 18.1 13.422z"></path>
                <path d="M17.527 19.791c-0.678 0.678-1.826 1.006-3.514 1.006c-0.004 0-0.009 0-0.014 0c-0.004 0-0.01 0-0.015 0 
                c-1.686 0-2.834-0.328-3.51-1.005c-0.264-0.265-0.693-0.265-0.958 0c-0.264 0.265-0.264 0.7 0 1 c0.943 0.9 2.4 1.4 
                4.5 1.402c0.005 0 0 0 0 0c0.005 0 0 0 0 0c2.066 0 3.527-0.459 4.47-1.402 c0.265-0.264 0.265-0.693 0.002-0.958C18.221 
                19.5 17.8 19.5 17.5 19.791z"></path><path d="M27.707 13.267c0-1.785-1.453-3.237-3.236-3.237c-0.793 0-1.518 0.287-2.082 
                0.761c-2.039-1.295-4.646-2.069-7.438-2.219 l1.483-4.691l4.062 0.956c0.071 1.4 1.3 2.6 2.7 2.555c1.488 0 2.695-1.208 
                2.695-2.695C25.881 3.2 24.7 2 23.2 2 c-1.059 0-1.979 0.616-2.42 1.508l-4.633-1.091c-0.344-0.081-0.693 0.118-0.803 
                0.455l-1.793 5.7 C10.548 8.6 7.7 9.4 5.6 10.75C5.006 10.3 4.3 10 3.5 10.029c-1.785 0-3.237 1.452-3.237 3.2 c0 1.1 0.6 
                2.1 1.4 2.69c-0.04 0.272-0.061 0.551-0.061 0.831c0 2.3 1.3 4.4 3.7 5.9 c2.299 1.5 5.3 2.3 8.6 2.325c3.228 0 6.271-0.825 
                8.571-2.325c2.387-1.56 3.7-3.66 3.7-5.917 c0-0.26-0.016-0.514-0.051-0.768C27.088 15.5 27.7 14.4 27.7 13.267z M23.186 
                3.355c0.74 0 1.3 0.6 1.3 1.3 c0 0.738-0.6 1.34-1.34 1.34s-1.342-0.602-1.342-1.34C21.844 4 22.4 3.4 23.2 3.355z M1.648 
                13.3 c0-1.038 0.844-1.882 1.882-1.882c0.31 0 0.6 0.1 0.9 0.209c-1.049 0.868-1.813 1.861-2.26 2.9 C1.832 14.2 1.6 13.8 1.6 
                13.267z M21.773 21.57c-2.082 1.357-4.863 2.105-7.831 2.105c-2.967 0-5.747-0.748-7.828-2.105 
                c-1.991-1.301-3.088-3-3.088-4.782c0-1.784 1.097-3.484 3.088-4.784c2.081-1.358 4.861-2.106 7.828-2.106 c2.967 0 5.7 
                0.7 7.8 2.106c1.99 1.3 3.1 3 3.1 4.784C24.859 18.6 23.8 20.3 21.8 21.57z M25.787 14.6 
                c-0.432-1.084-1.191-2.095-2.244-2.977c0.273-0.156 0.59-0.245 0.928-0.245c1.035 0 1.9 0.8 1.9 1.9 
                C26.354 13.8 26.1 14.3 25.8 14.605z"></path></g></svg>
            </span>
            <span class="text">reddit</span>
        </a>
    </li>
    <li class="googleplus small" style="width: 42px;" data-initwidth="16.666666666666668" data-size="51">
        <!-- Replace href with your meta and URL information.  -->
        <a href="https://plus.google.com/share?url=http%3a%2f%2fwww.codeproject.com%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis" class="popup">
            <span class="icon">
                <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewBox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve">
                    <g>
                        <g>
                            <path d="M14.703,15.854l-1.219-0.948c-0.372-0.308-0.88-0.715-0.88-1.459c0-0.748,0.508-1.223,0.95-1.663
                                c1.42-1.119,2.839-2.309,2.839-4.817c0-2.58-1.621-3.937-2.399-4.581h2.097l2.202-1.383h-6.67c-1.83,0-4.467,0.433-6.398,2.027
                                C3.768,4.287,3.059,6.018,3.059,7.576c0,2.634,2.022,5.328,5.604,5.328c0.339,0,0.71-0.033,1.083-0.068
                                c-0.167,0.408-0.336,0.748-0.336,1.324c0,1.04,0.551,1.685,1.011,2.297c-1.524,0.104-4.37,0.273-6.467,1.562
                                c-1.998,1.188-2.605,2.916-2.605,4.137c0,2.512,2.358,4.84,7.289,4.84c5.822,0,8.904-3.223,8.904-6.41
                                c0.008-2.327-1.359-3.489-2.829-4.731H14.703z M10.269,11.951c-2.912,0-4.231-3.765-4.231-6.037c0-0.884,0.168-1.797,0.744-2.511
                                c0.543-0.679,1.489-1.12,2.372-1.12c2.807,0,4.256,3.798,4.256,6.242c0,0.612-0.067,1.694-0.845,2.478
                                c-0.537,0.55-1.438,0.948-2.295,0.951V11.951z M10.302,25.609c-3.621,0-5.957-1.732-5.957-4.142c0-2.408,2.165-3.223,2.911-3.492
                                c1.421-0.479,3.25-0.545,3.555-0.545c0.338,0,0.52,0,0.766,0.034c2.574,1.838,3.706,2.757,3.706,4.479
                                c-0.002,2.073-1.736,3.665-4.982,3.649L10.302,25.609z"></path>
                            <polygon points="23.254,11.89 23.254,8.521 21.569,8.521 21.569,11.89 18.202,11.89 18.202,13.604 21.569,13.604 21.569,17.004
                                23.254,17.004 23.254,13.604 26.653,13.604 26.653,11.89      "></polygon>
                        </g>
                    </g>
                </svg>
            </span>
            <span class="text">google+</span>
        </a>
    </li>
    
</ul>
<!-- Buttons end here -->

				        </div> 
    			        


						
						<h2 id="ctl00_AboutHeading">About the Author</h2>
						    


<div class="author-wrapper">

    <div class="pic-wrapper"> 
        <img id="ctl00_AboutAuthorRptr_ctl00_AboutAuthor_memberPhoto" class="profile-pic" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/member_unknown.gif" style="border-width:0px;transform:rotate(0deg);">

    </div>

    <div class="container-member">  
        <b><a id="ctl00_AboutAuthorRptr_ctl00_AboutAuthor_memberProfileLink" class="author" href="http://www.codeproject.com/Members/Prentice_Hall">Prentice_Hall</a></b>

        <table class="extended">
        <tbody><tr>
            <td rowspan="2" valign="middle" nowrap="nowrap">
            
            </td>
            <td width="100%">
                <div class="company">
                    <span id="ctl00_AboutAuthorRptr_ctl00_AboutAuthor_memberJobTitle"></span>
	                <span id="ctl00_AboutAuthorRptr_ctl00_AboutAuthor_memberCompany"></span>
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <span id="ctl00_AboutAuthorRptr_ctl00_AboutAuthor_memberLocation">United States <img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/US.gif" alt="United States" width="16px" height="11px"></span>
            </td>
        </tr>
        </tbody></table>
    </div>

    <div class="description">
        No Biography provided

        
    </div>

</div><br>
						
						

						<div class="clearfix"></div>

						<div style="padding-top:8px">
							
						</div>

					

				    
					</form>

				</div>

				
				<div class="bottom-promo"> 
				    <div class="msg-728x90" data-format="728x90" data-type="ad" data-publisher="lqm.codeproject.site" data-zone="General-Reading/Book-Chapters/Prentice-Hall" data-loadonview="true" data-tags="C#,rating4.5,pos_bottom"><noscript><a href="http://pubads.g.doubleclick.net/gampad/jump?iu=/6839/lqm.codeproject.site/General-Reading/Book-Chapters/Prentice-Hall&sz=728x90&c=7105"><img src="http://pubads.g.doubleclick.net/gampad/ad?iu=/6839/lqm.codeproject.site/General-Reading/Book-Chapters/Prentice-Hall&sz=728x90&c=7105"  width="728px" height="90px" target="_blank"/></a></noscript></div>
				</div>
				

                
        <h2 id="ctl00_AlsoRead_RelatedResults_ctl00_Header" class="also-read">You may also be interested in...</h2>
        <table class="spaced content-list also-read">
    
	    <tbody><tr>
        <td class="content-list-item" width="50%" valign="top">
            <div id="ctl00_AlsoRead_RelatedResults_ctl01_ThumbnailContainer" class="thumbnail">
                <a id="ctl00_AlsoRead_RelatedResults_ctl01_Thumbnail" href="http://www.codeproject.com/ResearchLibrary/225/How-Companies-Maintain-Optimal-NET-Performance"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/LibraryItemThumbnail_225_100x130.png" alt="" style="border-width:0px;"></a>
            <div class="pro-badge">Pro</div></div>
            <div class="text">
                <div class="title"><a id="ctl00_AlsoRead_RelatedResults_ctl01_Link" href="http://www.codeproject.com/ResearchLibrary/225/How-Companies-Maintain-Optimal-NET-Performance">How 5 Companies Maintain Optimal .NET Performance</a></div>
                
            </div>
        </td>
	
        <td class="content-list-item" width="50%" valign="top">
            <div id="ctl00_AlsoRead_RelatedResults_ctl02_ThumbnailContainer" class="thumbnail">
                <a id="ctl00_AlsoRead_RelatedResults_ctl02_Thumbnail" href="http://www.codeproject.com/Articles/23/SAPrefs-Netscape-like-Preferences-Dialog"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/Thumb-23.gif" alt="" style="border-width:0px;"></a>
            </div>
            <div class="text">
                <div class="title"><a id="ctl00_AlsoRead_RelatedResults_ctl02_Link" href="http://www.codeproject.com/Articles/23/SAPrefs-Netscape-like-Preferences-Dialog">SAPrefs - Netscape-like Preferences Dialog</a></div>
                
            </div>
        </td>
	    </tr>
	
	    <tr>
        <td class="content-list-item" width="50%" valign="top">
            <div id="ctl00_AlsoRead_RelatedResults_ctl03_ThumbnailContainer" class="thumbnail">
                <a id="ctl00_AlsoRead_RelatedResults_ctl03_Thumbnail" href="http://www.codeproject.com/Articles/5608/Writing-Object-Oriented-JavaScript-Part"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/article100x80.png" alt="" style="border-width:0px;"></a>
            </div>
            <div class="text">
                <div class="title"><a id="ctl00_AlsoRead_RelatedResults_ctl03_Link" href="http://www.codeproject.com/Articles/5608/Writing-Object-Oriented-JavaScript-Part">Writing Object-Oriented JavaScript  Part 1</a></div>
                
            </div>
        </td>
	
        <td class="content-list-item" width="50%" valign="top">
            <div id="ctl00_AlsoRead_RelatedResults_ctl04_ThumbnailContainer" class="thumbnail">
                <a id="ctl00_AlsoRead_RelatedResults_ctl04_Thumbnail" href="http://www.codeproject.com/Articles/47864/Generate-and-add-keyword-variations-using-AdWords"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/Thumb-47864.png" alt="" style="border-width:0px;"></a>
            </div>
            <div class="text">
                <div class="title"><a id="ctl00_AlsoRead_RelatedResults_ctl04_Link" href="http://www.codeproject.com/Articles/47864/Generate-and-add-keyword-variations-using-AdWords">Generate and add keyword variations using AdWords API</a></div>
                
            </div>
        </td>
	    </tr>
	
	    <tr>
        <td class="content-list-item" width="50%" valign="top">
            <div id="ctl00_AlsoRead_RelatedResults_ctl05_ThumbnailContainer" class="thumbnail">
                <a id="ctl00_AlsoRead_RelatedResults_ctl05_Thumbnail" href="http://www.codeproject.com/Articles/35300/Object-oriented-Programming-Using-MFC"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/Thumb-35300.JPG" alt="" style="border-width:0px;"></a>
            </div>
            <div class="text">
                <div class="title"><a id="ctl00_AlsoRead_RelatedResults_ctl05_Link" href="http://www.codeproject.com/Articles/35300/Object-oriented-Programming-Using-MFC">Object-oriented Programming Using MFC</a></div>
                
            </div>
        </td>
	
        <td class="content-list-item" width="50%" valign="top">
            <div id="ctl00_AlsoRead_RelatedResults_ctl06_ThumbnailContainer" class="thumbnail">
                <a id="ctl00_AlsoRead_RelatedResults_ctl06_Thumbnail" href="http://www.codeproject.com/Articles/107/Window-Tabs-WndTabs-Add-In-for-DevStudio"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/Thumb-107.jpg" alt="" style="border-width:0px;"></a>
            </div>
            <div class="text">
                <div class="title"><a id="ctl00_AlsoRead_RelatedResults_ctl06_Link" href="http://www.codeproject.com/Articles/107/Window-Tabs-WndTabs-Add-In-for-DevStudio">Window Tabs (WndTabs) Add-In for DevStudio</a></div>
                
            </div>
        </td>
	    </tr>
	
		</tbody></table>
	



				
				

					<h2>Comments and Discussions</h2>
					<a class="float-left" name="_comments" id="_comments">&nbsp;</a><div id="_MessageBoardctl00_MessageBoard" onclick="return SwitchMessage(event, null)">
<table id="ForumTable" class="forum relaxed" cellspacing="0" cellpadding="0">
<tbody><tr>
<td class="header1 callout"><b>You must <a href="https://www.codeproject.com/script/Membership/LogOn.aspx?rp=%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis%3ffid%3d1537336%26df%3d90%26mpp%3d25%26sort%3dPosition%26view%3dNormal%26spc%3dRelaxed">Sign In</a> to use this message board.</b></td>
</tr><tr>
<td><table width="100%" cellspacing="0" cellpadding="3px" border="0">
<tbody><tr class="header1">
<td colspan="2" style="white-space:nowrap;"><div class="container">
<div class="float-right">
<form action="/Search.aspx?sbo=fm" method="get" class="searchbar">
<input name="fid" value="1537336" type="hidden"><input name="sbo" value="fm" type="hidden"><b>Search Comments </b><input class="search" name="qf" type="search">&nbsp;<input value="Go" class="button" type="submit">
</form>
</div>
</div></td>
</tr><tr class="header2">
<td></td><td style="width:100%;"><div style="text-align:right;">
<form action="/script/Forums/SetOptions.aspx?fid=1537336&amp;df=90&amp;mpp=25&amp;sort=Position&amp;view=Normal&amp;spc=Relaxed&amp;floc=%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis" method="get" style="margin:0;padding:0;">
<input name="fid" value="1537336" type="hidden"><input name="currentQS" value="fid=1537336&amp;df=90&amp;mpp=25&amp;sort=Position&amp;view=Normal&amp;spc=Relaxed&amp;floc=%2fArticles%2f34125%2fChapter-Object-Oriented-Programming-Polymorphis" type="hidden"><input name="floc" value="/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis" type="hidden">Spacing<select size="1" class="dropdown" name="spc">
<option selected="selected" value="Relaxed">Relaxed</option><option value="Compact">Compact</option><option value="Tight">Tight</option>
</select>&nbsp;&nbsp;Layout<select size="1" class="dropdown" name="view">
<option selected="selected" value="Normal">Normal</option><option value="Topic">Open Topics</option><option value="Expanded">Open All</option><option value="Thread">Thread View</option>
</select>&nbsp;&nbsp;Per page<select size="1" class="dropdown" name="mpp">
<option value="10">10</option><option selected="selected" value="25">25</option><option value="50">50</option>
</select>&nbsp;&nbsp;&nbsp;<input value="Update" name="SetOpt" class="button" type="submit">
</form>
</div></td>
</tr>
</tbody></table></td>
</tr><tr>
<td><a name="xx0xx"></a><table width="100%" cellspacing="0" cellpadding="2px" border="0">
<tbody><tr class="navbar">
<td></td><td style="text-align:right;width:50%;"></td><td style="text-align:right;white-space:nowrap;"><span class="nav-link disabled">First</span> <span class="nav-link disabled">Prev</span> <span class="nav-link disabled">Next</span></td>
</tr>
</tbody></table></td>
</tr><tr>
<td><table class="fixed-layout blank-background" width="100%" cellspacing="0" cellpadding="0" border="0">
<tbody><tr>
<td><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/t.gif" alt="" width="1px" border="0" height="5px"></td>
</tr><tr id="F3612713_h0" class="header hover-row root">
<td class="subject-line normal " width="100%"><table width="100%" cellspacing="0" cellpadding="0" border="0">
<tbody><tr>
<td class="indent" width="20px"><a name="xx3612713xx"></a><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/msg_general.gif" alt="General" width="16px" align="top" height="16px"></td><td class="subject hover-container"><a class="message-link" name="3612713" parent="0" thread="3612713" href="http://www.codeproject.com/Messages/3612713/My-vote-of.aspx">My vote of 5</a> <a onclick="return Pin(this);" rel="nofollow" href="#" title="Click to pin message"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/pin.png" alt="Pin" width="13px" border="0" align="top" height="13px"></a><div class="mobile-only">
	<span class="author">thatraja</span><span class="date">28-Sep-10  0:22</span>
</div></td><td class="icon"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/icn-member-16.gif" title="member" alt="member" border="0" height="16px"></td><td class="author"><span><a href="http://www.codeproject.com/script/Membership/View.aspx?mid=6851686">thatraja</a></span></td><td class="date"><span>28-Sep-10  0:22&nbsp;</span></td>
</tr>
</tbody></table></td>
</tr><tr id="F3612713_h1" class="content root selected" style="display:none;">
<td class="normal" width="100%"><table width="100%" cellspacing="0" cellpadding="0" border="0">
<tbody><tr valign="top">
<td class="indent align-right" style="width:20px;"><div class="voteform vertical" ownerid="6851686" msgid="3612713" votingtype="GoodOrBad">

</div><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/t.gif" alt="" width="20px" height="1px"></td><td class="text"><table width="100%" cellspacing="5px" cellpadding="0" border="0">
<tbody><tr>
<td><table width="100%" cellspacing="0" cellpadding="0" border="0">
<tbody><tr>
<td colspan="2">Good one<br></td>
</tr><tr class="footer" style="vertical-align:top;">
<td><a href="http://www.codeproject.com/script/Membership/LogOn.aspx?rp=/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis">Sign In</a>·<wbr><a href="http://www.codeproject.com/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis?fid=1537336&amp;df=90&amp;mpp=25&amp;sort=Position&amp;spc=Relaxed&amp;tid=3612713" title="View&nbsp;Thread">View&nbsp;Thread</a>·<wbr><a href="http://www.codeproject.com/Messages/3612713/My-vote-of.aspx" title="Get permanent link">Permalink</a></td><td style="text-align:right;"><span id="MVF3612713" data-ref="3_3612713" class="rating-label" style="white-space:nowrap;"></span></td>
</tr>
</tbody></table></td>
</tr>
</tbody></table></td>
</tr>
</tbody></table></td>
</tr>
</tbody></table></td>
</tr><tr>
<td><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/t.gif" alt="" width="1px" border="0" height="5px"></td>
</tr><tr>
<td><table width="100%" cellspacing="0" cellpadding="2px">
<tbody><tr class="footer">
<td><span class="last-visit desktop-only tablet-only">Last Visit: 31-Dec-99  18:00 &nbsp; &nbsp; Last Update: 29-Oct-16  5:09</span></td><td><a rel="nofollow" href="http://www.codeproject.com/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis?fid=1537336&amp;df=90&amp;mpp=25&amp;sort=Position&amp;spc=Relaxed&amp;view=Normal">Refresh</a></td><td style="text-align:right;white-space:nowrap;"><input id="_mbnUrl" value="/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis?fid=1537336&amp;df=90&amp;mpp=25&amp;sort=Position&amp;spc=Relaxed&amp;view=Normal&amp;fr=2" type="hidden"><span class="nav-link selected">1</span></td>
</tr>
</tbody></table></td>
</tr>
</tbody></table>
</div><p class="small-text"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/msg_general.gif" alt="General" width="16px" align="top" height="16px"> General &nbsp;&nbsp; <img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/msg_news.gif" alt="News" width="16px" align="top" height="16px"> News &nbsp;&nbsp; <img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/msg_idea.gif" alt="Suggestion" width="16px" align="top" height="16px"> Suggestion &nbsp;&nbsp; <img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/msg_question.gif" alt="Question" width="16px" align="top" height="16px"> Question &nbsp;&nbsp; <img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/msg_bug.gif" alt="Bug" width="16px" align="top" height="16px"> Bug &nbsp;&nbsp; <img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/msg_answer.gif" alt="Answer" width="16px" align="top" height="16px"> Answer &nbsp;&nbsp; <img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/msg_joke.gif" alt="Joke" width="16px" align="top" height="16px"> Joke &nbsp;&nbsp; <img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/msg_kudos.gif" alt="Praise" width="16px" align="top" height="16px"> Praise &nbsp;&nbsp; <img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/msg_rant.gif" alt="Rant" width="16px" align="top" height="16px"> Rant &nbsp;&nbsp; <img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/msg_admin.gif" alt="Admin" width="16px" align="top" height="16px"> Admin &nbsp;&nbsp; </p><p class="small-text">Use Ctrl+Left/Right to switch messages, Ctrl+Up/Down to switch threads, Ctrl+Shift+Left/Right to switch pages.</p>
				

			</div>
			
		</td>
		<td class="article-wing-right" width="170px">
			<div id="ctl00_RightSideBar" class="container-article-info">

                <div id="RHSticky" class="container-article-info-sticky stuck" style="position: fixed; top: 10px; left: 0px;">
        			


<div class="article-summary">

    


    

    

    
</div>

				    

				    <div style="width:160px;margin: 10px auto;">
					    <div class="msg-160x600" data-format="160x600" data-type="ad" data-publisher="lqm.codeproject.site" data-zone="General-Reading/Book-Chapters/Prentice-Hall" data-tags="C#,rating4.5"><noscript><a href="http://pubads.g.doubleclick.net/gampad/jump?iu=/6839/lqm.codeproject.site/General-Reading/Book-Chapters/Prentice-Hall&sz=160x600&c=163864"><img src="http://pubads.g.doubleclick.net/gampad/ad?iu=/6839/lqm.codeproject.site/General-Reading/Book-Chapters/Prentice-Hall&sz=160x600&c=163864"  width="160px" height="600px" target="_blank"/></a></noscript></div>
				    </div>

                    

				    

				    

				    

                    <div class="anchorLink gototop" id="gototop">
                        <a id="ctl00_GoToTop" href="http://www.codeproject.com/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis#_articleTop">Go to top</a>
                    </div>

				</div>

			</div>
		</td>
		</tr></tbody></table>

		
		<div class="theme1-background" style="height:2px" id="stickyStop"></div>

		<div class="extended tiny-text">
			<div class="row">
				<div class="float-left">
					<a id="ctl00_PermaLink" itemprop="url" href="http://www.codeproject.com/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis">Permalink</a> | 
					<a id="ctl00_AdvertiseLink" href="http://developermedia.com/">Advertise </a> |
					<a id="ctl00_PrivacyLink" href="http://www.codeproject.com/info/privacy.aspx">Privacy</a> |
                    <a id="ctl00_TermsOfUseLink" href="http://www.codeproject.com/info/TermsOfUse.aspx">Terms of Use</a> |
					<a id="ctl00_Mobile">Mobile</a>
					<br>
								
					
					Web02 |
					2.8.161027.1 |
					Last Updated 13 Mar 2009								
				</div>

                <div id="ctl00_GoogleTranslate" class="translate float-left"><div class="skiptranslate goog-te-gadget" dir="ltr" style=""><div id=":0.targetLanguage" style="white-space: nowrap;" class="goog-te-gadget-simple"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/cleardot.gif" class="goog-te-gadget-icon" alt="" style="background-image: url(&quot;https://translate.googleapis.com/translate_static/img/te_ctrl3.gif&quot;); background-position: -65px 0px;"><span style="vertical-align: middle;"><a role="menu" class="goog-te-menu-value" href="javascript:void(0)"><span>Select Language</span><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/cleardot.gif" alt="" width="1" height="1"><span style="border-left: 1px solid rgb(187, 187, 187);">​</span><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/cleardot.gif" alt="" width="1" height="1"><span style="color: rgb(155, 155, 155);">▼</span></a></span></div></div></div>      

				<div class="float-right align-right">
					Article Copyright 2009 by Prentice_Hall<br>Everything else
					Copyright © <a href="mailto:webmaster@codeproject.com">CodeProject</a>, 1999-2016 <br>
				</div>

				


<div class="page-width">
Layout: <a id="ctl00_PageWidth_FixedT" title="Fixed width layout" rel="nofollow" class=" active" href="http://www.codeproject.com/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis?PageFlow=FixedWidth">fixed</a>
|
<a id="ctl00_PageWidth_FluidT" title="Fluid layout" rel="nofollow" href="http://www.codeproject.com/Articles/34125/Chapter-Object-Oriented-Programming-Polymorphis?PageFlow=Fluid">fluid</a>
</div>



			</div>
		</div>
		

		<br clear="all">
		
			

	</div> 
	</div>
</div>


<img id="ctl00_Audience" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/DFPAudiencePixel.gif" style="border-width: 0px; height: 1px; width: 1px; display: none ! important;" hidden="">



<script type="text/javascript" language="Javascript" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/article.js"></script><script async="" type="text/javascript" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/gpt.js"></script>
<script type="text/javascript" language="Javascript" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/element.js"></script>
<script type="text/javascript" language="Javascript" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/navbar.js"></script>
<script type="text/javascript" language="Javascript" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/Notifications.js"></script>
<script type="text/javascript" language="Javascript" src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/MemberProfilePopup.js"></script>
<script type="text/javascript" language="Javascript">//<![CDATA[
$(document).ready(function () { processCodeBlocks.Initialise('#contentdiv'); });
function googleTranslateElementInit() {  new google.translate.TranslateElement({   pageLanguage: 'en',   layout: google.translate.TranslateElement.InlineLayout.SIMPLE,   autoDisplay: false,   gaTrack: true,   gaId: 'UA-1735123-1'},  'ctl00_GoogleTranslate');}
$(document).ready(function() { anchorAnimate();
$('#RHSticky').sticky($('#stickyStop'));
$('#ctl00_Nav').sticky($('#stickyStop'));
});
$(function ()
                {
                    $('.oauth').click(function () {
                        $this = $(this);
                        href = $this.attr('href');
                        var myWindow = window.open(href, 'popup',
                                    'width=800,height=600,location=0,menubar=0,resizeable=0,scrollbars=0,toolbar=0');
                        myWindow.focus();
                        var timer = setInterval(function () {
                                        if (myWindow.closed) {
                                            clearInterval(timer);
                                            // window.location.reload(); // May do a POST reload, shows a warning
                                            window.location = window.location; // force a GET reload
                                        }
                                    }, 200);
                        return false;
                    });
                });
var oSrchFlt = false, oSrchBox=false,srchBoxFoc=false;
$(document).ready(function() {
 if(InitWatermark)InitWatermark('sb_tb', 'Search for articles, questions, tips');
 var sbar = $('#sb_tb'); 
 var sfilter = $('#SearchFilter');
 if (sbar && sfilter) {
  sfilter.removeClass('popup'); sfilter.hide(); sfilter.removeClass('open');
  sbar.blur(function() {
 if (!oSrchFlt) {sfilter.hide(); sfilter.removeClass('open');}
 srchBoxFoc=false;
 });
  sbar.focus(function() {
 oSrchFlt=false; srchBoxFoc=true;
 sfilter.show(); sfilter.addClass('open');
 });
  sbar.mouseleave(function() { oSrchBox=false; });
  sbar.mouseover(function() { oSrchBox=true; });
  sfilter.mouseleave(function() { oSrchFlt=false; if (!srchBoxFoc&&!oSrchBox) { sfilter.hide(); sfilter.removeClass('open'); }});
  sfilter.mouseover(function() { oSrchFlt=true; });
 }
});
$('#clear-rate_ctl00_RateArticle_RSU').click(function () {    $('#ctl00_RateArticle_RSU').hide(); return false;});$("#ctl00_RateArticle_RateItemWrapper")   .removeClass("container-rating")   .hover( function() { $('#ctl00_RateArticle_RSU').fadeIn('fast'); },            function() { $('#ctl00_RateArticle_RSU').fadeOut('fast'); } );
function PostBack_ctl00_RateArticle_RateItemWrapper() {
  return rateItem(34125,2,1,true,true,0,'LargeStars');
}

                        function getVotesHistogram(objectId, objectTypeId, containerId, loadingId) {
                            if (!$('#' + containerId).attr('alreadyRequested')){
                                $.ajax({
                                    url: '/script/Ratings/Ajax/Histogram.aspx?obid=' + objectId + '&obtid='+objectTypeId,
                                    success: function (data) {
                                        $('#' + containerId).html(data);
                                        $('#' + loadingId).hide();
                                    }
                                });
                                $('#' + containerId).attr('alreadyRequested', 'true');
                            }
                        }
$(document).ready(function() {   new starRating('#ctl00_RateArticle_VoteFormDiv', PostBack_ctl00_RateArticle_RateItemWrapper,'ctl00_RateArticle');
  $('#ctl00_RateArticle_RB').mouseenter(function() {     getVotesHistogram(34125,2   ,'ctl00_RateArticle_Histogram','ctl00_RateArticle_Loading');  })})
$(document).ready(function() { $('#ctl00_RateArticle_SubmitRateBtn').hide(); });
$(document).ready(function() { $('#ctl00_RateArticle_SubmitRateBtn').hide(); });function ChkRtctl00_RateArticle(){}

forumDir = '/script/Forums/';
allowReporting = false;
allowRating = false;
allowRatingDisplay = true;
var smoothScroll = false;
Selected        = -1;
oldTitle        = document.title;
minMessageScore = 1;
minMessageScore = 5;
abuseScore      = -2;
spamScore       = -1;
getRatingUrl    = '/script/Ratings/Ajax/GetRatings.aspx';
getRatingRefKey = 'obrs';


//]]>
</script>



<style type="text/css">.copied::after {  position: absolute;  display: inline-block;  content: 'copied'; color: #fff; background-color: #f90;  border-radius: 3px; padding:1px 3px; opacity: 0;  will-change: opacity, transform; animation: showcopied 1.5s ease; } @keyframes showcopied { 0% { opacity: 0; transform: translateX(-100%); } 70% { opacity: 1; transform: translateX(0); } 100% { opacity: 0; } } </style><canvas id="cv1" width="1px" height="1px" style="position:absolute;left:0;top:0;pointer-events:none"></canvas><canvas id="cv2" width="1px" height="1px" style="position:absolute;left:0;top:0;pointer-events:none"></canvas><div id="MemberProfilePopupDiv" class="raised box" style="display: none; position: absolute;"></div><div id="MemberProfilePopupDiv" class="raised box" style="display: none; position: absolute;"></div><div id="MemberProfilePopupDiv" class="raised box" style="display: none; position: absolute;"></div><style type="text/css">.copied::after {  position: absolute;  display: inline-block;  content: 'copied'; color: #fff; background-color: #f90;  border-radius: 3px; padding:1px 3px; opacity: 0;  will-change: opacity, transform; animation: showcopied 1.5s ease; } @keyframes showcopied { 0% { opacity: 0; transform: translateX(-100%); } 70% { opacity: 1; transform: translateX(0); } 100% { opacity: 0; } } </style><iframe src="http://apps.developermedia.com/Ads/GlobalUserIdentification/" id="DMGlobalUserIdetifierIFRAME" name="DMGlobalUserIdetifierIFRAME" style="display: none ! important;" width="1" hidden="" height="1"></iframe><div id="goog-gt-tt" class="skiptranslate" dir="ltr"><div style="padding: 8px;"><div><div class="logo"><img src="Chapter%2010%20%20Object-Oriented%20Programming%20%20Polymorphism%20-%20CodeProject_files/translate_24dp.png" width="20" height="20"></div></div></div><div class="top" style="padding: 8px; float: left; width: 100%;"><h1 class="title gray">Original text</h1></div><div class="middle" style="padding: 8px;"><div class="original-text"></div></div><div class="bottom" style="padding: 8px;"><div class="activity-links"><span class="activity-link">Contribute a better translation</span><span class="activity-link"></span></div><div class="started-activity-container"><hr style="color: #CCC; background-color: #CCC; height: 1px; border: none;"><div class="activity-root"></div></div></div><div class="status-message" style="display: none;"></div></div><iframe class="goog-te-menu-frame skiptranslate" style="visibility: visible; box-sizing: content-box; width: 1028px; height: 290px; display: none;" frameborder="0"></iframe></body></html>